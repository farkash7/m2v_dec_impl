//================================================================================
// m2vdec - MPEG2 Decoder
// (This module is generated by ../tools/gentop.rb)
//
// Sub-modules:
//   m2vctrl.v
//   m2visdq.v
//   m2vidct.v
//   m2vmc.v
//   m2vside1.v
//   m2vside2.v
//   m2vside3.v
//   m2vside4.v
//================================================================================

module m2vdec
#(
	parameter
	MEM_WIDTH = 0,
	MVH_WIDTH = 0,
	MVV_WIDTH = 0,
	MBX_WIDTH = 0,
	MBY_WIDTH = 0,
	MBX_ADDER = 0
)
(
	input         csi_clk,
	input         rsi_reset_n,
	input   [0:0] avs_control_address,
	input         avs_control_read,
	output [31:0] avs_control_readdata,
	input         avs_control_write,
	input  [31:0] avs_control_writedata,
	output        avs_control_readdatavalid,
	output        ins_irq,
	input         asi_stream_valid,
	input   [7:0] asi_stream_data,
	output        asi_stream_ready,
	output [(MEM_WIDTH-1):0] avm_fbuf_address,
	output        avm_fbuf_read,
	input  [15:0] avm_fbuf_readdata,
	output        avm_fbuf_write,
	output [15:0] avm_fbuf_writedata,
	input         avm_fbuf_waitrequest,
	input         avm_fbuf_readdatavalid,
	input  [(MBX_WIDTH+MBY_WIDTH-1):0] coe_fptr_address,
	output        coe_fptr_updated,
	output        coe_fptr_number,
	input         pre_block_start
);

// Wires

wire [(MVH_WIDTH-1):0] s0_data_w;
wire pict_valid_w;
wire mvec_h_valid_w;
wire mvec_v_valid_w;
wire s0_valid_w;
wire [(MBX_WIDTH-1):0] s0_mb_x_w;
wire [(MBY_WIDTH-1):0] s0_mb_y_w;
wire [4:0] s0_mb_qscode_w;
wire [2:0] s1_block_w;
wire s1_coded_w;
wire ready_isdq_w;
wire [5:0] run_w;
wire level_sign_w;
wire [10:0] level_data_w;
wire rl_valid_w;
wire qm_valid_w;
wire qm_custom_w;
wire qm_intra_w;
wire [7:0] qm_value_w;
wire ready_idct_w;
wire ready_mc_w;
wire softreset_w;
wire block_start_w;
wire block_end_w;
wire picture_complete_w;
wire s1_enable_w;
wire s1_mb_intra_w;
wire [4:0] s1_mb_qscode_w;
wire sa_qstype_w;
wire [1:0] sa_dcprec_w;
wire coef_sign_w;
wire [11:0] coef_data_w;
wire coef_next_w;
wire s2_enable_w;
wire s2_coded_w;
wire s3_enable_w;
wire s3_coded_w;
wire pixel_coded_w;
wire [4:0] pixel_addr_w;
wire [8:0] pixel_data0_w;
wire [8:0] pixel_data1_w;
wire sa_iframe_w;
wire s2_mb_intra_w;
wire [(MVH_WIDTH-1):0] s3_mv_h_w;
wire [(MVV_WIDTH-1):0] s3_mv_v_w;
wire [(MBX_WIDTH-1):0] s3_mb_x_w;
wire [(MBY_WIDTH-1):0] s3_mb_y_w;
wire s3_mb_intra_w;
wire [2:0] s3_block_w;
wire [(MBX_WIDTH-1):0] s4_mb_x_w;
wire [(MBY_WIDTH-1):0] s4_mb_y_w;
wire s4_mb_intra_w;
wire [2:0] s4_block_w;
wire s4_coded_w;
wire s4_enable_w;
wire [(MVH_WIDTH-1):0] s1_mv_h_w;
wire [(MVV_WIDTH-1):0] s1_mv_v_w;
wire [(MBX_WIDTH-1):0] s1_mb_x_w;
wire [(MBY_WIDTH-1):0] s1_mb_y_w;
wire [(MVH_WIDTH-1):0] s2_mv_h_w;
wire [(MVV_WIDTH-1):0] s2_mv_v_w;
wire [(MBX_WIDTH-1):0] s2_mb_x_w;
wire [(MBY_WIDTH-1):0] s2_mb_y_w;
wire [2:0] s2_block_w;

// Sub-module instanciations

m2vctrl #(
	.MEM_WIDTH(MEM_WIDTH),
	.MVH_WIDTH(MVH_WIDTH),
	.MVV_WIDTH(MVV_WIDTH),
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH),
	.MBX_ADDER(MBX_ADDER)
) u_m2vctrl (
	.clk                   (csi_clk),
	.reset_n               (rsi_reset_n),
	.control_address       (avs_control_address),
	.control_read          (avs_control_read),
	.control_readdata      (avs_control_readdata),
	.control_write         (avs_control_write),
	.control_writedata     (avs_control_writedata),
	.control_readdatavalid (avs_control_readdatavalid),
	.irq                   (ins_irq),
	.stream_valid          (asi_stream_valid),
	.stream_data           (asi_stream_data),
	.stream_ready          (asi_stream_ready),
	.s0_data               (s0_data_w),
	.pict_valid            (pict_valid_w),
	.mvec_h_valid          (mvec_h_valid_w),
	.mvec_v_valid          (mvec_v_valid_w),
	.s0_valid              (s0_valid_w),
	.s0_mb_x               (s0_mb_x_w),
	.s0_mb_y               (s0_mb_y_w),
	.s0_mb_qscode          (s0_mb_qscode_w),
	.s1_block              (s1_block_w),
	.s1_coded              (s1_coded_w),
	.ready_isdq            (ready_isdq_w),
	.run                   (run_w),
	.level_sign            (level_sign_w),
	.level_data            (level_data_w),
	.rl_valid              (rl_valid_w),
	.qm_valid              (qm_valid_w),
	.qm_custom             (qm_custom_w),
	.qm_intra              (qm_intra_w),
	.qm_value              (qm_value_w),
	.ready_idct            (ready_idct_w),
	.ready_mc              (ready_mc_w),
	.softreset             (softreset_w),
	.block_start           (block_start_w),
	.block_end             (block_end_w),
	.picture_complete      (picture_complete_w)
);

m2visdq u_m2visdq (
	.clk          (csi_clk),
	.reset_n      (rsi_reset_n),
	.softreset    (softreset_w),
	.ready_isdq   (ready_isdq_w),
	.block_start  (block_start_w),
	.block_end    (block_end_w),
	.s1_enable    (s1_enable_w),
	.s1_coded     (s1_coded_w),
	.s1_mb_intra  (s1_mb_intra_w),
	.s1_mb_qscode (s1_mb_qscode_w),
	.sa_qstype    (sa_qstype_w),
	.sa_dcprec    (sa_dcprec_w),
	.run          (run_w),
	.level_sign   (level_sign_w),
	.level_data   (level_data_w),
	.rl_valid     (rl_valid_w),
	.qm_valid     (qm_valid_w),
	.qm_custom    (qm_custom_w),
	.qm_intra     (qm_intra_w),
	.qm_value     (qm_value_w),
	.coef_sign    (coef_sign_w),
	.coef_data    (coef_data_w),
	.coef_next    (coef_next_w)
);

m2vidct u_m2vidct (
	.clk         (csi_clk),
	.reset_n     (rsi_reset_n),
	.softreset   (softreset_w),
	.ready_idct  (ready_idct_w),
	.block_start (block_start_w),
	.s2_enable   (s2_enable_w),
	.s2_coded    (s2_coded_w),
	.s3_enable   (s3_enable_w),
	.s3_coded    (s3_coded_w),
	.coef_next   (coef_next_w),
	.coef_sign   (coef_sign_w),
	.coef_data   (coef_data_w),
	.pixel_coded (pixel_coded_w),
	.pixel_addr  (pixel_addr_w),
	.pixel_data0 (pixel_data0_w),
	.pixel_data1 (pixel_data1_w)
);

m2vmc #(
	.MEM_WIDTH(MEM_WIDTH),
	.MVH_WIDTH(MVH_WIDTH),
	.MVV_WIDTH(MVV_WIDTH),
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH)
) u_m2vmc (
	.clk                (csi_clk),
	.reset_n            (rsi_reset_n),
	.softreset          (softreset_w),
	.ready_mc           (ready_mc_w),
	.block_start        (block_start_w),
	.picture_complete   (picture_complete_w),
	.pixel_coded        (pixel_coded_w),
	.pixel_addr         (pixel_addr_w),
	.pixel_data0        (pixel_data0_w),
	.pixel_data1        (pixel_data1_w),
	.sa_iframe          (sa_iframe_w),
	.s2_mb_intra        (s2_mb_intra_w),
	.s2_enable          (s2_enable_w),
	.s3_mv_h            (s3_mv_h_w),
	.s3_mv_v            (s3_mv_v_w),
	.s3_mb_x            (s3_mb_x_w),
	.s3_mb_y            (s3_mb_y_w),
	.s3_mb_intra        (s3_mb_intra_w),
	.s3_block           (s3_block_w),
	.s3_coded           (s3_coded_w),
	.s3_enable          (s3_enable_w),
	.s4_mb_x            (s4_mb_x_w),
	.s4_mb_y            (s4_mb_y_w),
	.s4_mb_intra        (s4_mb_intra_w),
	.s4_block           (s4_block_w),
	.s4_coded           (s4_coded_w),
	.s4_enable          (s4_enable_w),
	.fbuf_address       (avm_fbuf_address),
	.fbuf_read          (avm_fbuf_read),
	.fbuf_readdata      (avm_fbuf_readdata),
	.fbuf_write         (avm_fbuf_write),
	.fbuf_writedata     (avm_fbuf_writedata),
	.fbuf_waitrequest   (avm_fbuf_waitrequest),
	.fbuf_readdatavalid (avm_fbuf_readdatavalid),
	.fptr_address       (coe_fptr_address),
	.fptr_updated       (coe_fptr_updated),
	.fptr_number        (coe_fptr_number)
);

m2vside1 #(
	.MVH_WIDTH(MVH_WIDTH),
	.MVV_WIDTH(MVV_WIDTH),
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH)
) u_m2vside1 (
	.clk             (csi_clk),
	.reset_n         (rsi_reset_n),
	.s0_data         (s0_data_w),
	.pict_valid      (pict_valid_w),
	.mvec_h_valid    (mvec_h_valid_w),
	.mvec_v_valid    (mvec_v_valid_w),
	.s0_valid        (s0_valid_w),
	.s0_mb_x         (s0_mb_x_w),
	.s0_mb_y         (s0_mb_y_w),
	.s0_mb_qscode    (s0_mb_qscode_w),
	.pre_block_start (pre_block_start),
	.block_start     (block_start_w),
	.sa_dcprec       (sa_dcprec_w),
	.sa_qstype       (sa_qstype_w),
	.sa_iframe       (sa_iframe_w),
	.s1_mv_h         (s1_mv_h_w),
	.s1_mv_v         (s1_mv_v_w),
	.s1_mb_x         (s1_mb_x_w),
	.s1_mb_y         (s1_mb_y_w),
	.s1_mb_qscode    (s1_mb_qscode_w),
	.s1_mb_intra     (s1_mb_intra_w),
	.s1_block        (s1_block_w),
	.s1_coded        (s1_coded_w),
	.s1_enable       (s1_enable_w)
);

m2vside2 #(
	.MVH_WIDTH(MVH_WIDTH),
	.MVV_WIDTH(MVV_WIDTH),
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH)
) u_m2vside2 (
	.clk             (csi_clk),
	.reset_n         (rsi_reset_n),
	.s1_mv_h         (s1_mv_h_w),
	.s1_mv_v         (s1_mv_v_w),
	.s1_mb_x         (s1_mb_x_w),
	.s1_mb_y         (s1_mb_y_w),
	.s1_mb_intra     (s1_mb_intra_w),
	.s1_block        (s1_block_w),
	.s1_coded        (s1_coded_w),
	.s1_enable       (s1_enable_w),
	.pre_block_start (pre_block_start),
	.block_start     (block_start_w),
	.s2_mv_h         (s2_mv_h_w),
	.s2_mv_v         (s2_mv_v_w),
	.s2_mb_x         (s2_mb_x_w),
	.s2_mb_y         (s2_mb_y_w),
	.s2_mb_intra     (s2_mb_intra_w),
	.s2_block        (s2_block_w),
	.s2_coded        (s2_coded_w),
	.s2_enable       (s2_enable_w)
);

m2vside3 #(
	.MVH_WIDTH(MVH_WIDTH),
	.MVV_WIDTH(MVV_WIDTH),
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH)
) u_m2vside3 (
	.clk             (csi_clk),
	.reset_n         (rsi_reset_n),
	.s2_mv_h         (s2_mv_h_w),
	.s2_mv_v         (s2_mv_v_w),
	.s2_mb_x         (s2_mb_x_w),
	.s2_mb_y         (s2_mb_y_w),
	.s2_mb_intra     (s2_mb_intra_w),
	.s2_block        (s2_block_w),
	.s2_coded        (s2_coded_w),
	.s2_enable       (s2_enable_w),
	.pre_block_start (pre_block_start),
	.block_start     (block_start_w),
	.s3_mv_h         (s3_mv_h_w),
	.s3_mv_v         (s3_mv_v_w),
	.s3_mb_x         (s3_mb_x_w),
	.s3_mb_y         (s3_mb_y_w),
	.s3_mb_intra     (s3_mb_intra_w),
	.s3_block        (s3_block_w),
	.s3_coded        (s3_coded_w),
	.s3_enable       (s3_enable_w)
);

m2vside4 #(
	.MBX_WIDTH(MBX_WIDTH),
	.MBY_WIDTH(MBY_WIDTH)
) u_m2vside4 (
	.clk             (csi_clk),
	.reset_n         (rsi_reset_n),
	.s3_mb_x         (s3_mb_x_w),
	.s3_mb_y         (s3_mb_y_w),
	.s3_mb_intra     (s3_mb_intra_w),
	.s3_block        (s3_block_w),
	.s3_coded        (s3_coded_w),
	.s3_enable       (s3_enable_w),
	.pre_block_start (pre_block_start),
	.block_start     (block_start_w),
	.s4_mb_x         (s4_mb_x_w),
	.s4_mb_y         (s4_mb_y_w),
	.s4_mb_intra     (s4_mb_intra_w),
	.s4_block        (s4_block_w),
	.s4_coded        (s4_coded_w),
	.s4_enable       (s4_enable_w)
);

endmodule
