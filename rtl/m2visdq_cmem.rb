#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#================================================================================
# MPEG2 Video Dequantizer 初期テーブルデータ生成スクリプト
# $Id$
#================================================================================

puts(<<EOD)
DEPTH = 512;
WIDTH = 16;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
EOD

#--------------------------------------------------------------------------------
# 000xxxxxx [ 64] Table (RL pair index --> XY index)
#
ZIGZAG_SCAN = [
[[ 0,  1,  5,  6, 14, 15, 27, 28 ],
[  2,  4,  7, 13, 16, 26, 29, 42 ],
[  3,  8, 12, 17, 25, 30, 41, 43 ],
[  9, 11, 18, 24, 31, 40, 44, 53 ],
[ 10, 19, 23, 32, 39, 45, 52, 54 ],
[ 20, 22, 33, 38, 46, 51, 55, 60 ],
[ 21, 34, 37, 47, 50, 56, 59, 61 ],
[ 35, 36, 48, 49, 57, 58, 62, 63 ]].flatten,
[[ 0,  4,  6, 20, 22, 36, 38, 52 ],
[  1,  5,  7, 21, 23, 37, 39, 53 ],
[  2,  8, 19, 24, 34, 40, 50, 54 ],
[  3,  9, 18, 25, 35, 41, 51, 55 ],
[ 10, 17, 26, 30, 42, 46, 56, 60 ],
[ 11, 16, 27, 31, 43, 47, 57, 61 ],
[ 12, 15, 28, 32, 44, 48, 58, 62 ],
[ 13, 14, 29, 33, 45, 49, 59, 63 ]].flatten
]

64.times {|n|
	puts("%03X : %016b;" % [0x000 + n, ZIGZAG_SCAN[0].index(n)])
}

#--------------------------------------------------------------------------------
# 001xxxxxx [ 64] Unused
#
64.times {|n|
	puts("%03X : %016b;" % [0x040 + n, 0])
}

#--------------------------------------------------------------------------------
# 0100xxxxx [ 32] Quant scale [Type=0] (Upper-byte:pos, Lower-byte:neg)
# 0101xxxxx [ 32] Quant scale [Type=1] (Upper-byte:pos, Lower-byte:neg)
#
QUANT_SCALE = [
[0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62],
[0,1,2,3,4,5,6,7,8,10,12,14,16,18,20,22,24,28,32,36,40,44,48,52,56,64,72,80,88,96,104,112]
]

2.times {|t| 32.times {|n|
	qs = QUANT_SCALE[t][n]
	puts("%03X : %08b%08b;" % [[0x080, 0x0a0][t] + n, qs, (-qs) & 0xff])
}}

#--------------------------------------------------------------------------------
# 011xxxxxx [ 64] Unused
#
64.times {|n|
	puts("%03X : %016b;" % [0x0c0 + n, 0])
}

#--------------------------------------------------------------------------------
# 100xxxxxx [ 64] Standard qmat for nonintra
#
64.times {|n|
	puts("%03X : %016b;" % [0x100 + n, 16])
}

#--------------------------------------------------------------------------------
# 101xxxxxx [ 64] Standard qmat for intra
#
DEF_INTRA_QMAT = [
[256, 16, 19, 22, 26, 27, 29, 34 ],
[ 16, 16, 22, 24, 27, 29, 34, 37 ],
[ 19, 22, 26, 27, 29, 34, 34, 38 ],
[ 22, 22, 26, 27, 29, 34, 37, 40 ],
[ 22, 26, 27, 29, 32, 35, 40, 48 ],
[ 26, 27, 29, 32, 35, 40, 48, 58 ],
[ 26, 27, 29, 34, 38, 46, 56, 69 ],
[ 27, 29, 35, 38, 46, 56, 69, 83 ]
].flatten

64.times {|n|
	puts("%03X : %016b;" % [0x140 + n, DEF_INTRA_QMAT[ZIGZAG_SCAN[0].index(n)]])
}

#--------------------------------------------------------------------------------
# 110xxxxxx [ 64] Custom qmat for nonintra
#
64.times {|n|
	puts("%03X : %016b;" % [0x180 + n, 0])
}

#--------------------------------------------------------------------------------
# 111xxxxxx [ 64] Custom qmat for intra
#
64.times {|n|
	puts("%03X : %016b;" % [0x1c0 + n, n == 0 ? 256 : 0])
}

puts("END;")

