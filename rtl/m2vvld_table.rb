#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
#================================================================================
# MPEG2 Video VLD テーブル生成スクリプト
# $Id$
#================================================================================

require 'optparse'

if(defined?(Encoding))
	# for ruby >=1.9
	Encoding.default_external = 'utf-8'
end

$syms = nil

OptionParser.new {|opt|
	opt.on('-s SYMBOLS', Integer) {|v| $syms = v }
	opt.on('-e SEED', Integer) {|v| srand(v) }
	opt.parse!(ARGV)
}

if(!$syms)
	# 通常のテーブル生成

	$data = Array.new(2048) { nil }
	$ind = Array.new($data.size / 16) { nil }
	$tbl = {}
	# nil:空き, 4:4bit用root予約, 6:6bit用root予約, シンボル:使用済み

	# root用予約領域を作成
	4.times {|n|
		$ind[n*4] = 4
		4.times {|m| $ind[(n+4)*4+m] = 6 }
	}

	# テーブル生成メソッド
	def table(name, comb, err, contents, head = nil)
		w = comb[0]

		# テーブルの場所を予約
		this = nil
		$ind.each_index {|i|
			next if w == 6 and (i % 4) != 0
			next if ($ind[i] or !head) and (head or w != $ind[i])
			this = i
			break
		}
		abort "insufficient table space" if !this
		name2 = head ? "_auto_#{name}#{head}".intern : name
		(w == 4 ? 1 : 4).times {|n| $ind[this+n] = name2 }
		$tbl[name2] = w
		head = "" if !head

		head2 = head.gsub('_', '')
		(2**w).times {|n|
			cc = "%0#{comb[0]}b" % n
			code = head2 + cc
			v = [err, 0, code]
			contents.each {|c,d|
				if(code =~ /^#{c}([01]*)$/)
					# p [comb.size,this,n,d,c]
					v = [d, w - $1.length, c]
					break
				elsif(c =~ /^#{code}([01]+)$/)
					v = [table(name, comb[1..-1], err, contents, head + "_#{cc}"), w, code]
					break
				end
			}
			n = (n >> 2) | ((n & 3) << 4) if w == 6
			$data[this*16+n] = v
		}
		name2
	end

	# 出力
	def output()
		puts(<<EOD)
DEPTH = #{$data.size};
WIDTH = 18;
ADDRESS_RADIX = HEX;
DATA_RADIX = BIN;
CONTENT
BEGIN
EOD
		$data.each_index {|i| v = $data[i]
			if(!v)
				puts("%03X : %018b;" % [i, 0])
				next
			end
			d, w, c = v
			if(d.is_a?(Symbol))
				puts("%03X : 0%03b000000%b%07b;" % [i, w, $tbl[d] == 6 ? 1 : 0, $ind.index(d)])
			else
				puts("%03X : 1%03b%014b;" % [i, w, d])
			end
		}
		puts("END;")

		$ind.each_index {|i|
			STDERR.print("0x%02x0:" % i) if (i & 3) == 0
			STDERR.print(" %-24s" % ($ind[i-1] == $ind[i] ? "<--" : $ind[i] ? $ind[i].to_s : "(empty)"))
			STDERR.puts("") if (i & 3) == 3
		}
	end
else
	$ind = {4 => 0, 6 => 4}
	$tbl = []

	# テストベンチ用データ生成メソッド
	def table(name, comb, err, contents)
		contents.each {|c,v|
			c2 = []
			l = 0
			comb.each {|w|
				c2 << c[l, w] if c.length > l
				l += w
			}
			$tbl << [$ind[comb[0]], c2.join("_"), v]
		}
		$ind[comb[0]] += 1
	end

	# 出力
	def output()
		bits = ""
		$syms.times {
			c = $tbl[rand * $tbl.size]
			bits += c[1].gsub('_', '')
			if(bits.size >= 32)
				STDOUT.puts("%08x" % eval("0b#{bits[0,32]}"))
				bits = bits[32..-1]
			end
			STDERR.puts("%1d %04x # %s" % [c[0], c[2], c[1]])
		}

		bits += "0"*32
		STDOUT.puts("%08x" % eval("0b#{bits[0,32]}"))
	end
end

# B1: Macroblock addressing {{{1
table :B1, [4, 4, 4], 128, [
	[ "00000000",    128 ],	# TODO:slice end
		# end (and 15 more 0 bits should follow)
	[ "00000001000", 64+33],# TODO:escape
	[ "00000011000", 33 ],
	[ "00000011001", 32 ],
	[ "00000011010", 31 ],
	[ "00000011011", 30 ],
	[ "00000011100", 29 ],
	[ "00000011101", 28 ],
	[ "00000011110", 27 ],
	[ "00000011111", 26 ],
	[ "00000111",    14 ],
	[ "00000110",    15 ],
	[ "0000010111",  16 ],
	[ "0000010110",  17 ],
	[ "0000010101",  18 ],
	[ "0000010100",  19 ],
	[ "0000010011",  20 ],
	[ "0000010010",  21 ],
	[ "00000100011", 22 ],
	[ "00000100010", 23 ],
	[ "00000100001", 24 ],
	[ "00000100000", 25 ],
	[ "00001000",    13 ],
	[ "00001001",    12 ],
	[ "00001010",    11 ],
	[ "00001011",    10 ],
	[ "0000110",     9  ],
	[ "0000111",     8  ],
	[ "00010",       7  ],
	[ "00011",       6  ],
	[ "0010",        5  ],
	[ "0011",        4  ],
	[ "010",         3  ],
	[ "011",         2  ],
	[ "1",           1  ],	# TODO:inc
]	# }}}1

if(false)
# B2: MB type for I pictures {{{1
table :B2, [4], 0b0000_0000, [
	        # QFPI
	[ "01", 0b1001_0000 ],
	[ "1",  0b0001_0000 ],
]	# }}}1
end

# B3: MB type for P pictures {{{1
table :B3, [6], 0b0000_0000, [
	            # QFPI
	[ "000001", 0b1001_0000 ],
	[ "00001",  0b1010_0000 ],
	[ "00010",  0b1110_0000 ],
	[ "00011",  0b0001_0000 ],
	[ "001",    0b0100_0000 ],
	[ "01",     0b0010_0000 ],
	[ "1",      0b0110_0000 ],
]	# }}}1

# B9: Coded Block Pattern {{{1
table :B9, [6, 4], 64, [
	[ "000000001",  0 ],
	[ "000000010", 39 ],
	[ "000000011", 27 ],
	[ "000000100", 59 ],
	[ "000000101", 55 ],
	[ "000000110", 47 ],
	[ "000000111", 31 ],
	[ "00000100",  58 ],
	[ "00000101",  54 ],
	[ "00000110",  46 ],
	[ "00000111",  30 ],
	[ "00001000",  57 ],
	[ "00001001",  53 ],
	[ "00001010",  45 ],
	[ "00001011",  29 ],
	[ "00001100",  38 ],
	[ "00001101",  26 ],
	[ "00001110",  37 ],
	[ "00001111",  25 ],
	[ "00010000",  43 ],
	[ "00010001",  23 ],
	[ "00010010",  51 ],
	[ "00010011",  15 ],
	[ "00010100",  42 ],
	[ "00010101",  22 ],
	[ "00010110",  50 ],
	[ "00010111",  14 ],
	[ "00011000",  41 ],
	[ "00011001",  21 ],
	[ "00011010",  49 ],
	[ "00011011",  13 ],
	[ "00011100",  35 ],
	[ "00011101",  19 ],
	[ "00011110",  11 ],
	[ "00011111",   7 ],
	[ "0010000",   34 ],
	[ "0010001",   18 ],
	[ "0010010",   10 ],
	[ "0010011",    6 ],
	[ "0010100",   33 ],
	[ "0010101",   17 ],
	[ "0010110",    9 ],
	[ "0010111",    5 ],
	[ "001100",    63 ],
	[ "001101",     3 ],
	[ "001110",    36 ],
	[ "001111",    24 ],
	[ "01000",     62 ],
	[ "01001",      2 ],
	[ "01010",     61 ],
	[ "01011",      1 ],
	[ "01100",     56 ],
	[ "01101",     52 ],
	[ "01110",     44 ],
	[ "01111",     28 ],
	[ "10000",     40 ],
	[ "10001",     20 ],
	[ "10010",     48 ],
	[ "10011",     12 ],
	[ "1010",      32 ],
	[ "1011",      16 ],
	[ "1100",       8 ],
	[ "1101",       4 ],
	[ "111",       60 ],
]	# }}}1

# B10: Motion Code {{{1
table :B10, [4, 4, 4], 128, [
					# sign code-1
	[ "00000011000", (0<<4)+(15) ],
	[ "00000011001", (1<<4)+(15) ],
	[ "00000011010", (0<<4)+(14) ],
	[ "00000011011", (1<<4)+(14) ],
	[ "00000011100", (0<<4)+(13) ],
	[ "00000011101", (1<<4)+(13) ],
	[ "00000011110", (0<<4)+(12) ],
	[ "00000011111", (1<<4)+(12) ],
	[ "00000100000", (0<<4)+(11) ],
	[ "00000100001", (1<<4)+(11) ],
	[ "00000100010", (0<<4)+(10) ],
	[ "00000100011", (1<<4)+(10) ],
	[ "0000010010",  (0<<4)+( 9) ],
	[ "0000010011",  (1<<4)+( 9) ],
	[ "0000010100",  (0<<4)+( 8) ],
	[ "0000010101",  (1<<4)+( 8) ],
	[ "0000010110",  (0<<4)+( 7) ],
	[ "0000010111",  (1<<4)+( 7) ],
	[ "00000110",    (0<<4)+( 6) ],
	[ "00000111",    (1<<4)+( 6) ],
	[ "00001000",    (0<<4)+( 5) ],
	[ "00001001",    (1<<4)+( 5) ],
	[ "00001010",    (0<<4)+( 4) ],
	[ "00001011",    (1<<4)+( 4) ],
	[ "0000110",     (0<<4)+( 3) ],
	[ "0000111",     (1<<4)+( 3) ],
	[ "00010",       (0<<4)+( 2) ],
	[ "00011",       (1<<4)+( 2) ],
	[ "0010",        (0<<4)+( 1) ],
	[ "0011",        (1<<4)+( 1) ],
	[ "010",         (0<<4)+( 0) ],
	[ "011",         (1<<4)+( 0) ],
	[ "1",           (1<<5)+( 0) ],	# code=zero
]	# }}}1

# B12: dct_dc_size_luma {{{1
table :B12, [4, 6], 16, [
	[ "00",        1 ],
	[ "01",        2 ],
	[ "100",       0 ],
	[ "101",       3 ],
	[ "110",       4 ],
	[ "1110",      5 ],
	[ "11110",     6 ],
	[ "111110",    7 ],
	[ "1111110",   8 ],	# ISO11172-2 はここまで
	[ "11111110",  9 ],
	[ "111111110", 10 ],
	[ "111111111", 11 ],	# ISO13818-2 はここまで
]	# }}}1

# B13: dct_dc_size_chroma {{{1
table :B13, [4, 6], 16, [
	[ "00",         0 ],
	[ "01",         1 ],
	[ "10",         2 ],
	[ "110",        3 ],
	[ "1110",       4 ],
	[ "11110",      5 ],
	[ "111110",     6 ],
	[ "1111110",    7 ],
	[ "11111110",   8 ],		# ISO11172-2 はここまで
	[ "111111110",  9 ],
	[ "1111111110", 10 ],
	[ "1111111111", 11 ],	# ISO13818-2 はここまで
]	# }}}1

# B14: DCT coeffs (zero) {{{1
table :B14, [6, 6, 4], (1 << 12), [
	[ "0000000000010000", ((1<<6)+18) ],
	[ "0000000000010001", ((1<<6)+17) ],
	[ "0000000000010010", ((1<<6)+16) ],
	[ "0000000000010011", ((1<<6)+15) ],
	[ "0000000000010100", ((6<<6)+3) ],
	[ "0000000000010101", ((16<<6)+2) ],
	[ "0000000000010110", ((15<<6)+2) ],
	[ "0000000000010111", ((14<<6)+2) ],
	[ "0000000000011000", ((13<<6)+2) ],
	[ "0000000000011001", ((12<<6)+2) ],
	[ "0000000000011010", ((11<<6)+2) ],
	[ "0000000000011011", ((31<<6)+1) ],
	[ "0000000000011100", ((30<<6)+1) ],
	[ "0000000000011101", ((29<<6)+1) ],
	[ "0000000000011110", ((28<<6)+1) ],
	[ "0000000000011111", ((27<<6)+1) ],
	[ "000000000010000",  ((0<<6)+40) ],
	[ "000000000010001",  ((0<<6)+39) ],
	[ "000000000010010",  ((0<<6)+38) ],
	[ "000000000010011",  ((0<<6)+37) ],
	[ "000000000010100",  ((0<<6)+36) ],
	[ "000000000010101",  ((0<<6)+35) ],
	[ "000000000010110",  ((0<<6)+34) ],
	[ "000000000010111",  ((0<<6)+33) ],
	[ "000000000011000",  ((0<<6)+32) ],
	[ "000000000011001",  ((1<<6)+14) ],
	[ "000000000011010",  ((1<<6)+13) ],
	[ "000000000011011",  ((1<<6)+12) ],
	[ "000000000011100",  ((1<<6)+11) ],
	[ "000000000011101",  ((1<<6)+10) ],
	[ "000000000011110",  ((1<<6)+9) ],
	[ "000000000011111",  ((1<<6)+8) ],
	[ "00000000010000",   ((0<<6)+31) ],
	[ "00000000010001",   ((0<<6)+30) ],
	[ "00000000010010",   ((0<<6)+29) ],
	[ "00000000010011",   ((0<<6)+28) ],
	[ "00000000010100",   ((0<<6)+27) ],
	[ "00000000010101",   ((0<<6)+26) ],
	[ "00000000010110",   ((0<<6)+25) ],
	[ "00000000010111",   ((0<<6)+24) ],
	[ "00000000011000",   ((0<<6)+23) ],
	[ "00000000011001",   ((0<<6)+22) ],
	[ "00000000011010",   ((0<<6)+21) ],
	[ "00000000011011",   ((0<<6)+20) ],
	[ "00000000011100",   ((0<<6)+19) ],
	[ "00000000011101",   ((0<<6)+18) ],
	[ "00000000011110",   ((0<<6)+17) ],
	[ "00000000011111",   ((0<<6)+16) ],
	[ "0000000010000",    ((10<<6)+2) ],
	[ "0000000010001",    ((9<<6)+2) ],
	[ "0000000010010",    ((5<<6)+3) ],
	[ "0000000010011",    ((3<<6)+4) ],
	[ "0000000010100",    ((2<<6)+5) ],
	[ "0000000010101",    ((1<<6)+7) ],
	[ "0000000010110",    ((1<<6)+6) ],
	[ "0000000010111",    ((0<<6)+15) ],
	[ "0000000011000",    ((0<<6)+14) ],
	[ "0000000011001",    ((0<<6)+13) ],
	[ "0000000011010",    ((0<<6)+12) ],
	[ "0000000011011",    ((26<<6)+1) ],
	[ "0000000011100",    ((25<<6)+1) ],
	[ "0000000011101",    ((24<<6)+1) ],
	[ "0000000011110",    ((23<<6)+1) ],
	[ "0000000011111",    ((22<<6)+1) ],
	[ "000000010000",     ((0<<6)+11) ],
	[ "000000010001",     ((8<<6)+2) ],
	[ "000000010010",     ((4<<6)+3) ],
	[ "000000010011",     ((0<<6)+10) ],
	[ "000000010100",     ((2<<6)+4) ],
	[ "000000010101",     ((7<<6)+2) ],
	[ "000000010110",     ((21<<6)+1) ],
	[ "000000010111",     ((20<<6)+1) ],
	[ "000000011000",     ((0<<6)+9) ],
	[ "000000011001",     ((19<<6)+1) ],
	[ "000000011010",     ((18<<6)+1) ],
	[ "000000011011",     ((1<<6)+5) ],
	[ "000000011100",     ((3<<6)+3) ],
	[ "000000011101",     ((0<<6)+8) ],
	[ "000000011110",     ((6<<6)+2) ],
	[ "000000011111",     ((17<<6)+1) ],
	[ "0000001000",       ((16<<6)+1) ],
	[ "0000001001",       ((5<<6)+2) ],
	[ "0000001010",       ((0<<6)+7) ],
	[ "0000001011",       ((2<<6)+3) ],
	[ "0000001100",       ((1<<6)+4) ],
	[ "0000001101",       ((15<<6)+1) ],
	[ "0000001110",       ((14<<6)+1) ],
	[ "0000001111",       ((4<<6)+2) ],
	[ "000001",           (1<<11) ],	# escape
	[ "0000100",          ((2<<6)+2) ],
	[ "0000101",          ((9<<6)+1) ],
	[ "0000110",          ((0<<6)+4) ],
	[ "0000111",          ((8<<6)+1) ],
	[ "000100",           ((7<<6)+1) ],
	[ "000101",           ((6<<6)+1) ],
	[ "000110",           ((1<<6)+2) ],
	[ "000111",           ((5<<6)+1) ],
	[ "00100000",         ((13<<6)+1) ],
	[ "00100001",         ((0<<6)+6) ],
	[ "00100010",         ((12<<6)+1) ],
	[ "00100011",         ((11<<6)+1) ],
	[ "00100100",         ((3<<6)+2) ],
	[ "00100101",         ((1<<6)+3) ],
	[ "00100110",         ((0<<6)+5) ],
	[ "00100111",         ((10<<6)+1) ],
	[ "00101",            ((0<<6)+3) ],
	[ "00110",            ((4<<6)+1) ],
	[ "00111",            ((3<<6)+1) ],
	[ "0100",             ((0<<6)+2) ],
	[ "0101",             ((2<<6)+1) ],
	[ "011",              ((1<<6)+1) ],
	[ "10",               (1<<12) ],	# end
	[ "11",               ((0<<6)+1) ],
]	# }}}1

# B15: DCT coeffs (one) {{{1
table :B15, [6, 4, 6], (1 << 12), [
	[ "0000000000010000", ((1<<6)+18) ],
	[ "0000000000010001", ((1<<6)+17) ],
	[ "0000000000010010", ((1<<6)+16) ],
	[ "0000000000010011", ((1<<6)+15) ],
	[ "0000000000010100", ((6<<6)+3) ],
	[ "0000000000010101", ((16<<6)+2) ],
	[ "0000000000010110", ((15<<6)+2) ],
	[ "0000000000010111", ((14<<6)+2) ],
	[ "0000000000011000", ((13<<6)+2) ],
	[ "0000000000011001", ((12<<6)+2) ],
	[ "0000000000011010", ((11<<6)+2) ],
	[ "0000000000011011", ((31<<6)+1) ],
	[ "0000000000011100", ((30<<6)+1) ],
	[ "0000000000011101", ((29<<6)+1) ],
	[ "0000000000011110", ((28<<6)+1) ],
	[ "0000000000011111", ((27<<6)+1) ],
	[ "000000000010000",  ((0<<6)+40) ],
	[ "000000000010001",  ((0<<6)+39) ],
	[ "000000000010010",  ((0<<6)+38) ],
	[ "000000000010011",  ((0<<6)+37) ],
	[ "000000000010100",  ((0<<6)+36) ],
	[ "000000000010101",  ((0<<6)+35) ],
	[ "000000000010110",  ((0<<6)+34) ],
	[ "000000000010111",  ((0<<6)+33) ],
	[ "000000000011000",  ((0<<6)+32) ],
	[ "000000000011001",  ((1<<6)+14) ],
	[ "000000000011010",  ((1<<6)+13) ],
	[ "000000000011011",  ((1<<6)+12) ],
	[ "000000000011100",  ((1<<6)+11) ],
	[ "000000000011101",  ((1<<6)+10) ],
	[ "000000000011110",  ((1<<6)+9) ],
	[ "000000000011111",  ((1<<6)+8) ],
	[ "00000000010000",   ((0<<6)+31) ],
	[ "00000000010001",   ((0<<6)+30) ],
	[ "00000000010010",   ((0<<6)+29) ],
	[ "00000000010011",   ((0<<6)+28) ],
	[ "00000000010100",   ((0<<6)+27) ],
	[ "00000000010101",   ((0<<6)+26) ],
	[ "00000000010110",   ((0<<6)+25) ],
	[ "00000000010111",   ((0<<6)+24) ],
	[ "00000000011000",   ((0<<6)+23) ],
	[ "00000000011001",   ((0<<6)+22) ],
	[ "00000000011010",   ((0<<6)+21) ],
	[ "00000000011011",   ((0<<6)+20) ],
	[ "00000000011100",   ((0<<6)+19) ],
	[ "00000000011101",   ((0<<6)+18) ],
	[ "00000000011110",   ((0<<6)+17) ],
	[ "00000000011111",   ((0<<6)+16) ],
	[ "0000000010000",    ((10<<6)+2) ],
	[ "0000000010001",    ((9<<6)+2) ],
	[ "0000000010010",    ((5<<6)+3) ],
	[ "0000000010011",    ((3<<6)+4) ],
	[ "0000000010100",    ((2<<6)+5) ],
	[ "0000000010101",    ((1<<6)+7) ],
	[ "0000000010110",    ((1<<6)+6) ],
	[ "0000000011011",    ((26<<6)+1) ],
	[ "0000000011100",    ((25<<6)+1) ],
	[ "0000000011101",    ((24<<6)+1) ],
	[ "0000000011110",    ((23<<6)+1) ],
	[ "0000000011111",    ((22<<6)+1) ],
	[ "000000010001",     ((8<<6)+2) ],
	[ "000000010010",     ((4<<6)+3) ],
	[ "000000010101",     ((7<<6)+2) ],
	[ "000000010110",     ((21<<6)+1) ],
	[ "000000010111",     ((20<<6)+1) ],
	[ "000000011001",     ((19<<6)+1) ],
	[ "000000011010",     ((18<<6)+1) ],
	[ "000000011100",     ((3<<6)+3) ],
	[ "000000011110",     ((6<<6)+2) ],
	[ "000000011111",     ((17<<6)+1) ],
	[ "000000100",        ((5<<6)+2) ],
	[ "000000101",        ((14<<6)+1) ],
	[ "0000001100",       ((2<<6)+4) ],
	[ "0000001101",       ((16<<6)+1) ],
	[ "000000111",        ((15<<6)+1) ],
	[ "000001",           (1<<11) ],	# escape
	[ "0000100",          ((7<<6)+1) ],
	[ "0000101",          ((8<<6)+1) ],
	[ "0000110",          ((6<<6)+1) ],
	[ "0000111",          ((2<<6)+2) ],
	[ "000100",           ((0<<6)+7) ],
	[ "000101",           ((0<<6)+6) ],
	[ "000110",           ((4<<6)+1) ],
	[ "000111",           ((5<<6)+1) ],
	[ "00100000",         ((1<<6)+5) ],
	[ "00100001",         ((11<<6)+1) ],
	[ "00100010",         ((0<<6)+11) ],
	[ "00100011",         ((0<<6)+10) ],
	[ "00100100",         ((13<<6)+1) ],
	[ "00100101",         ((12<<6)+1) ],
	[ "00100110",         ((3<<6)+2) ],
	[ "00100111",         ((1<<6)+4) ],
	[ "00101",            ((2<<6)+1) ],
	[ "00110",            ((1<<6)+2) ],
	[ "00111",            ((3<<6)+1) ],
	[ "010",              ((1<<6)+1) ],
	[ "0110",             (1<<12) ],	# end
	[ "0111",             ((0<<6)+3) ],
	[ "10",               ((0<<6)+1) ],
	[ "110",              ((0<<6)+2) ],
	[ "11100",            ((0<<6)+4) ],
	[ "11101",            ((0<<6)+5) ],
	[ "1111000",          ((9<<6)+1) ],
	[ "1111001",          ((1<<6)+3) ],
	[ "1111010",          ((10<<6)+1) ],
	[ "1111011",          ((0<<6)+8) ],
	[ "1111100",          ((0<<6)+9) ],
	[ "11111010",         ((0<<6)+12) ],
	[ "11111011",         ((0<<6)+13) ],
	[ "11111100",         ((2<<6)+3) ],
	[ "11111101",         ((4<<6)+2) ],
	[ "11111110",         ((0<<6)+14) ],
	[ "11111111",         ((0<<6)+15) ],
]	# }}}1

output

# vim: foldmethod=marker
