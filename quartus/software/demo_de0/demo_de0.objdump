
demo_de0.elf:     file format elf32-littlenios2
demo_de0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x004001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00400000 paddr 0x00400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00400020 paddr 0x00400020 align 2**12
         filesz 0x00001ac0 memsz 0x00001ac0 flags r-x
    LOAD off    0x00003000 vaddr 0x00500000 paddr 0x00500000 align 2**12
         filesz 0x00100000 memsz 0x00100000 flags r--
    LOAD off    0x00103000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00400000  00400000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00400020  00400020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .testdata     00100000  00500000  00500000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .text         00001880  004001bc  004001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000000a4  00401a3c  00401a3c  00002a3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00000020  01000000  01000000  00103000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          0000015c  01000020  01000020  00103020  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000026  00000000  00000000  00103020  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a8  00000000  00000000  00103048  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000661  00000000  00000000  001032f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002e7c  00000000  00000000  00103951  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001361  00000000  00000000  001067cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000032c1  00000000  00000000  00107b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000594  00000000  00000000  0010adf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000cc6  00000000  00000000  0010b384  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000136b  00000000  00000000  0010c04a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0010d3b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000240  00000000  00000000  0010d3c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0010ec1b  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0010ec1e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0010ec2a  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0010ec2b  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0010ec2c  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0010ec30  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0010ec34  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  0010ec38  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  0010ec3c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  0010ec40  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0010ec44  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000029  00000000  00000000  0010ec50  2**0
                  CONTENTS, READONLY
 30 .jdi          00003acf  00000000  00000000  0010ec79  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00400000 l    d  .entry	00000000 .entry
00400020 l    d  .exceptions	00000000 .exceptions
00500000 l    d  .testdata	00000000 .testdata
004001bc l    d  .text	00000000 .text
00401a3c l    d  .rodata	00000000 .rodata
01000000 l    d  .rwdata	00000000 .rwdata
01000020 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
004001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 demo_de0.c
004000ec l     F .exceptions	00000014 frame_rate_handler
00400100 l     F .exceptions	00000060 m2vdec_irq_handler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 diskio.c
01000024 l     O .bss	00000004 Timer1
01000028 l     O .bss	00000004 Timer2
01000008 l     O .rwdata	00000001 Stat
0100004c l     O .bss	00000018 a.1590
004003a8 l     F .text	0000002c xchg_spi
004003d4 l     F .text	00000018 deselect
004003ec l     F .text	00000070 select
0040045c l     F .text	00000124 send_cmd
0100002c l     O .bss	00000001 CardType
00000000 l    df *ABS*	00000000 pff.c
00400860 l     F .text	0000004c clust2sect
01000030 l     O .bss	00000004 FatFs
004008ac l     F .text	0000008c dir_rewind
00400938 l     F .text	00000100 check_fs
00400a38 l     F .text	000000d8 get_fat
00000000 l    df *ABS*	00000000 lib2-divmod.c
0040129c l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00401978 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 m2vdd_hx8347a.c
00401a3c l     O .rodata	000000a2 codes.1394
00000000 l    df *ABS*	00000000 m2vdec.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00401550 g     F .text	0000002c alt_main
0100007c g     O .bss	00000100 alt_irq
00401858 g     F .text	00000020 altera_avalon_fifo_write_almostfull
00400580 g     F .text	00000110 disk_readp
004019b4 g     F .text	00000028 m2vdd_hx8347a_write_reg
004019dc g     F .text	00000054 m2vdd_hx8347a_init
0100001c g     O .rwdata	00000004 m2vdec_0
004018b4 g     F .text	00000094 altera_avalon_fifo_init
004017ec g     F .text	0000004c altera_avalon_fifo_write_fifo
01000000 g     O .rwdata	00000004 test_1mb_m2v
00401a30 g     F .text	00000004 m2vdec_init
00400000 g     F .entry	0000000c __reset
004016b0 g     F .text	00000008 altera_avalon_fifo_read_backpressure
0100003c g     O .bss	00000004 alt_argv
01008000 g       *ABS*	00000000 _gp
00401898 g     F .text	0000001c altera_avalon_fifo_clear_event
00400690 g     F .text	000001d0 disk_initialize
004013d8 g     F .text	00000008 __udivsi3
004014b0 g     F .text	000000a0 alt_irq_register
0100017c g       *ABS*	00000000 __bss_end
004015b0 g     F .text	000000ac alt_tick
01000004 g     O .rwdata	00000004 pd1m_1mb_bin_len
01000000 g       *ABS*	00000000 __alt_mem_ram_0
0040157c g     F .text	00000034 alt_alarm_stop
01000034 g     O .bss	00000004 alt_irq_active
00400160 g     F .exceptions	0000005c alt_irq_handler
00401878 g     F .text	00000020 altera_avalon_fifo_write_ienable
004016d4 g     F .text	00000008 altera_avalon_fifo_read_almostempty
00500000 g     O .testdata	00100000 pd1m_1mb_bin
004013e0 g     F .text	00000008 __umodsi3
0040038c g     F .text	0000001c disk_inittimer
0100017c g       *ABS*	00000000 end
004016c8 g     F .text	0000000c altera_avalon_fifo_read_event
01002000 g       *ABS*	00000000 __alt_stack_pointer
00401948 g     F .text	00000030 alt_avalon_timer_sc_init
004016fc g     F .text	0000003c altera_avalon_fifo_read_fifo
00400344 g     F .text	00000048 disk_timerproc
004001bc g     F .text	00000038 _start
01000044 g     O .bss	00000004 _alt_tick_rate
01000020 g     O .bss	00000004 fr_flags
01000048 g     O .bss	00000004 _alt_nticks
0040165c g     F .text	00000034 alt_sys_init
004013e8 g     F .text	00000038 __mulsi3
0100017c g       *ABS*	00000000 __alt_stack_base
004016f0 g     F .text	0000000c altera_avalon_fifo_read_status
004016b8 g     F .text	00000008 altera_avalon_fifo_read_other_info
01000020 g       *ABS*	00000000 __bss_start
004001f4 g     F .text	00000150 main
01000040 g     O .bss	00000004 alt_envp
004016c0 g     F .text	00000008 altera_avalon_fifo_read_level
00401318 g     F .text	00000060 __divsi3
00400b10 g     F .text	00000188 pf_read
01000064 g     O .bss	00000018 al_frate
00401690 g     F .text	00000020 alt_irq_init
01000038 g     O .bss	00000004 alt_argc
00400c98 g     F .text	00000358 pf_open
00400020 g       .exceptions	00000000 alt_irq_entry
01000018 g     O .rwdata	00000004 m2vdd_hx8347a_0
004017a0 g     F .text	0000004c altera_avalon_fifo_write_other_info
01000020 g       *ABS*	00000000 _edata
0100017c g       *ABS*	00000000 _end
00401a34 g     F .text	00000008 altera_nios2_qsys_irq_init
0040000c g       .entry	00000000 exit
00401378 g     F .text	00000060 __modsi3
004016e4 g     F .text	0000000c altera_avalon_fifo_read_ienable
01002000 g       *ABS*	00000000 __alt_data_end
00400020 g     F .exceptions	00000000 alt_exception
00400000 g       *ABS*	00000000 __alt_mem_rom_0
0040000c g       .entry	00000000 _exit
00401420 g     F .text	00000090 alt_alarm_start
004016dc g     F .text	00000008 altera_avalon_fifo_read_almostfull
00401738 g     F .text	00000068 altera_avalon_read_fifo
0100000c g     O .rwdata	00000004 alt_priority_mask
00401838 g     F .text	00000020 altera_avalon_fifo_write_almostempty
01000010 g     O .rwdata	00000008 alt_alarm_list
00400ff0 g     F .text	000002ac pf_mount



Disassembly of section .entry:

00400000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  400000:	00401034 	movhi	at,64
    ori r1, r1, %lo(_start)
  400004:	08406f14 	ori	at,at,444
    jmp r1
  400008:	0800683a 	jmp	at

0040000c <_exit>:
	...

Disassembly of section .exceptions:

00400020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  400020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  400024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  400028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  40002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  400030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  400034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  400038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  40003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  400040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  400044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  400048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  40004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  400050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  400054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  400058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  40005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  400060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  400064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  400068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  40006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  400070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  400074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  400078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  40007c:	10000326 	beq	r2,zero,40008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  400080:	20000226 	beq	r4,zero,40008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  400084:	04001600 	call	400160 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  400088:	00000306 	br	400098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  40008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  400090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  400094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  400098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  40009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  4000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  4000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  4000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  4000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  4000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  4000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  4000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  4000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  4000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  4000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  4000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  4000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  4000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  4000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  4000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  4000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  4000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  4000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  4000e8:	ef80083a 	eret

004000ec <frame_rate_handler>:
	}
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
  4000ec:	20c00017 	ldw	r3,0(r4)
#ifdef M2V_FLASH_BASE
	return 0;
#else
	return (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & (1 << 8)) ? 1000 : 33;
#endif
}
  4000f0:	0005883a 	mov	r2,zero
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
  4000f4:	18c00094 	ori	r3,r3,2
  4000f8:	20c00015 	stw	r3,0(r4)
#ifdef M2V_FLASH_BASE
	return 0;
#else
	return (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & (1 << 8)) ? 1000 : 33;
#endif
}
  4000fc:	f800283a 	ret

00400100 <m2vdec_irq_handler>:

	return 0;
}

static void m2vdec_irq_handler(void* context, alt_u32 id)
{
  400100:	00940004 	movi	r2,20480
  400104:	10800037 	ldwio	r2,0(r2)
  400108:	1080040c 	andi	r2,r2,16
  40010c:	10000426 	beq	r2,zero,400120 <m2vdec_irq_handler+0x20>
	if(IORD_M2VDEC_STATUS(M2VDEC_0_BASE) & M2VDEC_STATUS_IRQ_PIC_MSK)
	{
		//*((volatile int*)context) |= 1;
		*((volatile int*)context) |= 3;
  400110:	20800017 	ldw	r2,0(r4)
  400114:	108000d4 	ori	r2,r2,3
  400118:	20800015 	stw	r2,0(r4)
  40011c:	00000c06 	br	400150 <m2vdec_irq_handler+0x50>
	}
	else
	{
		alt_u32 vinfo = IORD_M2VDEC_VIDEO(M2VDEC_0_BASE);
  400120:	00940104 	movi	r2,20484
  400124:	10c00037 	ldwio	r3,0(r2)
		alt_u32 wd = ((vinfo & M2VDEC_VIDEO_WIDTH_MSK) >> M2VDEC_VIDEO_WIDTH_OFST) - 1;
		alt_u32 ht = ((vinfo & M2VDEC_VIDEO_HEIGHT_MSK) >> M2VDEC_VIDEO_HEIGHT_OFST) - 1;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_VIDEOWD_MSK | wd);
  400128:	01180004 	movi	r4,24576
  40012c:	188fffcc 	andi	r2,r3,16383
  400130:	10bfffc4 	addi	r2,r2,-1
  400134:	10880034 	orhi	r2,r2,8192
  400138:	20800035 	stwio	r2,0(r4)
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_VIDEOHT_MSK | ht);
  40013c:	1806913a 	slli	r3,r3,4
  400140:	1806d4ba 	srli	r3,r3,18
  400144:	18ffffc4 	addi	r3,r3,-1
  400148:	18c40034 	orhi	r3,r3,4096
  40014c:	20c00035 	stwio	r3,0(r4)
	}
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
  400150:	00c00604 	movi	r3,24
  400154:	00940004 	movi	r2,20480
  400158:	10c00035 	stwio	r3,0(r2)
}
  40015c:	f800283a 	ret

00400160 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  400160:	deffff04 	addi	sp,sp,-4
  400164:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  400168:	0009313a 	rdctl	r4,ipending
  40016c:	00c00044 	movi	r3,1
  400170:	000b883a 	mov	r5,zero
  400174:	01804034 	movhi	r6,256
  400178:	31801f04 	addi	r6,r6,124
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  40017c:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  400180:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  400184:	10000726 	beq	r2,zero,4001a4 <alt_irq_handler+0x44>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  400188:	31000117 	ldw	r4,4(r6)
  40018c:	30800017 	ldw	r2,0(r6)
  400190:	103ee83a 	callr	r2
  400194:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  400198:	10000526 	beq	r2,zero,4001b0 <alt_irq_handler+0x50>
  40019c:	1009883a 	mov	r4,r2
  4001a0:	003ff206 	br	40016c <alt_irq_handler+0xc>
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  4001a4:	29400044 	addi	r5,r5,1
  4001a8:	31800204 	addi	r6,r6,8
  4001ac:	003ff306 	br	40017c <alt_irq_handler+0x1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  4001b0:	dfc00017 	ldw	ra,0(sp)
  4001b4:	dec00104 	addi	sp,sp,4
  4001b8:	f800283a 	ret

Disassembly of section .text:

004001bc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  4001bc:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  4001c0:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  4001c4:	06804034 	movhi	gp,256
    ori gp, gp, %lo(_gp)
  4001c8:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  4001cc:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
  4001d0:	10800814 	ori	r2,r2,32

    movhi r3, %hi(__bss_end)
  4001d4:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
  4001d8:	18c05f14 	ori	r3,r3,380

    beq r2, r3, 1f
  4001dc:	10c00326 	beq	r2,r3,4001ec <_start+0x30>

0:
    stw zero, (r2)
  4001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  4001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4001e8:	10fffd36 	bltu	r2,r3,4001e0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  4001ec:	04015500 	call	401550 <alt_main>

004001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  4001f0:	003fff06 	br	4001f0 <alt_after_alt_main>

004001f4 <main>:
	while(alt_nticks() < end);*/
#endif
}

int main()
{ 
  4001f4:	defffd04 	addi	sp,sp,-12
	FATFS fs;
	FRESULT res;
	alt_u32 buf[512/4];

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E0);
  4001f8:	00c03804 	movi	r3,224
  4001fc:	008c0004 	movi	r2,12288
	while(alt_nticks() < end);*/
#endif
}

int main()
{ 
  400200:	dfc00215 	stw	ra,8(sp)
  400204:	dc400115 	stw	r17,4(sp)
  400208:	dc000015 	stw	r16,0(sp)
	FATFS fs;
	FRESULT res;
	alt_u32 buf[512/4];

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E0);
  40020c:	10c00035 	stwio	r3,0(r2)

	if((res = pf_open("test.m2v")) != FR_OK) while(1);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E2);
#endif

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_SRST_MSK);
  400210:	00c02004 	movi	r3,128
  400214:	00940004 	movi	r2,20480
  400218:	10c00035 	stwio	r3,0(r2)

	{
		// Clear display with black (0x0000)
		int pixels;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, 0x22 |
  40021c:	00d80004 	movi	r3,24576
  400220:	009000b4 	movhi	r2,16386
  400224:	10800884 	addi	r2,r2,34
  400228:	18800035 	stwio	r2,0(r3)
  40022c:	0009883a 	mov	r4,zero
  400230:	019000f4 	movhi	r6,16387
  400234:	01400c84 	movi	r5,50
		for(pixels = 0; pixels < 50; pixels++)
#else
		for(pixels = 0; pixels < 320*240; pixels++)
#endif
		{
    		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE,
  400238:	19800035 	stwio	r6,0(r3)
    			M2VDD_HX8347A_CONTROL_WRITE_MSK |
    			M2VDD_HX8347A_CONTROL_RESET_MSK |
    			M2VDD_HX8347A_CONTROL_RS_MSK);
    		while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 2);
  40023c:	18800037 	ldwio	r2,0(r3)
  400240:	1080008c 	andi	r2,r2,2
  400244:	103ffd1e 	bne	r2,zero,40023c <main+0x48>
		int pixels;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, 0x22 |
			M2VDD_HX8347A_CONTROL_WRITE_MSK |
			M2VDD_HX8347A_CONTROL_RESET_MSK);
#ifdef M2V_FLASH_BASE
		for(pixels = 0; pixels < 50; pixels++)
  400248:	21000044 	addi	r4,r4,1
  40024c:	217ffa1e 	bne	r4,r5,400238 <main+0x44>
    			M2VDD_HX8347A_CONTROL_RS_MSK);
    		while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 2);
		}
	}

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
  400250:	04540004 	movi	r17,20480
  400254:	88000035 	stwio	zero,0(r17)
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);
  400258:	040c0004 	movi	r16,12288
  40025c:	008038c4 	movi	r2,227
  400260:	80800035 	stwio	r2,0(r16)

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
  400264:	01000144 	movi	r4,5
  400268:	d1600804 	addi	r5,gp,-32736
  40026c:	01801034 	movhi	r6,64
  400270:	31804004 	addi	r6,r6,256
	}

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
  400274:	d0200815 	stw	zero,-32736(gp)
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
  400278:	04014b00 	call	4014b0 <alt_irq_register>
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
  40027c:	d0a00817 	ldw	r2,-32736(gp)
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
  400280:	01004034 	movhi	r4,256
  400284:	21001904 	addi	r4,r4,100
  400288:	000b883a 	mov	r5,zero
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
  40028c:	10800094 	ori	r2,r2,2
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
  400290:	01801034 	movhi	r6,64
  400294:	31803b04 	addi	r6,r6,236
  400298:	d1e00804 	addi	r7,gp,-32736
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
  40029c:	d0a00815 	stw	r2,-32736(gp)
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
  4002a0:	04014200 	call	401420 <alt_alarm_start>
  4002a4:	1000010e 	bge	r2,zero,4002ac <main+0xb8>
  4002a8:	003fff06 	br	4002a8 <main+0xb4>
	{
		while(1);
	}

	if(altera_avalon_fifo_init(FIFO_0_IN_CSR_BASE, 0, 4, FIFO_0_IN_FIFO_DEPTH - 4) != ALTERA_AVALON_FIFO_OK)
  4002ac:	01104004 	movi	r4,16640
  4002b0:	000b883a 	mov	r5,zero
  4002b4:	01800104 	movi	r6,4
  4002b8:	01c03f04 	movi	r7,252
  4002bc:	04018b40 	call	4018b4 <altera_avalon_fifo_init>
  4002c0:	10000126 	beq	r2,zero,4002c8 <main+0xd4>
  4002c4:	003fff06 	br	4002c4 <main+0xd0>
	{
		while(1);
	}

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x0000);
  4002c8:	80000035 	stwio	zero,0(r16)
  4002cc:	801b883a 	mov	r13,r16
  4002d0:	8819883a 	mov	r12,r17
  4002d4:	000b883a 	mov	r5,zero
  4002d8:	01001434 	movhi	r4,80
  4002dc:	02d04104 	movi	r11,16644
  4002e0:	02900004 	movi	r10,16384
  4002e4:	024000c4 	movi	r9,3
  4002e8:	02180004 	movi	r8,24576
  4002ec:	01e00034 	movhi	r7,32768
  4002f0:	01800804 	movi	r6,32
  4002f4:	00000c06 	br	400328 <main+0x134>
			p = buf;
		}//-*/
#endif
		while(IORD_ALTERA_AVALON_FIFO_STATUS(FIFO_0_IN_CSR_BASE) & ALTERA_AVALON_FIFO_STATUS_F_MSK)
		{
			if(fr_flags == 3)
  4002f8:	d0a00817 	ldw	r2,-32736(gp)
  4002fc:	12400a1e 	bne	r2,r9,400328 <main+0x134>
			{
				// Refresh display
				IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_START_MSK);
  400300:	41c00035 	stwio	r7,0(r8)
  400304:	00d80004 	movi	r3,24576
				while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 1);
  400308:	18800037 	ldwio	r2,0(r3)
  40030c:	1080004c 	andi	r2,r2,1
  400310:	103ffd1e 	bne	r2,zero,400308 <main+0x114>
					++stop;
				}
#endif

				fr_flags = 0;
				IOWR_32DIRECT(HEXDISP_0_BASE, 0, ++frames);
  400314:	29400044 	addi	r5,r5,1
  400318:	28bfffcc 	andi	r2,r5,65535
				{
					++stop;
				}
#endif

				fr_flags = 0;
  40031c:	d0200815 	stw	zero,-32736(gp)
				IOWR_32DIRECT(HEXDISP_0_BASE, 0, ++frames);
  400320:	68800035 	stwio	r2,0(r13)

				// Resume decoding
				IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_PAUSE_MSK);
  400324:	61800035 	stwio	r6,0(r12)
				while(1);
			}
			p = buf;
		}//-*/
#endif
		while(IORD_ALTERA_AVALON_FIFO_STATUS(FIFO_0_IN_CSR_BASE) & ALTERA_AVALON_FIFO_STATUS_F_MSK)
  400328:	58800037 	ldwio	r2,0(r11)
  40032c:	1080004c 	andi	r2,r2,1
  400330:	103ff11e 	bne	r2,zero,4002f8 <main+0x104>

				// Resume decoding
				IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_PAUSE_MSK);
			}
		}
		IOWR_ALTERA_AVALON_FIFO_DATA(FIFO_0_IN_BASE, *p++);
  400334:	20800017 	ldw	r2,0(r4)
  400338:	21000104 	addi	r4,r4,4
  40033c:	50800035 	stwio	r2,0(r10)
  400340:	003ff906 	br	400328 <main+0x134>

00400344 <disk_timerproc>:
alt_u32 disk_timerproc(void* context)
{
	WORD n;
	BYTE s;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
  400344:	d0e00917 	ldw	r3,-32732(gp)
		s &= ~STA_NODISK;
	else		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
	Stat = s;
	return 1;
}
  400348:	00800044 	movi	r2,1
{
	WORD n;
	BYTE s;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
	if (n) Timer1 = --n;
  40034c:	193fffc4 	addi	r4,r3,-1
  400350:	18ffffcc 	andi	r3,r3,65535
  400354:	213fffcc 	andi	r4,r4,65535
  400358:	18000126 	beq	r3,zero,400360 <disk_timerproc+0x1c>
  40035c:	d1200915 	stw	r4,-32732(gp)
	n = Timer2;
  400360:	d0e00a17 	ldw	r3,-32728(gp)
	if (n) Timer2 = --n;
  400364:	193fffc4 	addi	r4,r3,-1
  400368:	18ffffcc 	andi	r3,r3,65535
  40036c:	213fffcc 	andi	r4,r4,65535
  400370:	18000126 	beq	r3,zero,400378 <disk_timerproc+0x34>
  400374:	d1200a15 	stw	r4,-32728(gp)

	s = Stat;
  400378:	d0e00203 	ldbu	r3,-32760(gp)
	if (INS)	/* Card is in socket */
		s &= ~STA_NODISK;
  40037c:	013fff44 	movi	r4,-3
  400380:	1906703a 	and	r3,r3,r4
	else		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
	Stat = s;
  400384:	d0e00205 	stb	r3,-32760(gp)
	return 1;
}
  400388:	f800283a 	ret

0040038c <disk_inittimer>:

void disk_inittimer()
{
	static alt_alarm a;
	alt_alarm_start(&a, 1, disk_timerproc, NULL);
  40038c:	01004034 	movhi	r4,256
  400390:	21001304 	addi	r4,r4,76
  400394:	01400044 	movi	r5,1
  400398:	01801034 	movhi	r6,64
  40039c:	3180d104 	addi	r6,r6,836
  4003a0:	000f883a 	mov	r7,zero
  4003a4:	04014201 	jmpi	401420 <alt_alarm_start>

004003a8 <xchg_spi>:
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, dat);
  4003a8:	21003fcc 	andi	r4,r4,255
  4003ac:	008c4104 	movi	r2,12548
  4003b0:	11000035 	stwio	r4,0(r2)
  4003b4:	00cc4204 	movi	r3,12552
	while (!(
  4003b8:	18800037 	ldwio	r2,0(r3)
  4003bc:	1080200c 	andi	r2,r2,128
  4003c0:	103ffd26 	beq	r2,zero,4003b8 <xchg_spi+0x10>
			IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
			ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
	return IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  4003c4:	008c4004 	movi	r2,12544
  4003c8:	10800037 	ldwio	r2,0(r2)
}
  4003cc:	10803fcc 	andi	r2,r2,255
  4003d0:	f800283a 	ret

004003d4 <deselect>:

static
void deselect (void)
{
	// Negate SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 0);
  4003d4:	008c4504 	movi	r2,12564
  4003d8:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
  4003dc:	008c4304 	movi	r2,12556
  4003e0:	10000035 	stwio	zero,0(r2)
	xchg_spi(0xFF);
  4003e4:	01003fc4 	movi	r4,255
  4003e8:	04003a81 	jmpi	4003a8 <xchg_spi>

004003ec <select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
  4003ec:	defffe04 	addi	sp,sp,-8
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
  4003f0:	00c00044 	movi	r3,1
  4003f4:	008c4504 	movi	r2,12564
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
  4003f8:	dfc00115 	stw	ra,4(sp)
  4003fc:	dc000015 	stw	r16,0(sp)
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
  400400:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
  400404:	00c10004 	movi	r3,1024
  400408:	008c4304 	movi	r2,12556
  40040c:	10c00035 	stwio	r3,0(r2)
	xchg_spi(0xFF);
  400410:	01003fc4 	movi	r4,255
  400414:	04003a80 	call	4003a8 <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt;
  400418:	00807d04 	movi	r2,500
  40041c:	d0a00a15 	stw	r2,-32728(gp)
	do {
		d = xchg_spi(0xff);
  400420:	04003fc4 	movi	r16,255
  400424:	8009883a 	mov	r4,r16
  400428:	04003a80 	call	4003a8 <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
  40042c:	10803fcc 	andi	r2,r2,255
  400430:	14000526 	beq	r2,r16,400448 <select+0x5c>
  400434:	d0a00a17 	ldw	r2,-32728(gp)
  400438:	103ff91e 	bne	r2,zero,400420 <select+0x34>
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	xchg_spi(0xFF);
	if (wait_ready(500)) return 1;	/* OK */
	deselect();
  40043c:	04003d40 	call	4003d4 <deselect>
  400440:	0005883a 	mov	r2,zero
  400444:	00000106 	br	40044c <select+0x60>
	return 0;	/* Timeout */
  400448:	00800044 	movi	r2,1
}
  40044c:	dfc00117 	ldw	ra,4(sp)
  400450:	dc000017 	ldw	r16,0(sp)
  400454:	dec00204 	addi	sp,sp,8
  400458:	f800283a 	ret

0040045c <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
  40045c:	20803fcc 	andi	r2,r4,255
  400460:	1080201c 	xori	r2,r2,128
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
  400464:	defffc04 	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
  400468:	10bfe004 	addi	r2,r2,-128
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
  40046c:	dc800215 	stw	r18,8(sp)
  400470:	dc400115 	stw	r17,4(sp)
  400474:	dc000015 	stw	r16,0(sp)
  400478:	dfc00315 	stw	ra,12(sp)
  40047c:	2025883a 	mov	r18,r4
  400480:	2021883a 	mov	r16,r4
  400484:	2823883a 	mov	r17,r5
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
  400488:	10000a0e 	bge	r2,zero,4004b4 <send_cmd+0x58>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
  40048c:	01000dc4 	movi	r4,55
  400490:	000b883a 	mov	r5,zero
  400494:	040045c0 	call	40045c <send_cmd>
		if (res > 1) return res;
  400498:	10c03fcc 	andi	r3,r2,255
  40049c:	00800044 	movi	r2,1
  4004a0:	10c00236 	bltu	r2,r3,4004ac <send_cmd+0x50>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
  4004a4:	94001fcc 	andi	r16,r18,127
  4004a8:	00000206 	br	4004b4 <send_cmd+0x58>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
  4004ac:	1805883a 	mov	r2,r3
  4004b0:	00002d06 	br	400568 <send_cmd+0x10c>
	}

	/* Select card */
	deselect();
  4004b4:	04003d40 	call	4003d4 <deselect>
	if (!select()) return 0xFF;
  4004b8:	04003ec0 	call	4003ec <select>
  4004bc:	1000021e 	bne	r2,zero,4004c8 <send_cmd+0x6c>
  4004c0:	00803fc4 	movi	r2,255
  4004c4:	00002806 	br	400568 <send_cmd+0x10c>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
  4004c8:	81001014 	ori	r4,r16,64
  4004cc:	21003fcc 	andi	r4,r4,255
  4004d0:	04003a80 	call	4003a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
  4004d4:	8808d63a 	srli	r4,r17,24
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
  4004d8:	84003fcc 	andi	r16,r16,255
	deselect();
	if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
  4004dc:	04003a80 	call	4003a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
  4004e0:	8808d43a 	srli	r4,r17,16
  4004e4:	21003fcc 	andi	r4,r4,255
  4004e8:	04003a80 	call	4003a8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
  4004ec:	8808d23a 	srli	r4,r17,8
  4004f0:	21003fcc 	andi	r4,r4,255
  4004f4:	04003a80 	call	4003a8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
  4004f8:	89003fcc 	andi	r4,r17,255
  4004fc:	04003a80 	call	4003a8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
  400500:	80001526 	beq	r16,zero,400558 <send_cmd+0xfc>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
  400504:	00800204 	movi	r2,8
  400508:	80801526 	beq	r16,r2,400560 <send_cmd+0x104>
	xchg_spi(n);
  40050c:	01000044 	movi	r4,1
  400510:	04003a80 	call	4003a8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
  400514:	00800304 	movi	r2,12
  400518:	8080021e 	bne	r16,r2,400524 <send_cmd+0xc8>
  40051c:	01003fc4 	movi	r4,255
  400520:	04003a80 	call	4003a8 <xchg_spi>
  400524:	04000284 	movi	r16,10
	n = 10;								/* Wait for response (10 bytes max) */
	do
		res = xchg_spi(0xFF);
  400528:	01003fc4 	movi	r4,255
  40052c:	04003a80 	call	4003a8 <xchg_spi>
  400530:	1007883a 	mov	r3,r2
	while ((res & 0x80) && --n);
  400534:	18803fcc 	andi	r2,r3,255
  400538:	1080201c 	xori	r2,r2,128
  40053c:	843fffc4 	addi	r16,r16,-1
  400540:	10bfe004 	addi	r2,r2,-128
  400544:	81003fcc 	andi	r4,r16,255
  400548:	1000010e 	bge	r2,zero,400550 <send_cmd+0xf4>
  40054c:	203ff61e 	bne	r4,zero,400528 <send_cmd+0xcc>

	return res;							/* Return received response */
  400550:	18803fcc 	andi	r2,r3,255
  400554:	00000406 	br	400568 <send_cmd+0x10c>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xchg_spi(n);
  400558:	01002544 	movi	r4,149
  40055c:	003ff006 	br	400520 <send_cmd+0xc4>
  400560:	010021c4 	movi	r4,135
  400564:	003fee06 	br	400520 <send_cmd+0xc4>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;							/* Return received response */
}
  400568:	dfc00317 	ldw	ra,12(sp)
  40056c:	dc800217 	ldw	r18,8(sp)
  400570:	dc400117 	ldw	r17,4(sp)
  400574:	dc000017 	ldw	r16,0(sp)
  400578:	dec00404 	addi	sp,sp,16
  40057c:	f800283a 	ret

00400580 <disk_readp>:
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
  400580:	d0a00203 	ldbu	r2,-32760(gp)
	BYTE* Buffer,        /* Pointer to the read buffer */
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
  400584:	defffc04 	addi	sp,sp,-16
  400588:	dc800215 	stw	r18,8(sp)
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
  40058c:	1080004c 	andi	r2,r2,1
  400590:	1005003a 	cmpeq	r2,r2,zero
	BYTE* Buffer,        /* Pointer to the read buffer */
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
  400594:	dc400115 	stw	r17,4(sp)
  400598:	dfc00315 	stw	ra,12(sp)
  40059c:	dc000015 	stw	r16,0(sp)
  4005a0:	2025883a 	mov	r18,r4
  4005a4:	3823883a 	mov	r17,r7
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
  4005a8:	1000021e 	bne	r2,zero,4005b4 <disk_readp+0x34>
  4005ac:	00800084 	movi	r2,2
  4005b0:	00003106 	br	400678 <disk_readp+0xf8>

	if (!(CardType & CT_BLOCK))
  4005b4:	d0a00b03 	ldbu	r2,-32724(gp)
  4005b8:	31bfffcc 	andi	r6,r6,65535
  4005bc:	1080020c 	andi	r2,r2,8
  4005c0:	1000031e 	bne	r2,zero,4005d0 <disk_readp+0x50>
	{
		SectorNumber *= 512;		/* LBA ot BA conversion (byte addressing cards) */
  4005c4:	2804927a 	slli	r2,r5,9
		SectorNumber += Offset;
  4005c8:	118b883a 	add	r5,r2,r6
  4005cc:	00000306 	br	4005dc <disk_readp+0x5c>
	}
	else if(Offset != 0)
  4005d0:	30000226 	beq	r6,zero,4005dc <disk_readp+0x5c>
  4005d4:	008000c4 	movi	r2,3
  4005d8:	00002706 	br	400678 <disk_readp+0xf8>
	{
		return RES_PARERR;	/* Cannot access with offset */
	}

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
  4005dc:	01000444 	movi	r4,17
  4005e0:	040045c0 	call	40045c <send_cmd>
  4005e4:	10803fcc 	andi	r2,r2,255
  4005e8:	1000201e 	bne	r2,zero,40066c <disk_readp+0xec>
)
{
	BYTE token;


	Timer1 = 200;
  4005ec:	00803204 	movi	r2,200
  4005f0:	d0a00915 	stw	r2,-32732(gp)
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xff);
  4005f4:	04003fc4 	movi	r16,255
  4005f8:	8009883a 	mov	r4,r16
  4005fc:	04003a80 	call	4003a8 <xchg_spi>
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
  400600:	10c03fcc 	andi	r3,r2,255
  400604:	1c00031e 	bne	r3,r16,400614 <disk_readp+0x94>
  400608:	d0a00917 	ldw	r2,-32732(gp)
  40060c:	10001726 	beq	r2,zero,40066c <disk_readp+0xec>
  400610:	003ff806 	br	4005f4 <disk_readp+0x74>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
  400614:	00803f84 	movi	r2,254
  400618:	1880141e 	bne	r3,r2,40066c <disk_readp+0xec>
	else if(Offset != 0)
	{
		return RES_PARERR;	/* Cannot access with offset */
	}

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
  40061c:	89ffffcc 	andi	r7,r17,65535
  400620:	8009883a 	mov	r4,r16
  400624:	018c4104 	movi	r6,12548
  400628:	014c4004 	movi	r5,12544
  40062c:	00000906 	br	400654 <disk_readp+0xd4>
	UINT btr		/* Number of bytes to receive (16, 64 or 512) */
)
{
	while(btr > 0)
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xff);
  400630:	31000035 	stwio	r4,0(r6)
  400634:	00cc4204 	movi	r3,12552
		while (!(
  400638:	18800037 	ldwio	r2,0(r3)
  40063c:	1080200c 	andi	r2,r2,128
  400640:	103ffd26 	beq	r2,zero,400638 <disk_readp+0xb8>
				IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
				ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
		*buff++ = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  400644:	28800037 	ldwio	r2,0(r5)
  400648:	90800005 	stb	r2,0(r18)
		--btr;
  40064c:	39ffffc4 	addi	r7,r7,-1
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xff);
		while (!(
				IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
				ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
		*buff++ = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
  400650:	94800044 	addi	r18,r18,1
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (16, 64 or 512) */
)
{
	while(btr > 0)
  400654:	383ff61e 	bne	r7,zero,400630 <disk_readp+0xb0>
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
  400658:	01003fc4 	movi	r4,255
  40065c:	04003a80 	call	4003a8 <xchg_spi>
  400660:	01003fc4 	movi	r4,255
  400664:	04003a80 	call	4003a8 <xchg_spi>
  400668:	0023883a 	mov	r17,zero

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
	{
		Count = 0;
	}
	deselect();
  40066c:	04003d40 	call	4003d4 <deselect>

	return Count ? RES_ERROR : RES_OK;	/* Return result */
  400670:	88bfffcc 	andi	r2,r17,65535
  400674:	1004c03a 	cmpne	r2,r2,zero
}
  400678:	dfc00317 	ldw	ra,12(sp)
  40067c:	dc800217 	ldw	r18,8(sp)
  400680:	dc400117 	ldw	r17,4(sp)
  400684:	dc000017 	ldw	r16,0(sp)
  400688:	dec00404 	addi	sp,sp,16
  40068c:	f800283a 	ret

00400690 <disk_initialize>:

DSTATUS disk_initialize()
{
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
  400690:	d0a00203 	ldbu	r2,-32760(gp)
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize()
{
  400694:	defffc04 	addi	sp,sp,-16
  400698:	dfc00315 	stw	ra,12(sp)
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
  40069c:	1080008c 	andi	r2,r2,2
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize()
{
  4006a0:	dc400215 	stw	r17,8(sp)
  4006a4:	dc000115 	stw	r16,4(sp)
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
  4006a8:	10005f1e 	bne	r2,zero,400828 <disk_initialize+0x198>
/*-----------------------------------------------------------------------*/

static
void power_on (void)
{
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 0);
  4006ac:	008c4504 	movi	r2,12564
  4006b0:	10000035 	stwio	zero,0(r2)
  4006b4:	04000284 	movi	r16,10

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */

	power_on();							/* Initialize SPI */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
  4006b8:	01003fc4 	movi	r4,255
  4006bc:	843fffc4 	addi	r16,r16,-1
  4006c0:	04003a80 	call	4003a8 <xchg_spi>
  4006c4:	80803fcc 	andi	r2,r16,255
  4006c8:	103ffb1e 	bne	r2,zero,4006b8 <disk_initialize+0x28>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
  4006cc:	0009883a 	mov	r4,zero
  4006d0:	000b883a 	mov	r5,zero
  4006d4:	040045c0 	call	40045c <send_cmd>
  4006d8:	14003fcc 	andi	r16,r2,255
  4006dc:	00800044 	movi	r2,1
  4006e0:	80805c1e 	bne	r16,r2,400854 <disk_initialize+0x1c4>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
  4006e4:	0080fa04 	movi	r2,1000
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
  4006e8:	01000204 	movi	r4,8
  4006ec:	01406a84 	movi	r5,426
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
  4006f0:	d0a00915 	stw	r2,-32732(gp)
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
  4006f4:	040045c0 	call	40045c <send_cmd>
  4006f8:	10803fcc 	andi	r2,r2,255
  4006fc:	1400271e 	bne	r2,r16,40079c <disk_initialize+0x10c>
  400700:	d821883a 	mov	r16,sp
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
  400704:	01003fc4 	movi	r4,255
  400708:	04003a80 	call	4003a8 <xchg_spi>
  40070c:	80800005 	stb	r2,0(r16)
  400710:	84000044 	addi	r16,r16,1
  400714:	d8800104 	addi	r2,sp,4
  400718:	80bffa1e 	bne	r16,r2,400704 <disk_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
  40071c:	d8c00083 	ldbu	r3,2(sp)
  400720:	00800044 	movi	r2,1
  400724:	18804b1e 	bne	r3,r2,400854 <disk_initialize+0x1c4>
  400728:	d8c000c3 	ldbu	r3,3(sp)
  40072c:	00802a84 	movi	r2,170
  400730:	1880481e 	bne	r3,r2,400854 <disk_initialize+0x1c4>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
  400734:	d0a00917 	ldw	r2,-32732(gp)
  400738:	01002a44 	movi	r4,169
  40073c:	01500034 	movhi	r5,16384
  400740:	10000326 	beq	r2,zero,400750 <disk_initialize+0xc0>
  400744:	040045c0 	call	40045c <send_cmd>
  400748:	10803fcc 	andi	r2,r2,255
  40074c:	103ff91e 	bne	r2,zero,400734 <disk_initialize+0xa4>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
  400750:	d0a00917 	ldw	r2,-32732(gp)
  400754:	10003f26 	beq	r2,zero,400854 <disk_initialize+0x1c4>
  400758:	01000e84 	movi	r4,58
  40075c:	000b883a 	mov	r5,zero
  400760:	040045c0 	call	40045c <send_cmd>
  400764:	10803fcc 	andi	r2,r2,255
  400768:	10003a1e 	bne	r2,zero,400854 <disk_initialize+0x1c4>
  40076c:	d821883a 	mov	r16,sp
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
  400770:	01003fc4 	movi	r4,255
  400774:	04003a80 	call	4003a8 <xchg_spi>
  400778:	80800005 	stb	r2,0(r16)
  40077c:	84000044 	addi	r16,r16,1
  400780:	d8800104 	addi	r2,sp,4
  400784:	80bffa1e 	bne	r16,r2,400770 <disk_initialize+0xe0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
  400788:	d8800003 	ldbu	r2,0(sp)
  40078c:	1080100c 	andi	r2,r2,64
  400790:	10002c26 	beq	r2,zero,400844 <disk_initialize+0x1b4>
  400794:	00800304 	movi	r2,12
  400798:	00002b06 	br	400848 <disk_initialize+0x1b8>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
  40079c:	01002a44 	movi	r4,169
  4007a0:	000b883a 	mov	r5,zero
  4007a4:	040045c0 	call	40045c <send_cmd>
  4007a8:	10803fcc 	andi	r2,r2,255
  4007ac:	80800336 	bltu	r16,r2,4007bc <disk_initialize+0x12c>
  4007b0:	047fea44 	movi	r17,-87
  4007b4:	04000084 	movi	r16,2
  4007b8:	00000106 	br	4007c0 <disk_initialize+0x130>
  4007bc:	8023883a 	mov	r17,r16
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
  4007c0:	d0a00917 	ldw	r2,-32732(gp)
  4007c4:	89003fcc 	andi	r4,r17,255
  4007c8:	000b883a 	mov	r5,zero
  4007cc:	10000326 	beq	r2,zero,4007dc <disk_initialize+0x14c>
  4007d0:	040045c0 	call	40045c <send_cmd>
  4007d4:	10803fcc 	andi	r2,r2,255
  4007d8:	103ff91e 	bne	r2,zero,4007c0 <disk_initialize+0x130>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
  4007dc:	d0a00917 	ldw	r2,-32732(gp)
  4007e0:	10001c26 	beq	r2,zero,400854 <disk_initialize+0x1c4>
  4007e4:	01000404 	movi	r4,16
  4007e8:	01408004 	movi	r5,512
  4007ec:	040045c0 	call	40045c <send_cmd>
  4007f0:	10803fcc 	andi	r2,r2,255
  4007f4:	1000171e 	bne	r2,zero,400854 <disk_initialize+0x1c4>
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
  4007f8:	d4200b05 	stb	r16,-32724(gp)
	deselect();
  4007fc:	04003d40 	call	4003d4 <deselect>

	if (ty) {			/* OK */
  400800:	80803fcc 	andi	r2,r16,255
  400804:	10000426 	beq	r2,zero,400818 <disk_initialize+0x188>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
  400808:	d0a00203 	ldbu	r2,-32760(gp)
  40080c:	00ffff84 	movi	r3,-2
  400810:	10c4703a 	and	r2,r2,r3
  400814:	00000306 	br	400824 <disk_initialize+0x194>


static
void power_off (void)
{
	select();				/* Wait for card ready */
  400818:	04003ec0 	call	4003ec <select>
	deselect();
  40081c:	04003d40 	call	4003d4 <deselect>
	if (ty) {			/* OK */
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		power_off();
		Stat = STA_NOINIT;
  400820:	00800044 	movi	r2,1
  400824:	d0a00205 	stb	r2,-32760(gp)
	}

	return Stat;
  400828:	d0a00203 	ldbu	r2,-32760(gp)
  40082c:	10803fcc 	andi	r2,r2,255
}
  400830:	dfc00317 	ldw	ra,12(sp)
  400834:	dc400217 	ldw	r17,8(sp)
  400838:	dc000117 	ldw	r16,4(sp)
  40083c:	dec00404 	addi	sp,sp,16
  400840:	f800283a 	ret
	} else {			/* Failed */
		power_off();
		Stat = STA_NOINIT;
	}

	return Stat;
  400844:	00800104 	movi	r2,4
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
  400848:	d0a00b05 	stb	r2,-32724(gp)
	deselect();
  40084c:	04003d40 	call	4003d4 <deselect>
  400850:	003fed06 	br	400808 <disk_initialize+0x178>
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
  400854:	d0200b05 	stb	zero,-32724(gp)
	deselect();
  400858:	04003d40 	call	4003d4 <deselect>
  40085c:	003fee06 	br	400818 <disk_initialize+0x188>

00400860 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
  400860:	defffe04 	addi	sp,sp,-8
  400864:	dc000015 	stw	r16,0(sp)
	FATFS *fs = FatFs;
  400868:	d4200c17 	ldw	r16,-32720(gp)


	clst -= 2;
  40086c:	20ffff84 	addi	r3,r4,-2

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
  400870:	dfc00115 	stw	ra,4(sp)
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  400874:	80800217 	ldw	r2,8(r16)
	return (DWORD)clst * fs->csize + fs->database;
  400878:	1809883a 	mov	r4,r3
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
  40087c:	000b883a 	mov	r5,zero
  400880:	10bfff84 	addi	r2,r2,-2
  400884:	1880042e 	bgeu	r3,r2,400898 <clust2sect+0x38>
	return (DWORD)clst * fs->csize + fs->database;
  400888:	81400083 	ldbu	r5,2(r16)
  40088c:	04013e80 	call	4013e8 <__mulsi3>
  400890:	80c00517 	ldw	r3,20(r16)
  400894:	10cb883a 	add	r5,r2,r3
}
  400898:	2805883a 	mov	r2,r5
  40089c:	dfc00117 	ldw	ra,4(sp)
  4008a0:	dc000017 	ldw	r16,0(sp)
  4008a4:	dec00204 	addi	sp,sp,8
  4008a8:	f800283a 	ret

004008ac <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
  4008ac:	defffe04 	addi	sp,sp,-8
  4008b0:	dc000015 	stw	r16,0(sp)
  4008b4:	2021883a 	mov	r16,r4
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
	clst = dj->sclust;
  4008b8:	21000217 	ldw	r4,8(r4)
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
  4008bc:	00800044 	movi	r2,1

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
  4008c0:	dfc00115 	stw	ra,4(sp)
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
  4008c4:	8000000d 	sth	zero,0(r16)
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	FATFS *fs = FatFs;
  4008c8:	d1600c17 	ldw	r5,-32720(gp)


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
  4008cc:	20800f26 	beq	r4,r2,40090c <dir_rewind+0x60>
  4008d0:	28800217 	ldw	r2,8(r5)
  4008d4:	20800d2e 	bgeu	r4,r2,40090c <dir_rewind+0x60>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
  4008d8:	2000101e 	bne	r4,zero,40091c <dir_rewind+0x70>
  4008dc:	28c00003 	ldbu	r3,0(r5)
  4008e0:	008000c4 	movi	r2,3
  4008e4:	18800b1e 	bne	r3,r2,400914 <dir_rewind+0x68>
		clst = (CLUST)fs->dirbase;
  4008e8:	29000417 	ldw	r4,16(r5)
	dj->clust = clst;						/* Current cluster */
  4008ec:	81000315 	stw	r4,12(r16)
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
  4008f0:	20000226 	beq	r4,zero,4008fc <dir_rewind+0x50>
  4008f4:	04008600 	call	400860 <clust2sect>
  4008f8:	00000106 	br	400900 <dir_rewind+0x54>
  4008fc:	28800417 	ldw	r2,16(r5)
  400900:	0007883a 	mov	r3,zero
  400904:	80800415 	stw	r2,16(r16)
  400908:	00000606 	br	400924 <dir_rewind+0x78>

	return FR_OK;	/* Seek succeeded */
  40090c:	00c00044 	movi	r3,1
  400910:	00000406 	br	400924 <dir_rewind+0x78>
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
  400914:	80000315 	stw	zero,12(r16)
  400918:	003ff806 	br	4008fc <dir_rewind+0x50>
  40091c:	81000315 	stw	r4,12(r16)
  400920:	003ff406 	br	4008f4 <dir_rewind+0x48>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
  400924:	1805883a 	mov	r2,r3
  400928:	dfc00117 	ldw	ra,4(sp)
  40092c:	dc000017 	ldw	r16,0(sp)
  400930:	dec00204 	addi	sp,sp,8
  400934:	f800283a 	ret

00400938 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  400938:	defffc04 	addi	sp,sp,-16
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
  40093c:	01807f84 	movi	r6,510
  400940:	01c00084 	movi	r7,2
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
  400944:	dc400115 	stw	r17,4(sp)
  400948:	dc000015 	stw	r16,0(sp)
  40094c:	dfc00315 	stw	ra,12(sp)
  400950:	dc800215 	stw	r18,8(sp)
  400954:	2021883a 	mov	r16,r4
  400958:	2823883a 	mov	r17,r5
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
  40095c:	04005800 	call	400580 <disk_readp>
  400960:	10000226 	beq	r2,zero,40096c <check_fs+0x34>
  400964:	008000c4 	movi	r2,3
  400968:	00002d06 	br	400a20 <check_fs+0xe8>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
  40096c:	80800043 	ldbu	r2,1(r16)
  400970:	80c00003 	ldbu	r3,0(r16)
  400974:	84800044 	addi	r18,r16,1
  400978:	1004923a 	slli	r2,r2,8
  40097c:	10c4b03a 	or	r2,r2,r3
  400980:	10bfffcc 	andi	r2,r2,65535
  400984:	10a0001c 	xori	r2,r2,32768
  400988:	10a00004 	addi	r2,r2,-32768
  40098c:	00ea9544 	movi	r3,-21931
  400990:	10c00226 	beq	r2,r3,40099c <check_fs+0x64>
  400994:	00800084 	movi	r2,2
  400998:	00002106 	br	400a20 <check_fs+0xe8>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
  40099c:	8009883a 	mov	r4,r16
  4009a0:	880b883a 	mov	r5,r17
  4009a4:	01800d84 	movi	r6,54
  4009a8:	01c00084 	movi	r7,2
  4009ac:	04005800 	call	400580 <disk_readp>
  4009b0:	10000b1e 	bne	r2,zero,4009e0 <check_fs+0xa8>
  4009b4:	80800043 	ldbu	r2,1(r16)
  4009b8:	80c00003 	ldbu	r3,0(r16)
  4009bc:	1004923a 	slli	r2,r2,8
  4009c0:	10c4b03a 	or	r2,r2,r3
  4009c4:	10bfffcc 	andi	r2,r2,65535
  4009c8:	10a0001c 	xori	r2,r2,32768
  4009cc:	10a00004 	addi	r2,r2,-32768
  4009d0:	00d05184 	movi	r3,16710
  4009d4:	10c0021e 	bne	r2,r3,4009e0 <check_fs+0xa8>
  4009d8:	0005883a 	mov	r2,zero
  4009dc:	00001006 	br	400a20 <check_fs+0xe8>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
  4009e0:	880b883a 	mov	r5,r17
  4009e4:	8009883a 	mov	r4,r16
  4009e8:	01801484 	movi	r6,82
  4009ec:	01c00084 	movi	r7,2
  4009f0:	04005800 	call	400580 <disk_readp>
  4009f4:	10000226 	beq	r2,zero,400a00 <check_fs+0xc8>
  4009f8:	00800044 	movi	r2,1
  4009fc:	00000806 	br	400a20 <check_fs+0xe8>
  400a00:	90800003 	ldbu	r2,0(r18)
  400a04:	80c00003 	ldbu	r3,0(r16)
  400a08:	1004923a 	slli	r2,r2,8
  400a0c:	10c4b03a 	or	r2,r2,r3
  400a10:	10bfffcc 	andi	r2,r2,65535
  400a14:	10a0001c 	xori	r2,r2,32768
  400a18:	10a00004 	addi	r2,r2,-32768
  400a1c:	10905198 	cmpnei	r2,r2,16710
		return 0;
	return 1;
}
  400a20:	dfc00317 	ldw	ra,12(sp)
  400a24:	dc800217 	ldw	r18,8(sp)
  400a28:	dc400117 	ldw	r17,4(sp)
  400a2c:	dc000017 	ldw	r16,0(sp)
  400a30:	dec00404 	addi	sp,sp,16
  400a34:	f800283a 	ret

00400a38 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
  400a38:	defffe04 	addi	sp,sp,-8
#endif
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
  400a3c:	00800044 	movi	r2,1

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
  400a40:	dfc00115 	stw	ra,4(sp)
#if _FS_FAT12
	WORD wc, bc, ofs;
#endif
	BYTE buf[4];
	FATFS *fs = FatFs;
  400a44:	d0e00c17 	ldw	r3,-32720(gp)


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
  400a48:	11002d2e 	bgeu	r2,r4,400b00 <get_fat+0xc8>
  400a4c:	18800217 	ldw	r2,8(r3)
  400a50:	20802b2e 	bgeu	r4,r2,400b00 <get_fat+0xc8>
		return 1;

	switch (fs->fs_type) {
  400a54:	19c00003 	ldbu	r7,0(r3)
  400a58:	00800084 	movi	r2,2
  400a5c:	38800326 	beq	r7,r2,400a6c <get_fat+0x34>
  400a60:	008000c4 	movi	r2,3
  400a64:	3880261e 	bne	r7,r2,400b00 <get_fat+0xc8>
  400a68:	00000d06 	br	400aa0 <get_fat+0x68>
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
  400a6c:	200ad23a 	srli	r5,r4,8
  400a70:	18800317 	ldw	r2,12(r3)
  400a74:	21803fcc 	andi	r6,r4,255
  400a78:	318d883a 	add	r6,r6,r6
  400a7c:	288b883a 	add	r5,r5,r2
  400a80:	d809883a 	mov	r4,sp
  400a84:	04005800 	call	400580 <disk_readp>
  400a88:	10001d1e 	bne	r2,zero,400b00 <get_fat+0xc8>
		return LD_WORD(buf);
  400a8c:	d8800043 	ldbu	r2,1(sp)
  400a90:	d8c00003 	ldbu	r3,0(sp)
  400a94:	1004923a 	slli	r2,r2,8
  400a98:	10c4b03a 	or	r2,r2,r3
  400a9c:	00001906 	br	400b04 <get_fat+0xcc>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
  400aa0:	200ad1fa 	srli	r5,r4,7
  400aa4:	18800317 	ldw	r2,12(r3)
  400aa8:	21801fcc 	andi	r6,r4,127
  400aac:	318d883a 	add	r6,r6,r6
  400ab0:	288b883a 	add	r5,r5,r2
  400ab4:	318d883a 	add	r6,r6,r6
  400ab8:	d809883a 	mov	r4,sp
  400abc:	01c00104 	movi	r7,4
  400ac0:	04005800 	call	400580 <disk_readp>
  400ac4:	10000e1e 	bne	r2,zero,400b00 <get_fat+0xc8>
		return LD_DWORD(buf) & 0x0FFFFFFF;
  400ac8:	d88000c3 	ldbu	r2,3(sp)
  400acc:	d8c00083 	ldbu	r3,2(sp)
  400ad0:	d9000043 	ldbu	r4,1(sp)
  400ad4:	1004963a 	slli	r2,r2,24
  400ad8:	1806943a 	slli	r3,r3,16
  400adc:	d9400003 	ldbu	r5,0(sp)
  400ae0:	2008923a 	slli	r4,r4,8
  400ae4:	10c4b03a 	or	r2,r2,r3
  400ae8:	1144b03a 	or	r2,r2,r5
  400aec:	2088b03a 	or	r4,r4,r2
  400af0:	00840034 	movhi	r2,4096
  400af4:	10bfffc4 	addi	r2,r2,-1
  400af8:	2084703a 	and	r2,r4,r2
  400afc:	00000106 	br	400b04 <get_fat+0xcc>
  400b00:	00800044 	movi	r2,1
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
  400b04:	dfc00117 	ldw	ra,4(sp)
  400b08:	dec00204 	addi	sp,sp,8
  400b0c:	f800283a 	ret

00400b10 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
  400b10:	defff804 	addi	sp,sp,-32
  400b14:	dc000015 	stw	r16,0(sp)
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
  400b18:	d4200c17 	ldw	r16,-32720(gp)
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
  400b1c:	dd800615 	stw	r22,24(sp)
  400b20:	dd400515 	stw	r21,20(sp)
  400b24:	dcc00315 	stw	r19,12(sp)
  400b28:	dfc00715 	stw	ra,28(sp)
  400b2c:	dd000415 	stw	r20,16(sp)
  400b30:	dc800215 	stw	r18,8(sp)
  400b34:	dc400115 	stw	r17,4(sp)
  400b38:	302b883a 	mov	r21,r6
  400b3c:	202d883a 	mov	r22,r4
  400b40:	2827883a 	mov	r19,r5
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
  400b44:	3000000d 	sth	zero,0(r6)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
  400b48:	8000021e 	bne	r16,zero,400b54 <pf_read+0x44>
  400b4c:	00800184 	movi	r2,6
  400b50:	00004706 	br	400c70 <pf_read+0x160>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
  400b54:	80800043 	ldbu	r2,1(r16)
  400b58:	1080004c 	andi	r2,r2,1
  400b5c:	1000021e 	bne	r2,zero,400b68 <pf_read+0x58>
  400b60:	00800144 	movi	r2,5
  400b64:	00004206 	br	400c70 <pf_read+0x160>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
  400b68:	80800717 	ldw	r2,28(r16)
  400b6c:	80c00617 	ldw	r3,24(r16)
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
  400b70:	293fffcc 	andi	r4,r5,65535
	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
  400b74:	10c5c83a 	sub	r2,r2,r3
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
  400b78:	1100012e 	bgeu	r2,r4,400b80 <pf_read+0x70>
  400b7c:	1027883a 	mov	r19,r2
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
  400b80:	b029883a 	mov	r20,r22
  400b84:	00003506 	br	400c5c <pf_read+0x14c>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
  400b88:	81000617 	ldw	r4,24(r16)
  400b8c:	20807fcc 	andi	r2,r4,511
  400b90:	1000161e 	bne	r2,zero,400bec <pf_read+0xdc>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
  400b94:	80800083 	ldbu	r2,2(r16)
  400b98:	2006d27a 	srli	r3,r4,9
  400b9c:	10bfffc4 	addi	r2,r2,-1
  400ba0:	18a2703a 	and	r17,r3,r2
			if (!cs) {								/* On the cluster boundary? */
  400ba4:	88803fcc 	andi	r2,r17,255
  400ba8:	1000091e 	bne	r2,zero,400bd0 <pf_read+0xc0>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
  400bac:	2000021e 	bne	r4,zero,400bb8 <pf_read+0xa8>
  400bb0:	80c00817 	ldw	r3,32(r16)
  400bb4:	00000306 	br	400bc4 <pf_read+0xb4>
  400bb8:	81000917 	ldw	r4,36(r16)
  400bbc:	0400a380 	call	400a38 <get_fat>
  400bc0:	1007883a 	mov	r3,r2
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
  400bc4:	00800044 	movi	r2,1
  400bc8:	10c0272e 	bgeu	r2,r3,400c68 <pf_read+0x158>
				fs->curr_clust = clst;				/* Update current cluster */
  400bcc:	80c00915 	stw	r3,36(r16)
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
  400bd0:	81000917 	ldw	r4,36(r16)
  400bd4:	04008600 	call	400860 <clust2sect>
  400bd8:	1007883a 	mov	r3,r2
			if (!sect) goto fr_abort;
  400bdc:	10002226 	beq	r2,zero,400c68 <pf_read+0x158>
			fs->dsect = sect + cs;
  400be0:	88803fcc 	andi	r2,r17,255
  400be4:	1885883a 	add	r2,r3,r2
  400be8:	80800a15 	stw	r2,40(r16)
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
  400bec:	81000617 	ldw	r4,24(r16)
  400bf0:	00808004 	movi	r2,512
  400bf4:	997fffcc 	andi	r5,r19,65535
  400bf8:	20c07fcc 	andi	r3,r4,511
  400bfc:	10c7c83a 	sub	r3,r2,r3
  400c00:	18bfffcc 	andi	r2,r3,65535
  400c04:	200d883a 	mov	r6,r4
  400c08:	9825883a 	mov	r18,r19
  400c0c:	1140012e 	bgeu	r2,r5,400c14 <pf_read+0x104>
  400c10:	1825883a 	mov	r18,r3
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
  400c14:	b0000226 	beq	r22,zero,400c20 <pf_read+0x110>
  400c18:	a009883a 	mov	r4,r20
  400c1c:	00000106 	br	400c24 <pf_read+0x114>
  400c20:	0009883a 	mov	r4,zero
  400c24:	81400a17 	ldw	r5,40(r16)
  400c28:	947fffcc 	andi	r17,r18,65535
  400c2c:	31807fcc 	andi	r6,r6,511
  400c30:	880f883a 	mov	r7,r17
  400c34:	04005800 	call	400580 <disk_readp>
		if (dr) goto fr_abort;
  400c38:	10000b1e 	bne	r2,zero,400c68 <pf_read+0x158>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
  400c3c:	80800617 	ldw	r2,24(r16)
		btr -= rcnt; *br += rcnt;
  400c40:	a8c0000b 	ldhu	r3,0(r21)
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
  400c44:	a469883a 	add	r20,r20,r17
  400c48:	1445883a 	add	r2,r2,r17
		btr -= rcnt; *br += rcnt;
  400c4c:	1c87883a 	add	r3,r3,r18
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
  400c50:	80800615 	stw	r2,24(r16)
		btr -= rcnt; *br += rcnt;
  400c54:	a8c0000d 	sth	r3,0(r21)
  400c58:	9ca7c83a 	sub	r19,r19,r18
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
  400c5c:	98bfffcc 	andi	r2,r19,65535
  400c60:	103fc91e 	bne	r2,zero,400b88 <pf_read+0x78>
  400c64:	00000206 	br	400c70 <pf_read+0x160>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
  400c68:	80000045 	stb	zero,1(r16)
  400c6c:	00800044 	movi	r2,1
	return FR_DISK_ERR;
}
  400c70:	dfc00717 	ldw	ra,28(sp)
  400c74:	dd800617 	ldw	r22,24(sp)
  400c78:	dd400517 	ldw	r21,20(sp)
  400c7c:	dd000417 	ldw	r20,16(sp)
  400c80:	dcc00317 	ldw	r19,12(sp)
  400c84:	dc800217 	ldw	r18,8(sp)
  400c88:	dc400117 	ldw	r17,4(sp)
  400c8c:	dc000017 	ldw	r16,0(sp)
  400c90:	dec00804 	addi	sp,sp,32
  400c94:	f800283a 	ret

00400c98 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
  400c98:	deffe904 	addi	sp,sp,-92
  400c9c:	dd001415 	stw	r20,80(sp)
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
  400ca0:	d5200c17 	ldw	r20,-32720(gp)
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
  400ca4:	dfc01615 	stw	ra,88(sp)
  400ca8:	dd401515 	stw	r21,84(sp)
  400cac:	dcc01315 	stw	r19,76(sp)
  400cb0:	dc801215 	stw	r18,72(sp)
  400cb4:	dc401115 	stw	r17,68(sp)
  400cb8:	dc001015 	stw	r16,64(sp)
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
  400cbc:	a000021e 	bne	r20,zero,400cc8 <pf_open+0x30>
  400cc0:	00c00184 	movi	r3,6
  400cc4:	0000c006 	br	400fc8 <pf_open+0x330>
		return FR_NOT_ENABLED;

	fs->flag = 0;
  400cc8:	a0000045 	stb	zero,1(r20)
	dj.fn = sp;
  400ccc:	2023883a 	mov	r17,r4
  400cd0:	01000804 	movi	r4,32
  400cd4:	dec00415 	stw	sp,16(sp)
  400cd8:	00000106 	br	400ce0 <pf_open+0x48>
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
  400cdc:	8c400044 	addi	r17,r17,1
  400ce0:	88c00007 	ldb	r3,0(r17)
  400ce4:	193ffd26 	beq	r3,r4,400cdc <pf_open+0x44>
	if (*path == '/') path++;			/* Strip heading separator */
  400ce8:	00800bc4 	movi	r2,47
  400cec:	1880011e 	bne	r3,r2,400cf4 <pf_open+0x5c>
  400cf0:	8c400044 	addi	r17,r17,1
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
  400cf4:	88800003 	ldbu	r2,0(r17)
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */
  400cf8:	d8000515 	stw	zero,20(sp)

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
  400cfc:	20800536 	bltu	r4,r2,400d14 <pf_open+0x7c>
		res = dir_rewind(dj);
  400d00:	d9000304 	addi	r4,sp,12
  400d04:	04008ac0 	call	4008ac <dir_rewind>
  400d08:	1007883a 	mov	r3,r2
		return FR_NOT_ENABLED;

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
  400d0c:	10008a26 	beq	r2,zero,400f38 <pf_open+0x2a0>
  400d10:	0000ad06 	br	400fc8 <pf_open+0x330>
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
  400d14:	d9c00417 	ldw	r7,16(sp)
  400d18:	01000804 	movi	r4,32


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
  400d1c:	3805883a 	mov	r2,r7
  400d20:	38c002c4 	addi	r3,r7,11
	while (cnt--) *d++ = (char)val;
  400d24:	11000005 	stb	r4,0(r2)
  400d28:	10800044 	addi	r2,r2,1
  400d2c:	10fffd1e 	bne	r2,r3,400d24 <pf_open+0x8c>
  400d30:	02800204 	movi	r10,8
  400d34:	002b883a 	mov	r21,zero
  400d38:	0013883a 	mov	r9,zero
  400d3c:	04000804 	movi	r16,32
  400d40:	03c00bc4 	movi	r15,47
  400d44:	03800204 	movi	r14,8
  400d48:	03400644 	movi	r13,25
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
  400d4c:	a8803fcc 	andi	r2,r21,255
  400d50:	8885883a 	add	r2,r17,r2
  400d54:	10c00003 	ldbu	r3,0(r2)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
  400d58:	52c03fcc 	andi	r11,r10,255
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
  400d5c:	03000b84 	movi	r12,46
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
  400d60:	19003fcc 	andi	r4,r3,255
  400d64:	2100201c 	xori	r4,r4,128
  400d68:	18803fcc 	andi	r2,r3,255
  400d6c:	213fe004 	addi	r4,r4,-128
		if (c == '.' || i >= ni) {
  400d70:	49403fcc 	andi	r5,r9,255
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
  400d74:	ad400044 	addi	r21,r21,1
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
  400d78:	8080102e 	bgeu	r16,r2,400dbc <pf_open+0x124>
  400d7c:	23c00f26 	beq	r4,r15,400dbc <pf_open+0x124>
		if (c == '.' || i >= ni) {
  400d80:	23000526 	beq	r4,r12,400d98 <pf_open+0x100>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
  400d84:	18bfe7c4 	addi	r2,r3,-97
			sfn[i++] = c;
  400d88:	394d883a 	add	r6,r7,r5
  400d8c:	4a400044 	addi	r9,r9,1
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
  400d90:	10803fcc 	andi	r2,r2,255
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
  400d94:	2ac00536 	bltu	r5,r11,400dac <pf_open+0x114>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
  400d98:	028002c4 	movi	r10,11
  400d9c:	02400204 	movi	r9,8
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
  400da0:	5b80061e 	bne	r11,r14,400dbc <pf_open+0x124>
  400da4:	233fe926 	beq	r4,r12,400d4c <pf_open+0xb4>
  400da8:	00000406 	br	400dbc <pf_open+0x124>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
  400dac:	68800136 	bltu	r13,r2,400db4 <pf_open+0x11c>
  400db0:	18fff804 	addi	r3,r3,-32
			sfn[i++] = c;
  400db4:	30c00005 	stb	r3,0(r6)
  400db8:	003fe406 	br	400d4c <pf_open+0xb4>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
  400dbc:	18c03fcc 	andi	r3,r3,255
  400dc0:	00800804 	movi	r2,32
  400dc4:	10c5403a 	cmpgeu	r2,r2,r3
  400dc8:	388002c5 	stb	r2,11(r7)
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
  400dcc:	d9000304 	addi	r4,sp,12
  400dd0:	04008ac0 	call	4008ac <dir_rewind>
  400dd4:	1007883a 	mov	r3,r2
	if (res != FR_OK) return res;
  400dd8:	10003f1e 	bne	r2,zero,400ed8 <pf_open+0x240>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
  400ddc:	d980030b 	ldhu	r6,12(sp)
  400de0:	d9400717 	ldw	r5,28(sp)
  400de4:	dc000804 	addi	r16,sp,32
  400de8:	318003cc 	andi	r6,r6,15
  400dec:	300c917a 	slli	r6,r6,5
  400df0:	8009883a 	mov	r4,r16
  400df4:	01c00804 	movi	r7,32
  400df8:	04005800 	call	400580 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
  400dfc:	1006c03a 	cmpne	r3,r2,zero
  400e00:	1000351e 	bne	r2,zero,400ed8 <pf_open+0x240>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
  400e04:	d8800803 	ldbu	r2,32(sp)
  400e08:	10003526 	beq	r2,zero,400ee0 <pf_open+0x248>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
  400e0c:	d9c00ac3 	ldbu	r7,43(sp)
  400e10:	3880020c 	andi	r2,r7,8
  400e14:	10000f1e 	bne	r2,zero,400e54 <pf_open+0x1bc>
  400e18:	d9800417 	ldw	r6,16(sp)
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
  400e1c:	000b883a 	mov	r5,zero
  400e20:	020002c4 	movi	r8,11
  400e24:	00000106 	br	400e2c <pf_open+0x194>
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  400e28:	2a000726 	beq	r5,r8,400e48 <pf_open+0x1b0>
  400e2c:	8145883a 	add	r2,r16,r5
  400e30:	3147883a 	add	r3,r6,r5
  400e34:	11000007 	ldb	r4,0(r2)
  400e38:	18800007 	ldb	r2,0(r3)
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
  400e3c:	29400044 	addi	r5,r5,1
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
  400e40:	20bff926 	beq	r4,r2,400e28 <pf_open+0x190>
  400e44:	00000306 	br	400e54 <pf_open+0x1bc>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
  400e48:	308002c3 	ldbu	r2,11(r6)
  400e4c:	10002a26 	beq	r2,zero,400ef8 <pf_open+0x260>
  400e50:	00003a06 	br	400f3c <pf_open+0x2a4>
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
  400e54:	d880030b 	ldhu	r2,12(sp)
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
  400e58:	d4200c17 	ldw	r16,-32720(gp)


	i = dj->index + 1;
  400e5c:	14c00044 	addi	r19,r2,1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
  400e60:	98ffffcc 	andi	r3,r19,65535
  400e64:	18001b26 	beq	r3,zero,400ed4 <pf_open+0x23c>
  400e68:	d9400717 	ldw	r5,28(sp)
  400e6c:	28001926 	beq	r5,zero,400ed4 <pf_open+0x23c>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
  400e70:	188003cc 	andi	r2,r3,15
  400e74:	1000151e 	bne	r2,zero,400ecc <pf_open+0x234>
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
  400e78:	d9000617 	ldw	r4,24(sp)
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
  400e7c:	28800044 	addi	r2,r5,1
  400e80:	d8800715 	stw	r2,28(sp)
  400e84:	04800044 	movi	r18,1

		if (dj->clust == 0) {	/* Static table */
  400e88:	2000031e 	bne	r4,zero,400e98 <pf_open+0x200>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
  400e8c:	8080010b 	ldhu	r2,4(r16)
  400e90:	18800e36 	bltu	r3,r2,400ecc <pf_open+0x234>
  400e94:	00000f06 	br	400ed4 <pf_open+0x23c>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
  400e98:	80800083 	ldbu	r2,2(r16)
  400e9c:	1806d13a 	srli	r3,r3,4
  400ea0:	10bfffc4 	addi	r2,r2,-1
  400ea4:	1886703a 	and	r3,r3,r2
  400ea8:	1800081e 	bne	r3,zero,400ecc <pf_open+0x234>
				clst = get_fat(dj->clust);		/* Get next cluster */
  400eac:	0400a380 	call	400a38 <get_fat>
  400eb0:	1009883a 	mov	r4,r2
				if (clst <= 1) return FR_DISK_ERR;
  400eb4:	90800e2e 	bgeu	r18,r2,400ef0 <pf_open+0x258>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
  400eb8:	80800217 	ldw	r2,8(r16)
  400ebc:	2080052e 	bgeu	r4,r2,400ed4 <pf_open+0x23c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
  400ec0:	d9000615 	stw	r4,24(sp)
				dj->sect = clust2sect(clst);
  400ec4:	04008600 	call	400860 <clust2sect>
  400ec8:	d8800715 	stw	r2,28(sp)
			}
		}
	}

	dj->index = i;
  400ecc:	dcc0030d 	sth	r19,12(sp)
  400ed0:	003fc206 	br	400ddc <pf_open+0x144>
  400ed4:	00c000c4 	movi	r3,3
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
  400ed8:	008000c4 	movi	r2,3
  400edc:	18803a1e 	bne	r3,r2,400fc8 <pf_open+0x330>
  400ee0:	d8800417 	ldw	r2,16(sp)
  400ee4:	108002c3 	ldbu	r2,11(r2)
  400ee8:	10003626 	beq	r2,zero,400fc4 <pf_open+0x32c>
  400eec:	00003306 	br	400fbc <pf_open+0x324>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
  400ef0:	9007883a 	mov	r3,r18
  400ef4:	003ff806 	br	400ed8 <pf_open+0x240>
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
  400ef8:	3880040c 	andi	r2,r7,16
  400efc:	10003126 	beq	r2,zero,400fc4 <pf_open+0x32c>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  400f00:	d8800d43 	ldbu	r2,53(sp)
  400f04:	d9400d03 	ldbu	r5,52(sp)
  400f08:	d8c00ec3 	ldbu	r3,59(sp)
  400f0c:	1004923a 	slli	r2,r2,8
  400f10:	d9000e83 	ldbu	r4,58(sp)
  400f14:	1806923a 	slli	r3,r3,8
  400f18:	1144b03a 	or	r2,r2,r5
  400f1c:	1004943a 	slli	r2,r2,16
  400f20:	1906b03a 	or	r3,r3,r4
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
  400f24:	a9003fcc 	andi	r4,r21,255
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  400f28:	10c4b03a 	or	r2,r2,r3
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
  400f2c:	8923883a 	add	r17,r17,r4
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
  400f30:	d8800515 	stw	r2,20(sp)
  400f34:	003f7706 	br	400d14 <pf_open+0x7c>
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
		res = dir_rewind(dj);
		dir[0] = 0;
  400f38:	d8000805 	stb	zero,32(sp)

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
  400f3c:	d8800803 	ldbu	r2,32(sp)
  400f40:	10001e26 	beq	r2,zero,400fbc <pf_open+0x324>
  400f44:	d8800ac3 	ldbu	r2,43(sp)
  400f48:	1080040c 	andi	r2,r2,16
  400f4c:	10001b1e 	bne	r2,zero,400fbc <pf_open+0x324>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
  400f50:	d8800d43 	ldbu	r2,53(sp)
  400f54:	d9400d03 	ldbu	r5,52(sp)
  400f58:	d8c00ec3 	ldbu	r3,59(sp)
  400f5c:	1004923a 	slli	r2,r2,8
  400f60:	d9000e83 	ldbu	r4,58(sp)
  400f64:	1806923a 	slli	r3,r3,8
  400f68:	1144b03a 	or	r2,r2,r5
  400f6c:	1004943a 	slli	r2,r2,16
  400f70:	1906b03a 	or	r3,r3,r4
  400f74:	10c4b03a 	or	r2,r2,r3
  400f78:	a0800815 	stw	r2,32(r20)
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  400f7c:	d8800fc3 	ldbu	r2,63(sp)
  400f80:	d8c00f83 	ldbu	r3,62(sp)
  400f84:	d9000f43 	ldbu	r4,61(sp)
  400f88:	1004963a 	slli	r2,r2,24
  400f8c:	1806943a 	slli	r3,r3,16
  400f90:	d9400f03 	ldbu	r5,60(sp)
  400f94:	2008923a 	slli	r4,r4,8
  400f98:	10c4b03a 	or	r2,r2,r3
  400f9c:	1144b03a 	or	r2,r2,r5
  400fa0:	2088b03a 	or	r4,r4,r2
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;
  400fa4:	0007883a 	mov	r3,zero
  400fa8:	00800044 	movi	r2,1
  400fac:	a0800045 	stb	r2,1(r20)
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
  400fb0:	a1000715 	stw	r4,28(r20)
	fs->fptr = 0;						/* File pointer */
  400fb4:	a0000615 	stw	zero,24(r20)
  400fb8:	00000306 	br	400fc8 <pf_open+0x330>
	fs->flag = FA_OPENED;

	return FR_OK;
  400fbc:	00c000c4 	movi	r3,3
  400fc0:	00000106 	br	400fc8 <pf_open+0x330>
  400fc4:	00c00104 	movi	r3,4
}
  400fc8:	1805883a 	mov	r2,r3
  400fcc:	dfc01617 	ldw	ra,88(sp)
  400fd0:	dd401517 	ldw	r21,84(sp)
  400fd4:	dd001417 	ldw	r20,80(sp)
  400fd8:	dcc01317 	ldw	r19,76(sp)
  400fdc:	dc801217 	ldw	r18,72(sp)
  400fe0:	dc401117 	ldw	r17,68(sp)
  400fe4:	dc001017 	ldw	r16,64(sp)
  400fe8:	dec01704 	addi	sp,sp,92
  400fec:	f800283a 	ret

00400ff0 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
  400ff0:	defff304 	addi	sp,sp,-52
  400ff4:	dc000915 	stw	r16,36(sp)
  400ff8:	dfc00c15 	stw	ra,48(sp)
  400ffc:	dc800b15 	stw	r18,44(sp)
  401000:	dc400a15 	stw	r17,40(sp)
  401004:	2021883a 	mov	r16,r4
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
  401008:	d0200c15 	stw	zero,-32720(gp)
	if (!fs) return FR_OK;				/* Unregister fs object */
  40100c:	2000021e 	bne	r4,zero,401018 <pf_mount+0x28>
  401010:	0009883a 	mov	r4,zero
  401014:	00009a06 	br	401280 <pf_mount+0x290>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
  401018:	04006900 	call	400690 <disk_initialize>
  40101c:	1080004c 	andi	r2,r2,1
  401020:	1005003a 	cmpeq	r2,r2,zero
  401024:	1000021e 	bne	r2,zero,401030 <pf_mount+0x40>
  401028:	01000084 	movi	r4,2
  40102c:	00009406 	br	401280 <pf_mount+0x290>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
  401030:	d809883a 	mov	r4,sp
  401034:	000b883a 	mov	r5,zero
  401038:	04009380 	call	400938 <check_fs>
  40103c:	1009883a 	mov	r4,r2
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
  401040:	10c03fcc 	andi	r3,r2,255
  401044:	00800044 	movi	r2,1
  401048:	18800226 	beq	r3,r2,401054 <pf_mount+0x64>
  40104c:	0025883a 	mov	r18,zero
  401050:	00001606 	br	4010ac <pf_mount+0xbc>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
  401054:	d809883a 	mov	r4,sp
  401058:	000b883a 	mov	r5,zero
  40105c:	01806f84 	movi	r6,446
  401060:	01c00404 	movi	r7,16
  401064:	04005800 	call	400580 <disk_readp>
  401068:	1000731e 	bne	r2,zero,401238 <pf_mount+0x248>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
  40106c:	d8800103 	ldbu	r2,4(sp)
  401070:	10007326 	beq	r2,zero,401240 <pf_mount+0x250>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
  401074:	d88002c3 	ldbu	r2,11(sp)
  401078:	d8c00283 	ldbu	r3,10(sp)
  40107c:	d9000243 	ldbu	r4,9(sp)
  401080:	1004963a 	slli	r2,r2,24
  401084:	1806943a 	slli	r3,r3,16
  401088:	d9400203 	ldbu	r5,8(sp)
  40108c:	2008923a 	slli	r4,r4,8
  401090:	10c4b03a 	or	r2,r2,r3
  401094:	1144b03a 	or	r2,r2,r5
  401098:	20a4b03a 	or	r18,r4,r2
				fmt = check_fs(buf, bsect);	/* Check the partition */
  40109c:	900b883a 	mov	r5,r18
  4010a0:	d809883a 	mov	r4,sp
  4010a4:	04009380 	call	400938 <check_fs>
  4010a8:	1009883a 	mov	r4,r2
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
  4010ac:	20c03fcc 	andi	r3,r4,255
  4010b0:	008000c4 	movi	r2,3
  4010b4:	18806026 	beq	r3,r2,401238 <pf_mount+0x248>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
  4010b8:	1800611e 	bne	r3,zero,401240 <pf_mount+0x250>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
  4010bc:	d809883a 	mov	r4,sp
  4010c0:	900b883a 	mov	r5,r18
  4010c4:	01800344 	movi	r6,13
  4010c8:	01c00904 	movi	r7,36
  4010cc:	04005800 	call	400580 <disk_readp>
  4010d0:	1000591e 	bne	r2,zero,401238 <pf_mount+0x248>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
  4010d4:	d8800283 	ldbu	r2,10(sp)
  4010d8:	d8c00243 	ldbu	r3,9(sp)
  4010dc:	1004923a 	slli	r2,r2,8
  4010e0:	10c8b03a 	or	r4,r2,r3
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
  4010e4:	20bfffcc 	andi	r2,r4,65535
  4010e8:	10a0001c 	xori	r2,r2,32768
  4010ec:	10a00004 	addi	r2,r2,-32768
  4010f0:	10000226 	beq	r2,zero,4010fc <pf_mount+0x10c>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
  4010f4:	213fffcc 	andi	r4,r4,65535
  4010f8:	00000a06 	br	401124 <pf_mount+0x134>
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
  4010fc:	d8800683 	ldbu	r2,26(sp)
  401100:	d8c00643 	ldbu	r3,25(sp)
  401104:	d9000603 	ldbu	r4,24(sp)
  401108:	1004963a 	slli	r2,r2,24
  40110c:	1806943a 	slli	r3,r3,16
  401110:	d94005c3 	ldbu	r5,23(sp)
  401114:	2008923a 	slli	r4,r4,8
  401118:	10c4b03a 	or	r2,r2,r3
  40111c:	1144b03a 	or	r2,r2,r5
  401120:	2088b03a 	or	r4,r4,r2

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
  401124:	d94000c3 	ldbu	r5,3(sp)
  401128:	04013e80 	call	4013e8 <__mulsi3>
  40112c:	1023883a 	mov	r17,r2
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
  401130:	d90001c3 	ldbu	r4,7(sp)

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
  401134:	d8800083 	ldbu	r2,2(sp)
  401138:	d9800043 	ldbu	r6,1(sp)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
  40113c:	d9c00183 	ldbu	r7,6(sp)
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
  401140:	d8c00143 	ldbu	r3,5(sp)
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
  401144:	2008923a 	slli	r4,r4,8

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
  401148:	1004923a 	slli	r2,r2,8
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
  40114c:	d9400103 	ldbu	r5,4(sp)
  401150:	1806923a 	slli	r3,r3,8

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
  401154:	1184b03a 	or	r2,r2,r6
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
  401158:	21ccb03a 	or	r6,r4,r7
	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
  40115c:	da000003 	ldbu	r8,0(sp)
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
  401160:	313fffcc 	andi	r4,r6,65535
  401164:	2120001c 	xori	r4,r4,32768
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
  401168:	1946b03a 	or	r3,r3,r5

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
  40116c:	9085883a 	add	r2,r18,r2
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
  401170:	21200004 	addi	r4,r4,-32768

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
  401174:	80800315 	stw	r2,12(r16)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
  401178:	82000085 	stb	r8,2(r16)
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
  40117c:	80c0010d 	sth	r3,4(r16)
  401180:	180f883a 	mov	r7,r3
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
  401184:	20000226 	beq	r4,zero,401190 <pf_mount+0x1a0>

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
  401188:	31bfffcc 	andi	r6,r6,65535
  40118c:	00000a06 	br	4011b8 <pf_mount+0x1c8>
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
  401190:	d8800583 	ldbu	r2,22(sp)
  401194:	d8c00543 	ldbu	r3,21(sp)
  401198:	d9000503 	ldbu	r4,20(sp)
  40119c:	1004963a 	slli	r2,r2,24
  4011a0:	1806943a 	slli	r3,r3,16
  4011a4:	d94004c3 	ldbu	r5,19(sp)
  4011a8:	2008923a 	slli	r4,r4,8
  4011ac:	10c4b03a 	or	r2,r2,r3
  4011b0:	1144b03a 	or	r2,r2,r5
  4011b4:	208cb03a 	or	r6,r4,r2
	mclst = (tsect						/* Last cluster# + 1 */
  4011b8:	d9000083 	ldbu	r4,2(sp)
  4011bc:	d8c00043 	ldbu	r3,1(sp)
  4011c0:	38bfffcc 	andi	r2,r7,65535
  4011c4:	2008923a 	slli	r4,r4,8
  4011c8:	1004d13a 	srli	r2,r2,4
  4011cc:	81400083 	ldbu	r5,2(r16)
  4011d0:	20c8b03a 	or	r4,r4,r3
  4011d4:	3109c83a 	sub	r4,r6,r4
  4011d8:	2449c83a 	sub	r4,r4,r17
  4011dc:	2089c83a 	sub	r4,r4,r2
  4011e0:	04013d80 	call	4013d8 <__udivsi3>
  4011e4:	10c00084 	addi	r3,r2,2
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
  4011e8:	0083fd84 	movi	r2,4086
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
  4011ec:	80c00215 	stw	r3,8(r16)

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
  4011f0:	10c0132e 	bgeu	r2,r3,401240 <pf_mount+0x250>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
  4011f4:	00bffd94 	movui	r2,65526
  4011f8:	10c01336 	bltu	r2,r3,401248 <pf_mount+0x258>

	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
  4011fc:	80800317 	ldw	r2,12(r16)
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
  401200:	00c00084 	movi	r3,2
  401204:	80c00005 	stb	r3,0(r16)
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
  401208:	1445883a 	add	r2,r2,r17
  40120c:	80800415 	stw	r2,16(r16)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
  401210:	8080010b 	ldhu	r2,4(r16)
  401214:	80c00317 	ldw	r3,12(r16)

	fs->flag = 0;
  401218:	80000045 	stb	zero,1(r16)
	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
  40121c:	1004d13a 	srli	r2,r2,4

	fs->flag = 0;
	FatFs = fs;
  401220:	0009883a 	mov	r4,zero
  401224:	d4200c15 	stw	r16,-32720(gp)
	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
  401228:	10c5883a 	add	r2,r2,r3
  40122c:	8885883a 	add	r2,r17,r2
  401230:	80800515 	stw	r2,20(r16)
  401234:	00001206 	br	401280 <pf_mount+0x290>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
  401238:	01000044 	movi	r4,1
  40123c:	00001006 	br	401280 <pf_mount+0x290>
  401240:	010001c4 	movi	r4,7
  401244:	00000e06 	br	401280 <pf_mount+0x290>
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
  401248:	d8800883 	ldbu	r2,34(sp)
  40124c:	d8c00843 	ldbu	r3,33(sp)
  401250:	d9000803 	ldbu	r4,32(sp)
  401254:	1004963a 	slli	r2,r2,24
  401258:	1806943a 	slli	r3,r3,16
  40125c:	d94007c3 	ldbu	r5,31(sp)
  401260:	2008923a 	slli	r4,r4,8
  401264:	10c4b03a 	or	r2,r2,r3
  401268:	1144b03a 	or	r2,r2,r5
  40126c:	2088b03a 	or	r4,r4,r2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
  401270:	008000c4 	movi	r2,3
  401274:	80800005 	stb	r2,0(r16)
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
  401278:	81000415 	stw	r4,16(r16)
  40127c:	003fe406 	br	401210 <pf_mount+0x220>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
  401280:	2005883a 	mov	r2,r4
  401284:	dfc00c17 	ldw	ra,48(sp)
  401288:	dc800b17 	ldw	r18,44(sp)
  40128c:	dc400a17 	ldw	r17,40(sp)
  401290:	dc000917 	ldw	r16,36(sp)
  401294:	dec00d04 	addi	sp,sp,52
  401298:	f800283a 	ret

0040129c <udivmodsi4>:
  40129c:	29001b2e 	bgeu	r5,r4,40130c <udivmodsi4+0x70>
  4012a0:	28001a16 	blt	r5,zero,40130c <udivmodsi4+0x70>
  4012a4:	00800044 	movi	r2,1
  4012a8:	0007883a 	mov	r3,zero
  4012ac:	01c007c4 	movi	r7,31
  4012b0:	00000306 	br	4012c0 <udivmodsi4+0x24>
  4012b4:	19c01326 	beq	r3,r7,401304 <udivmodsi4+0x68>
  4012b8:	18c00044 	addi	r3,r3,1
  4012bc:	28000416 	blt	r5,zero,4012d0 <udivmodsi4+0x34>
  4012c0:	294b883a 	add	r5,r5,r5
  4012c4:	1085883a 	add	r2,r2,r2
  4012c8:	293ffa36 	bltu	r5,r4,4012b4 <udivmodsi4+0x18>
  4012cc:	10000d26 	beq	r2,zero,401304 <udivmodsi4+0x68>
  4012d0:	0007883a 	mov	r3,zero
  4012d4:	21400236 	bltu	r4,r5,4012e0 <udivmodsi4+0x44>
  4012d8:	2149c83a 	sub	r4,r4,r5
  4012dc:	1886b03a 	or	r3,r3,r2
  4012e0:	1004d07a 	srli	r2,r2,1
  4012e4:	280ad07a 	srli	r5,r5,1
  4012e8:	103ffa1e 	bne	r2,zero,4012d4 <udivmodsi4+0x38>
  4012ec:	30000226 	beq	r6,zero,4012f8 <udivmodsi4+0x5c>
  4012f0:	2005883a 	mov	r2,r4
  4012f4:	f800283a 	ret
  4012f8:	1809883a 	mov	r4,r3
  4012fc:	2005883a 	mov	r2,r4
  401300:	f800283a 	ret
  401304:	0007883a 	mov	r3,zero
  401308:	003ff806 	br	4012ec <udivmodsi4+0x50>
  40130c:	00800044 	movi	r2,1
  401310:	0007883a 	mov	r3,zero
  401314:	003fef06 	br	4012d4 <udivmodsi4+0x38>

00401318 <__divsi3>:
  401318:	defffe04 	addi	sp,sp,-8
  40131c:	dc000015 	stw	r16,0(sp)
  401320:	dfc00115 	stw	ra,4(sp)
  401324:	0021883a 	mov	r16,zero
  401328:	20000c16 	blt	r4,zero,40135c <__divsi3+0x44>
  40132c:	000d883a 	mov	r6,zero
  401330:	28000e16 	blt	r5,zero,40136c <__divsi3+0x54>
  401334:	040129c0 	call	40129c <udivmodsi4>
  401338:	1007883a 	mov	r3,r2
  40133c:	8005003a 	cmpeq	r2,r16,zero
  401340:	1000011e 	bne	r2,zero,401348 <__divsi3+0x30>
  401344:	00c7c83a 	sub	r3,zero,r3
  401348:	1805883a 	mov	r2,r3
  40134c:	dfc00117 	ldw	ra,4(sp)
  401350:	dc000017 	ldw	r16,0(sp)
  401354:	dec00204 	addi	sp,sp,8
  401358:	f800283a 	ret
  40135c:	0109c83a 	sub	r4,zero,r4
  401360:	04000044 	movi	r16,1
  401364:	000d883a 	mov	r6,zero
  401368:	283ff20e 	bge	r5,zero,401334 <__divsi3+0x1c>
  40136c:	014bc83a 	sub	r5,zero,r5
  401370:	8021003a 	cmpeq	r16,r16,zero
  401374:	003fef06 	br	401334 <__divsi3+0x1c>

00401378 <__modsi3>:
  401378:	deffff04 	addi	sp,sp,-4
  40137c:	dfc00015 	stw	ra,0(sp)
  401380:	01800044 	movi	r6,1
  401384:	2807883a 	mov	r3,r5
  401388:	20000416 	blt	r4,zero,40139c <__modsi3+0x24>
  40138c:	28000c16 	blt	r5,zero,4013c0 <__modsi3+0x48>
  401390:	dfc00017 	ldw	ra,0(sp)
  401394:	dec00104 	addi	sp,sp,4
  401398:	040129c1 	jmpi	40129c <udivmodsi4>
  40139c:	0109c83a 	sub	r4,zero,r4
  4013a0:	28000b16 	blt	r5,zero,4013d0 <__modsi3+0x58>
  4013a4:	180b883a 	mov	r5,r3
  4013a8:	01800044 	movi	r6,1
  4013ac:	040129c0 	call	40129c <udivmodsi4>
  4013b0:	0085c83a 	sub	r2,zero,r2
  4013b4:	dfc00017 	ldw	ra,0(sp)
  4013b8:	dec00104 	addi	sp,sp,4
  4013bc:	f800283a 	ret
  4013c0:	014bc83a 	sub	r5,zero,r5
  4013c4:	dfc00017 	ldw	ra,0(sp)
  4013c8:	dec00104 	addi	sp,sp,4
  4013cc:	040129c1 	jmpi	40129c <udivmodsi4>
  4013d0:	0147c83a 	sub	r3,zero,r5
  4013d4:	003ff306 	br	4013a4 <__modsi3+0x2c>

004013d8 <__udivsi3>:
  4013d8:	000d883a 	mov	r6,zero
  4013dc:	040129c1 	jmpi	40129c <udivmodsi4>

004013e0 <__umodsi3>:
  4013e0:	01800044 	movi	r6,1
  4013e4:	040129c1 	jmpi	40129c <udivmodsi4>

004013e8 <__mulsi3>:
  4013e8:	20000a26 	beq	r4,zero,401414 <__mulsi3+0x2c>
  4013ec:	0007883a 	mov	r3,zero
  4013f0:	2080004c 	andi	r2,r4,1
  4013f4:	1005003a 	cmpeq	r2,r2,zero
  4013f8:	2008d07a 	srli	r4,r4,1
  4013fc:	1000011e 	bne	r2,zero,401404 <__mulsi3+0x1c>
  401400:	1947883a 	add	r3,r3,r5
  401404:	294b883a 	add	r5,r5,r5
  401408:	203ff91e 	bne	r4,zero,4013f0 <__mulsi3+0x8>
  40140c:	1805883a 	mov	r2,r3
  401410:	f800283a 	ret
  401414:	0007883a 	mov	r3,zero
  401418:	1805883a 	mov	r2,r3
  40141c:	f800283a 	ret

00401420 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  401420:	00804034 	movhi	r2,256
  401424:	10801104 	addi	r2,r2,68
  401428:	10800017 	ldw	r2,0(r2)
  40142c:	00ffde84 	movi	r3,-134
  401430:	10001d26 	beq	r2,zero,4014a8 <alt_alarm_start+0x88>
  {
    if (alarm)
  401434:	00fffa84 	movi	r3,-22
  401438:	20001b26 	beq	r4,zero,4014a8 <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
  40143c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  401440:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  401444:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  401448:	00bfff84 	movi	r2,-2
  40144c:	3084703a 	and	r2,r6,r2
  401450:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  401454:	00804034 	movhi	r2,256
  401458:	10801204 	addi	r2,r2,72
  40145c:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  401460:	18800044 	addi	r2,r3,1
  401464:	2885883a 	add	r2,r5,r2
  401468:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  40146c:	10c0032e 	bgeu	r2,r3,40147c <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
  401470:	00800044 	movi	r2,1
  401474:	20800405 	stb	r2,16(r4)
  401478:	00000106 	br	401480 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
  40147c:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  401480:	00804034 	movhi	r2,256
  401484:	10800404 	addi	r2,r2,16
  entry->next     = list->next;
  401488:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  40148c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
  401490:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  401494:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
  401498:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  40149c:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4014a0:	3001703a 	wrctl	status,r6
  4014a4:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
  4014a8:	1805883a 	mov	r2,r3
  4014ac:	f800283a 	ret

004014b0 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  4014b0:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  4014b4:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
  4014b8:	00fffa84 	movi	r3,-22
  4014bc:	11002236 	bltu	r2,r4,401548 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4014c0:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4014c4:	027fff84 	movi	r9,-2
  4014c8:	5244703a 	and	r2,r10,r9
  4014cc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  4014d0:	200490fa 	slli	r2,r4,3
  4014d4:	00c04034 	movhi	r3,256
  4014d8:	18c01f04 	addi	r3,r3,124
  4014dc:	02004034 	movhi	r8,256
  4014e0:	42000d04 	addi	r8,r8,52
  4014e4:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
  4014e8:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
  4014ec:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  4014f0:	30000826 	beq	r6,zero,401514 <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4014f4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4014f8:	2244703a 	and	r2,r4,r9
  4014fc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  401500:	00c00044 	movi	r3,1
  401504:	19c6983a 	sll	r3,r3,r7
  401508:	40800017 	ldw	r2,0(r8)
  40150c:	10c4b03a 	or	r2,r2,r3
  401510:	00000706 	br	401530 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  401514:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  401518:	2244703a 	and	r2,r4,r9
  40151c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  401520:	00ffff84 	movi	r3,-2
  401524:	19c6183a 	rol	r3,r3,r7
  401528:	40800017 	ldw	r2,0(r8)
  40152c:	10c4703a 	and	r2,r2,r3
  401530:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  401534:	40800017 	ldw	r2,0(r8)
  401538:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  40153c:	2001703a 	wrctl	status,r4
  401540:	5001703a 	wrctl	status,r10
  401544:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
  401548:	1805883a 	mov	r2,r3
  40154c:	f800283a 	ret

00401550 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  401550:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  401554:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  401558:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  40155c:	04016900 	call	401690 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  401560:	040165c0 	call	40165c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  401564:	d1200e17 	ldw	r4,-32712(gp)
  401568:	d1600f17 	ldw	r5,-32708(gp)
  40156c:	d1a01017 	ldw	r6,-32704(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
  401570:	dfc00017 	ldw	ra,0(sp)
  401574:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
  401578:	04001f41 	jmpi	4001f4 <main>

0040157c <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40157c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  401580:	00bfff84 	movi	r2,-2
  401584:	2884703a 	and	r2,r5,r2
  401588:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  40158c:	20c00017 	ldw	r3,0(r4)
  401590:	20800117 	ldw	r2,4(r4)
  401594:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  401598:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  40159c:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
  4015a0:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
  4015a4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4015a8:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
  4015ac:	f800283a 	ret

004015b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4015b0:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  4015b4:	d0a01217 	ldw	r2,-32696(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4015b8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  4015bc:	d4200417 	ldw	r16,-32752(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  4015c0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4015c4:	dfc00215 	stw	ra,8(sp)
  4015c8:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  4015cc:	d0a01215 	stw	r2,-32696(gp)
  4015d0:	00001b06 	br	401640 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  4015d4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  4015d8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  4015dc:	10000326 	beq	r2,zero,4015ec <alt_tick+0x3c>
  4015e0:	d0a01217 	ldw	r2,-32696(gp)
  4015e4:	1000011e 	bne	r2,zero,4015ec <alt_tick+0x3c>
    {
      alarm->rollover = 0;
  4015e8:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  4015ec:	d0e01217 	ldw	r3,-32696(gp)
  4015f0:	80800217 	ldw	r2,8(r16)
  4015f4:	18801136 	bltu	r3,r2,40163c <alt_tick+0x8c>
  4015f8:	80800403 	ldbu	r2,16(r16)
  4015fc:	10000f1e 	bne	r2,zero,40163c <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
  401600:	81000517 	ldw	r4,20(r16)
  401604:	80800317 	ldw	r2,12(r16)
  401608:	103ee83a 	callr	r2
  40160c:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  401610:	1000031e 	bne	r2,zero,401620 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
  401614:	8009883a 	mov	r4,r16
  401618:	040157c0 	call	40157c <alt_alarm_stop>
  40161c:	00000706 	br	40163c <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
  401620:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  401624:	d0e01217 	ldw	r3,-32696(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  401628:	1105883a 	add	r2,r2,r4
  40162c:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  401630:	10c0022e 	bgeu	r2,r3,40163c <alt_tick+0x8c>
        {
          alarm->rollover = 1;
  401634:	00800044 	movi	r2,1
  401638:	80800405 	stb	r2,16(r16)
  40163c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  401640:	d0a00404 	addi	r2,gp,-32752
  401644:	80bfe31e 	bne	r16,r2,4015d4 <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  401648:	dfc00217 	ldw	ra,8(sp)
  40164c:	dc400117 	ldw	r17,4(sp)
  401650:	dc000017 	ldw	r16,0(sp)
  401654:	dec00304 	addi	sp,sp,12
  401658:	f800283a 	ret

0040165c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  40165c:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  401660:	000b883a 	mov	r5,zero
  401664:	01800084 	movi	r6,2
  401668:	01c0fa04 	movi	r7,1000
  40166c:	01080004 	movi	r4,8192
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  401670:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  401674:	04019480 	call	401948 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_CFI_FLASH_INIT ( ROM_0, rom_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    M2VDD_HX8347A_INIT ( M2VDD_HX8347A_0, m2vdd_hx8347a_0);
  401678:	d1200604 	addi	r4,gp,-32744
  40167c:	04019dc0 	call	4019dc <m2vdd_hx8347a_init>
    M2VDEC_INIT ( M2VDEC_0, m2vdec_0);
  401680:	d1200704 	addi	r4,gp,-32740
}
  401684:	dfc00017 	ldw	ra,0(sp)
  401688:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_CFI_FLASH_INIT ( ROM_0, rom_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    M2VDD_HX8347A_INIT ( M2VDD_HX8347A_0, m2vdd_hx8347a_0);
    M2VDEC_INIT ( M2VDEC_0, m2vdec_0);
  40168c:	0401a301 	jmpi	401a30 <m2vdec_init>

00401690 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  401690:	deffff04 	addi	sp,sp,-4
  401694:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  401698:	0401a340 	call	401a34 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  40169c:	00800044 	movi	r2,1
  4016a0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  4016a4:	dfc00017 	ldw	ra,0(sp)
  4016a8:	dec00104 	addi	sp,sp,4
  4016ac:	f800283a 	ret

004016b0 <altera_avalon_fifo_read_backpressure>:
}

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
  4016b0:	20800037 	ldwio	r2,0(r4)
  4016b4:	f800283a 	ret

004016b8 <altera_avalon_fifo_read_other_info>:
}

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
  4016b8:	20800137 	ldwio	r2,4(r4)
  4016bc:	f800283a 	ret

004016c0 <altera_avalon_fifo_read_level>:
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}
  4016c0:	20800037 	ldwio	r2,0(r4)
  4016c4:	f800283a 	ret

004016c8 <altera_avalon_fifo_read_event>:
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
  4016c8:	20800237 	ldwio	r2,8(r4)
}
  4016cc:	1144703a 	and	r2,r2,r5
  4016d0:	f800283a 	ret

004016d4 <altera_avalon_fifo_read_almostempty>:
}

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
  4016d4:	20800537 	ldwio	r2,20(r4)
  4016d8:	f800283a 	ret

004016dc <altera_avalon_fifo_read_almostfull>:
}

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
  4016dc:	20800437 	ldwio	r2,16(r4)
  4016e0:	f800283a 	ret

004016e4 <altera_avalon_fifo_read_ienable>:
}

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
  4016e4:	20800337 	ldwio	r2,12(r4)
}
  4016e8:	1144703a 	and	r2,r2,r5
  4016ec:	f800283a 	ret

004016f0 <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
  4016f0:	20800137 	ldwio	r2,4(r4)
}
  4016f4:	1144703a 	and	r2,r2,r5
  4016f8:	f800283a 	ret

004016fc <altera_avalon_fifo_read_fifo>:
    }
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  4016fc:	defffe04 	addi	sp,sp,-8
  401700:	dc000015 	stw	r16,0(sp)
  401704:	2021883a 	mov	r16,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  401708:	2809883a 	mov	r4,r5
  40170c:	01400084 	movi	r5,2
    }
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
  401710:	dfc00115 	stw	ra,4(sp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  401714:	04016f00 	call	4016f0 <altera_avalon_fifo_read_status>
  401718:	0007883a 	mov	r3,zero
  40171c:	1000011e 	bne	r2,zero,401724 <altera_avalon_fifo_read_fifo+0x28>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  401720:	80c00037 	ldwio	r3,0(r16)
    }
    return 0;
}
  401724:	1805883a 	mov	r2,r3
  401728:	dfc00117 	ldw	ra,4(sp)
  40172c:	dc000017 	ldw	r16,0(sp)
  401730:	dec00204 	addi	sp,sp,8
  401734:	f800283a 	ret

00401738 <altera_avalon_read_fifo>:
        return ALTERA_AVALON_FIFO_FULL;
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  401738:	defffc04 	addi	sp,sp,-16
  40173c:	dc800215 	stw	r18,8(sp)
  401740:	dc000015 	stw	r16,0(sp)
  401744:	2025883a 	mov	r18,r4
  401748:	2821883a 	mov	r16,r5
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  40174c:	2809883a 	mov	r4,r5
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
  401750:	30000015 	stw	zero,0(r6)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  401754:	01400084 	movi	r5,2
        return ALTERA_AVALON_FIFO_FULL;
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
  401758:	dc400115 	stw	r17,4(sp)
  40175c:	dfc00315 	stw	ra,12(sp)
  401760:	3023883a 	mov	r17,r6
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  401764:	04016f00 	call	4016f0 <altera_avalon_fifo_read_status>
  401768:	0007883a 	mov	r3,zero
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  40176c:	8009883a 	mov	r4,r16
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
  401770:	1000041e 	bne	r2,zero,401784 <altera_avalon_read_fifo+0x4c>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
  401774:	04016c00 	call	4016c0 <altera_avalon_fifo_read_level>
  401778:	1007883a 	mov	r3,r2
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
  40177c:	90800037 	ldwio	r2,0(r18)
  401780:	88800015 	stw	r2,0(r17)
    
    }
    return return_val;
}
  401784:	1805883a 	mov	r2,r3
  401788:	dfc00317 	ldw	ra,12(sp)
  40178c:	dc800217 	ldw	r18,8(sp)
  401790:	dc400117 	ldw	r17,4(sp)
  401794:	dc000017 	ldw	r16,0(sp)
  401798:	dec00404 	addi	sp,sp,16
  40179c:	f800283a 	ret

004017a0 <altera_avalon_fifo_write_other_info>:
}

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  4017a0:	defffd04 	addi	sp,sp,-12
  4017a4:	dc400115 	stw	r17,4(sp)
  4017a8:	2023883a 	mov	r17,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  4017ac:	2809883a 	mov	r4,r5
  4017b0:	01400044 	movi	r5,1
}

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
  4017b4:	dc000015 	stw	r16,0(sp)
  4017b8:	dfc00215 	stw	ra,8(sp)
  4017bc:	3021883a 	mov	r16,r6
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  4017c0:	04016f00 	call	4016f0 <altera_avalon_fifo_read_status>
  4017c4:	00ffff04 	movi	r3,-4
  4017c8:	1000021e 	bne	r2,zero,4017d4 <altera_avalon_fifo_write_other_info+0x34>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
  4017cc:	8c000135 	stwio	r16,4(r17)
  4017d0:	0007883a 	mov	r3,zero
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    }
}
  4017d4:	1805883a 	mov	r2,r3
  4017d8:	dfc00217 	ldw	ra,8(sp)
  4017dc:	dc400117 	ldw	r17,4(sp)
  4017e0:	dc000017 	ldw	r16,0(sp)
  4017e4:	dec00304 	addi	sp,sp,12
  4017e8:	f800283a 	ret

004017ec <altera_avalon_fifo_write_fifo>:
}

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  4017ec:	defffd04 	addi	sp,sp,-12
  4017f0:	dc400115 	stw	r17,4(sp)
  4017f4:	2023883a 	mov	r17,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  4017f8:	2809883a 	mov	r4,r5
  4017fc:	01400044 	movi	r5,1
}

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
  401800:	dc000015 	stw	r16,0(sp)
  401804:	dfc00215 	stw	ra,8(sp)
  401808:	3021883a 	mov	r16,r6
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
  40180c:	04016f00 	call	4016f0 <altera_avalon_fifo_read_status>
  401810:	00ffff04 	movi	r3,-4
  401814:	1000021e 	bne	r2,zero,401820 <altera_avalon_fifo_write_fifo+0x34>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
  401818:	8c000035 	stwio	r16,0(r17)
  40181c:	0007883a 	mov	r3,zero
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    }
}
  401820:	1805883a 	mov	r2,r3
  401824:	dfc00217 	ldw	ra,8(sp)
  401828:	dc400117 	ldw	r17,4(sp)
  40182c:	dc000017 	ldw	r16,0(sp)
  401830:	dec00304 	addi	sp,sp,12
  401834:	f800283a 	ret

00401838 <altera_avalon_fifo_write_almostempty>:
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
  401838:	20800504 	addi	r2,r4,20
  40183c:	21400535 	stwio	r5,20(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
  401840:	10800037 	ldwio	r2,0(r2)
  401844:	0007883a 	mov	r3,zero
  401848:	11400126 	beq	r2,r5,401850 <altera_avalon_fifo_write_almostempty+0x18>
  40184c:	00ffff44 	movi	r3,-3
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}
  401850:	1805883a 	mov	r2,r3
  401854:	f800283a 	ret

00401858 <altera_avalon_fifo_write_almostfull>:
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
  401858:	20800404 	addi	r2,r4,16
  40185c:	21400435 	stwio	r5,16(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
  401860:	10800037 	ldwio	r2,0(r2)
  401864:	0007883a 	mov	r3,zero
  401868:	11400126 	beq	r2,r5,401870 <altera_avalon_fifo_write_almostfull+0x18>
  40186c:	00ffff44 	movi	r3,-3
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}
  401870:	1805883a 	mov	r2,r3
  401874:	f800283a 	ret

00401878 <altera_avalon_fifo_write_ienable>:
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
  401878:	20800304 	addi	r2,r4,12
  40187c:	21400335 	stwio	r5,12(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
  401880:	10800037 	ldwio	r2,0(r2)
  401884:	0007883a 	mov	r3,zero
  401888:	11400126 	beq	r2,r5,401890 <altera_avalon_fifo_write_ienable+0x18>
  40188c:	00ffff84 	movi	r3,-2
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
}
  401890:	1805883a 	mov	r2,r3
  401894:	f800283a 	ret

00401898 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
  401898:	20800204 	addi	r2,r4,8
  40189c:	21400235 	stwio	r5,8(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
  4018a0:	10800037 	ldwio	r2,0(r2)
  4018a4:	1144703a 	and	r2,r2,r5
  4018a8:	1004c03a 	cmpne	r2,r2,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
  4018ac:	0085c83a 	sub	r2,zero,r2
  4018b0:	f800283a 	ret

004018b4 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  4018b4:	defffb04 	addi	sp,sp,-20
  4018b8:	dc000015 	stw	r16,0(sp)
  4018bc:	2821883a 	mov	r16,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  4018c0:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
  4018c4:	dcc00315 	stw	r19,12(sp)
  4018c8:	dc800215 	stw	r18,8(sp)
  4018cc:	dc400115 	stw	r17,4(sp)
  4018d0:	dfc00415 	stw	ra,16(sp)
  4018d4:	2023883a 	mov	r17,r4
  4018d8:	3027883a 	mov	r19,r6
  4018dc:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  4018e0:	04018980 	call	401898 <altera_avalon_fifo_clear_event>
  4018e4:	00ffffc4 	movi	r3,-1
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  4018e8:	800b883a 	mov	r5,r16
  4018ec:	8809883a 	mov	r4,r17


int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
  4018f0:	10000d1e 	bne	r2,zero,401928 <altera_avalon_fifo_init+0x74>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  4018f4:	04018780 	call	401878 <altera_avalon_fifo_write_ienable>
  4018f8:	00ffff84 	movi	r3,-2
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  4018fc:	900b883a 	mov	r5,r18
  401900:	8809883a 	mov	r4,r17
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
  401904:	1000081e 	bne	r2,zero,401928 <altera_avalon_fifo_init+0x74>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  401908:	04018580 	call	401858 <altera_avalon_fifo_write_almostfull>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  40190c:	8809883a 	mov	r4,r17
  401910:	980b883a 	mov	r5,r19
    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
  401914:	1000031e 	bne	r2,zero,401924 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
  401918:	04018380 	call	401838 <altera_avalon_fifo_write_almostempty>
  40191c:	0007883a 	mov	r3,zero
  401920:	10000126 	beq	r2,zero,401928 <altera_avalon_fifo_init+0x74>
  401924:	00ffff44 	movi	r3,-3
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
  401928:	1805883a 	mov	r2,r3
  40192c:	dfc00417 	ldw	ra,16(sp)
  401930:	dcc00317 	ldw	r19,12(sp)
  401934:	dc800217 	ldw	r18,8(sp)
  401938:	dc400117 	ldw	r17,4(sp)
  40193c:	dc000017 	ldw	r16,0(sp)
  401940:	dec00504 	addi	sp,sp,20
  401944:	f800283a 	ret

00401948 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  401948:	00c04034 	movhi	r3,256
  40194c:	18c01104 	addi	r3,r3,68
  401950:	18800017 	ldw	r2,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  401954:	200b883a 	mov	r5,r4
  401958:	1000011e 	bne	r2,zero,401960 <alt_avalon_timer_sc_init+0x18>
  {
    _alt_tick_rate = nticks;
  40195c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  401960:	008001c4 	movi	r2,7
  401964:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  401968:	3009883a 	mov	r4,r6
  40196c:	01801034 	movhi	r6,64
  401970:	31865e04 	addi	r6,r6,6520
  401974:	04014b01 	jmpi	4014b0 <alt_irq_register>

00401978 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  401978:	defffe04 	addi	sp,sp,-8
  40197c:	dfc00115 	stw	ra,4(sp)
  401980:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  401984:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  401988:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40198c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  401990:	00bfff84 	movi	r2,-2
  401994:	8084703a 	and	r2,r16,r2
  401998:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  40199c:	04015b00 	call	4015b0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  4019a0:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  4019a4:	dfc00117 	ldw	ra,4(sp)
  4019a8:	dc000017 	ldw	r16,0(sp)
  4019ac:	dec00204 	addi	sp,sp,8
  4019b0:	f800283a 	ret

004019b4 <m2vdd_hx8347a_write_reg>:
	}
}

void m2vdd_hx8347a_write_reg(alt_u32 base, alt_u8 index, alt_u16 value)
{
	while(IORD_M2VDD_HX8347A_CONTROL(base) & 2);
  4019b4:	20800037 	ldwio	r2,0(r4)
  4019b8:	1080008c 	andi	r2,r2,2
  4019bc:	103ffd1e 	bne	r2,zero,4019b4 <m2vdd_hx8347a_write_reg>
	IOWR_M2VDD_HX8347A_CONTROL(base, index |
  4019c0:	28803fcc 	andi	r2,r5,255
  4019c4:	109000b4 	orhi	r2,r2,16386
  4019c8:	20800035 	stwio	r2,0(r4)
		M2VDD_HX8347A_CONTROL_WRITE_MSK |
		M2VDD_HX8347A_CONTROL_RESET_MSK);
	IOWR_M2VDD_HX8347A_CONTROL(base, value |
  4019cc:	30bfffcc 	andi	r2,r6,65535
  4019d0:	109000f4 	orhi	r2,r2,16387
  4019d4:	20800035 	stwio	r2,0(r4)
		M2VDD_HX8347A_CONTROL_WRITE_MSK |
		M2VDD_HX8347A_CONTROL_RESET_MSK |
		M2VDD_HX8347A_CONTROL_RS_MSK);
}
  4019d8:	f800283a 	ret

004019dc <m2vdd_hx8347a_init>:
//--------------------------------------------------------------------------------
// Initialize LCD
//
void m2vdd_hx8347a_init(m2vdd_hx8347a_state* sp)
{
	void* base = sp->base;
  4019dc:	21000017 	ldw	r4,0(r4)

	// Soft reset
	IOWR_M2VDD_HX8347A_CONTROL(base, M2VDD_HX8347A_CONTROL_SRESET_MSK);
  4019e0:	00820034 	movhi	r2,2048
  4019e4:	20800035 	stwio	r2,0(r4)
	delay(1);
	IOWR_M2VDD_HX8347A_CONTROL(base, 0);
  4019e8:	20000035 	stwio	zero,0(r4)
	delay(1);

	// Assert LCD's reset
	IOWR_M2VDD_HX8347A_CONTROL(base, M2VDD_HX8347A_CONTROL_WRITE_MSK);
  4019ec:	00900034 	movhi	r2,16384
  4019f0:	20800035 	stwio	r2,0(r4)
  4019f4:	01401034 	movhi	r5,64
  4019f8:	29468f04 	addi	r5,r5,6716
  4019fc:	01803fc4 	movi	r6,255
	};

	const unsigned char* p = codes;
	for(;; p += 2)
	{
		if(p[0] == 0xff)
  401a00:	28800003 	ldbu	r2,0(r5)
			if(p[1] == 0) break;
			delay(p[1]);
		}
		else
		{
			IOWR_M2VDD_HX8347A_CONTROL(base, p[0] |
  401a04:	10d000b4 	orhi	r3,r2,16386
	};

	const unsigned char* p = codes;
	for(;; p += 2)
	{
		if(p[0] == 0xff)
  401a08:	1180031e 	bne	r2,r6,401a18 <m2vdd_hx8347a_init+0x3c>
		{
			if(p[1] == 0) break;
  401a0c:	28800043 	ldbu	r2,1(r5)
  401a10:	1000051e 	bne	r2,zero,401a28 <m2vdd_hx8347a_init+0x4c>
  401a14:	f800283a 	ret
			delay(p[1]);
		}
		else
		{
			IOWR_M2VDD_HX8347A_CONTROL(base, p[0] |
  401a18:	20c00035 	stwio	r3,0(r4)
				M2VDD_HX8347A_CONTROL_WRITE_MSK |
				M2VDD_HX8347A_CONTROL_RESET_MSK);
			IOWR_M2VDD_HX8347A_CONTROL(base, p[1] |
  401a1c:	28800043 	ldbu	r2,1(r5)
  401a20:	109000f4 	orhi	r2,r2,16387
  401a24:	20800035 	stwio	r2,0(r4)

	0xff,   0, // END
	};

	const unsigned char* p = codes;
	for(;; p += 2)
  401a28:	29400084 	addi	r5,r5,2
  401a2c:	003ff406 	br	401a00 <m2vdd_hx8347a_init+0x24>

00401a30 <m2vdec_init>:
//--------------------------------------------------------------------------------
// Initialize MPEG2 Video Decoder
//
void m2vdec_init(m2vdec_state* sp)
{
}
  401a30:	f800283a 	ret

00401a34 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  401a34:	000170fa 	wrctl	ienable,zero
}
  401a38:	f800283a 	ret
