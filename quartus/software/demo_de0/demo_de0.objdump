
demo_de0.elf:     file format elf32-littlenios2
demo_de0.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0f0001cc

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x0000001c memsz 0x00000178 flags rw-
    LOAD off    0x00002000 vaddr 0x0f000000 paddr 0x0f000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x00002020 vaddr 0x0f000020 paddr 0x0f000020 align 2**12
         filesz 0x00001b78 memsz 0x00001b78 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  0f000000  0f000000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001ac  0f000020  0f000020  00002020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001928  0f0001cc  0f0001cc  000021cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a4  0f001af4  0f001af4  00003af4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000001c  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  0000001c  0000001c  0000101c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000002a0  00000000  00000000  00003bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000063b  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002f39  00000000  00000000  0000449b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a5  00000000  00000000  000073d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000331d  00000000  00000000  00008779  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000594  00000000  00000000  0000ba98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000ca8  00000000  00000000  0000c02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013ba  00000000  00000000  0000ccd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000e090  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000f851  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000f854  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000f860  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000f861  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0000f862  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0000f866  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0000f86a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0000f86e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0000f872  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0000f876  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000c  00000000  00000000  0000f87a  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000029  00000000  00000000  0000f886  2**0
                  CONTENTS, READONLY
 29 .jdi          00003b74  00000000  00000000  0000f8af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
0f000000 l    d  .entry	00000000 .entry
0f000020 l    d  .exceptions	00000000 .exceptions
0f0001cc l    d  .text	00000000 .text
0f001af4 l    d  .rodata	00000000 .rodata
00000000 l    d  .rwdata	00000000 .rwdata
0000001c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
0f000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 demo_de0.c
0f0000ec l     F .exceptions	00000014 frame_rate_handler
0f000100 l     F .exceptions	00000070 m2vdec_irq_handler
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 diskio.c
00000020 l     O .bss	00000004 Timer1
00000024 l     O .bss	00000004 Timer2
00000004 l     O .rwdata	00000001 Stat
00000048 l     O .bss	00000018 a.1590
0f0003dc l     F .text	00000038 xchg_spi
0f000414 l     F .text	0000001c deselect
0f000430 l     F .text	00000074 select
0f0004a4 l     F .text	00000124 send_cmd
00000028 l     O .bss	00000001 CardType
00000000 l    df *ABS*	00000000 pff.c
0f0008b8 l     F .text	0000004c clust2sect
0000002c l     O .bss	00000004 FatFs
0f000904 l     F .text	0000008c dir_rewind
0f000990 l     F .text	00000100 check_fs
0f000a90 l     F .text	000000d8 get_fat
00000000 l    df *ABS*	00000000 lib2-divmod.c
0f0012f4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_fifo_util.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0f0019d4 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 m2vdd_hx8347a.c
0f001af4 l     O .rodata	000000a2 codes.1404
00000000 l    df *ABS*	00000000 m2vdec.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
0f0015a8 g     F .text	0000002c alt_main
00000078 g     O .bss	00000100 alt_irq
0f0018b4 g     F .text	00000020 altera_avalon_fifo_write_almostfull
0f0005c8 g     F .text	0000011c disk_readp
0f001a10 g     F .text	00000028 m2vdd_hx8347a_write_reg
0f001a38 g     F .text	000000b0 m2vdd_hx8347a_init
00000018 g     O .rwdata	00000004 m2vdec_0
0f001910 g     F .text	00000094 altera_avalon_fifo_init
0f001848 g     F .text	0000004c altera_avalon_fifo_write_fifo
00000000 g     O .rwdata	00000004 test_1mb_m2v
0f001ae8 g     F .text	00000004 m2vdec_init
0f000000 g     F .entry	00000000 __reset
0f00170c g     F .text	00000008 altera_avalon_fifo_read_backpressure
00000038 g     O .bss	00000004 alt_argv
00008000 g       *ABS*	00000000 _gp
0f0018f4 g     F .text	0000001c altera_avalon_fifo_clear_event
0f0006e4 g     F .text	000001d4 disk_initialize
0f001430 g     F .text	00000008 __udivsi3
0f001508 g     F .text	000000a0 alt_irq_register
00000178 g       *ABS*	00000000 __bss_end
0f001608 g     F .text	000000ac alt_tick
00000000 g       *ABS*	00000000 __alt_mem_ram_0
0f0015d4 g     F .text	00000034 alt_alarm_stop
00000030 g     O .bss	00000004 alt_irq_active
0f000170 g     F .exceptions	0000005c alt_irq_handler
0f0018d4 g     F .text	00000020 altera_avalon_fifo_write_ienable
0f001730 g     F .text	00000008 altera_avalon_fifo_read_almostempty
0f001438 g     F .text	00000008 __umodsi3
0f0003c0 g     F .text	0000001c disk_inittimer
00000178 g       *ABS*	00000000 end
0f001724 g     F .text	0000000c altera_avalon_fifo_read_event
00002000 g       *ABS*	00000000 __alt_stack_pointer
0f0019a4 g     F .text	00000030 alt_avalon_timer_sc_init
0f001758 g     F .text	0000003c altera_avalon_fifo_read_fifo
0f000378 g     F .text	00000048 disk_timerproc
0f0001cc g     F .text	00000038 _start
00000040 g     O .bss	00000004 _alt_tick_rate
0000001c g     O .bss	00000004 fr_flags
00000044 g     O .bss	00000004 _alt_nticks
0f0016b4 g     F .text	00000038 alt_sys_init
0f001440 g     F .text	00000038 __mulsi3
00000178 g       *ABS*	00000000 __alt_stack_base
0f00174c g     F .text	0000000c altera_avalon_fifo_read_status
0f001714 g     F .text	00000008 altera_avalon_fifo_read_other_info
0000001c g       *ABS*	00000000 __bss_start
0f000204 g     F .text	00000174 main
0000003c g     O .bss	00000004 alt_envp
0f00171c g     F .text	00000008 altera_avalon_fifo_read_level
0f001370 g     F .text	00000060 __divsi3
0f000b68 g     F .text	00000188 pf_read
00000060 g     O .bss	00000018 al_frate
0f0016ec g     F .text	00000020 alt_irq_init
00000034 g     O .bss	00000004 alt_argc
0f000cf0 g     F .text	00000358 pf_open
0f000020 g       .exceptions	00000000 alt_irq_entry
00000014 g     O .rwdata	00000004 m2vdd_hx8347a_0
0f0017fc g     F .text	0000004c altera_avalon_fifo_write_other_info
0000001c g       *ABS*	00000000 _edata
00000178 g       *ABS*	00000000 _end
0f001aec g     F .text	00000008 altera_nios2_qsys_irq_init
0f000000 g       .entry	00000000 exit
0f0013d0 g     F .text	00000060 __modsi3
0f001740 g     F .text	0000000c altera_avalon_fifo_read_ienable
00002000 g       *ABS*	00000000 __alt_data_end
0f000020 g     F .exceptions	00000000 alt_exception
0f000000 g       *ABS*	00000000 __alt_mem_rom_0
0f000000 g       .entry	00000000 _exit
0f001478 g     F .text	00000090 alt_alarm_start
0f001738 g     F .text	00000008 altera_avalon_fifo_read_almostfull
0f001794 g     F .text	00000068 altera_avalon_read_fifo
00000008 g     O .rwdata	00000004 alt_priority_mask
0f001894 g     F .text	00000020 altera_avalon_fifo_write_almostempty
0000000c g     O .rwdata	00000008 alt_alarm_list
0f001048 g     F .text	000002ac pf_mount



Disassembly of section .exceptions:

0f000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 f000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 f000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 f000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 f00002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 f000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 f000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 f000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 f00003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 f000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 f000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 f000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 f00004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 f000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 f000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 f000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 f00005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 f000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 f000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 f000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 f00006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 f000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 f000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 f000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 f00007c:	10000326 	beq	r2,zero,f00008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 f000080:	20000226 	beq	r4,zero,f00008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 f000084:	f0001700 	call	f000170 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 f000088:	00000306 	br	f000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 f00008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 f000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 f000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 f000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 f00009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 f0000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 f0000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 f0000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 f0000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 f0000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 f0000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 f0000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 f0000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 f0000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 f0000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 f0000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 f0000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 f0000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 f0000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 f0000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 f0000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 f0000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 f0000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 f0000e8:	ef80083a 	eret

0f0000ec <frame_rate_handler>:
	}
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
 f0000ec:	20c00017 	ldw	r3,0(r4)
#ifdef M2V_FLASH_BASE
	return 0;
#else
	return (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & (1 << 8)) ? 1000 : 33;
#endif
}
 f0000f0:	0005883a 	mov	r2,zero
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
 f0000f4:	18c00094 	ori	r3,r3,2
 f0000f8:	20c00015 	stw	r3,0(r4)
#ifdef M2V_FLASH_BASE
	return 0;
#else
	return (IORD_ALTERA_AVALON_PIO_DATA(PIO_0_BASE) & (1 << 8)) ? 1000 : 33;
#endif
}
 f0000fc:	f800283a 	ret

0f000100 <m2vdec_irq_handler>:

	return 0;
}

static void m2vdec_irq_handler(void* context, alt_u32 id)
{
 f000100:	00840034 	movhi	r2,4096
 f000104:	10818004 	addi	r2,r2,1536
 f000108:	10800037 	ldwio	r2,0(r2)
 f00010c:	1080040c 	andi	r2,r2,16
 f000110:	10000426 	beq	r2,zero,f000124 <m2vdec_irq_handler+0x24>
	if(IORD_M2VDEC_STATUS(M2VDEC_0_BASE) & M2VDEC_STATUS_IRQ_PIC_MSK)
	{
		//*((volatile int*)context) |= 1;
		*((volatile int*)context) |= 3;
 f000114:	20800017 	ldw	r2,0(r4)
 f000118:	108000d4 	ori	r2,r2,3
 f00011c:	20800015 	stw	r2,0(r4)
 f000120:	00000e06 	br	f00015c <m2vdec_irq_handler+0x5c>
	}
	else
	{
		alt_u32 vinfo = IORD_M2VDEC_VIDEO(M2VDEC_0_BASE);
 f000124:	00840034 	movhi	r2,4096
 f000128:	10818104 	addi	r2,r2,1540
 f00012c:	10c00037 	ldwio	r3,0(r2)
		alt_u32 wd = ((vinfo & M2VDEC_VIDEO_WIDTH_MSK) >> M2VDEC_VIDEO_WIDTH_OFST) - 1;
		alt_u32 ht = ((vinfo & M2VDEC_VIDEO_HEIGHT_MSK) >> M2VDEC_VIDEO_HEIGHT_OFST) - 1;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_VIDEOWD_MSK | wd);
 f000130:	01040034 	movhi	r4,4096
 f000134:	2101c004 	addi	r4,r4,1792
 f000138:	188fffcc 	andi	r2,r3,16383
 f00013c:	10bfffc4 	addi	r2,r2,-1
 f000140:	10880034 	orhi	r2,r2,8192
 f000144:	20800035 	stwio	r2,0(r4)
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_VIDEOHT_MSK | ht);
 f000148:	1806913a 	slli	r3,r3,4
 f00014c:	1806d4ba 	srli	r3,r3,18
 f000150:	18ffffc4 	addi	r3,r3,-1
 f000154:	18c40034 	orhi	r3,r3,4096
 f000158:	20c00035 	stwio	r3,0(r4)
	}
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
 f00015c:	00c00604 	movi	r3,24
 f000160:	00840034 	movhi	r2,4096
 f000164:	10818004 	addi	r2,r2,1536
 f000168:	10c00035 	stwio	r3,0(r2)
}
 f00016c:	f800283a 	ret

0f000170 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 f000170:	deffff04 	addi	sp,sp,-4
 f000174:	dfc00015 	stw	ra,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 f000178:	0009313a 	rdctl	r4,ipending
 f00017c:	00c00044 	movi	r3,1
 f000180:	000b883a 	mov	r5,zero
 f000184:	01800034 	movhi	r6,0
 f000188:	31801e04 	addi	r6,r6,120
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 f00018c:	20c4703a 	and	r2,r4,r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 f000190:	18c7883a 	add	r3,r3,r3
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 f000194:	10000726 	beq	r2,zero,f0001b4 <alt_irq_handler+0x44>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 f000198:	31000117 	ldw	r4,4(r6)
 f00019c:	30800017 	ldw	r2,0(r6)
 f0001a0:	103ee83a 	callr	r2
 f0001a4:	0005313a 	rdctl	r2,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 f0001a8:	10000526 	beq	r2,zero,f0001c0 <alt_irq_handler+0x50>
 f0001ac:	1009883a 	mov	r4,r2
 f0001b0:	003ff206 	br	f00017c <alt_irq_handler+0xc>
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 f0001b4:	29400044 	addi	r5,r5,1
 f0001b8:	31800204 	addi	r6,r6,8
 f0001bc:	003ff306 	br	f00018c <alt_irq_handler+0x1c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 f0001c0:	dfc00017 	ldw	ra,0(sp)
 f0001c4:	dec00104 	addi	sp,sp,4
 f0001c8:	f800283a 	ret

Disassembly of section .text:

0f0001cc <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 f0001cc:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
 f0001d0:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 f0001d4:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 f0001d8:	d6a00014 	ori	gp,gp,32768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 f0001dc:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 f0001e0:	10800714 	ori	r2,r2,28

    movhi r3, %hi(__bss_end)
 f0001e4:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 f0001e8:	18c05e14 	ori	r3,r3,376

    beq r2, r3, 1f
 f0001ec:	10c00326 	beq	r2,r3,f0001fc <_start+0x30>

0:
    stw zero, (r2)
 f0001f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 f0001f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 f0001f8:	10fffd36 	bltu	r2,r3,f0001f0 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 f0001fc:	f0015a80 	call	f0015a8 <alt_main>

0f000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 f000200:	003fff06 	br	f000200 <alt_after_alt_main>

0f000204 <main>:
	while(alt_nticks() < end);
#endif
}

int main()
{ 
 f000204:	defffd04 	addi	sp,sp,-12
	FATFS fs;
	FRESULT res;
	alt_u32 buf[512/4];

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E0);
 f000208:	00c03804 	movi	r3,224
 f00020c:	00840034 	movhi	r2,4096
 f000210:	10808004 	addi	r2,r2,512
	while(alt_nticks() < end);
#endif
}

int main()
{ 
 f000214:	dfc00215 	stw	ra,8(sp)
 f000218:	dc400115 	stw	r17,4(sp)
 f00021c:	dc000015 	stw	r16,0(sp)
	FATFS fs;
	FRESULT res;
	alt_u32 buf[512/4];

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E0);
 f000220:	10c00035 	stwio	r3,0(r2)

	if((res = pf_open("test.m2v")) != FR_OK) while(1);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E2);
#endif

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_SRST_MSK);
 f000224:	00c02004 	movi	r3,128
 f000228:	10810004 	addi	r2,r2,1024
 f00022c:	10c00035 	stwio	r3,0(r2)

	{
		// Clear display with black (0x0000)
		int pixels;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, 0x22 |
 f000230:	00c40034 	movhi	r3,4096
 f000234:	18c1c004 	addi	r3,r3,1792
 f000238:	009000b4 	movhi	r2,16386
 f00023c:	10800884 	addi	r2,r2,34
 f000240:	18800035 	stwio	r2,0(r3)
 f000244:	0009883a 	mov	r4,zero
 f000248:	019000f4 	movhi	r6,16387
 f00024c:	01400c84 	movi	r5,50
		for(pixels = 0; pixels < 50; pixels++)
#else
		for(pixels = 0; pixels < 320*240; pixels++)
#endif
		{
    		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE,
 f000250:	19800035 	stwio	r6,0(r3)
    			M2VDD_HX8347A_CONTROL_WRITE_MSK |
    			M2VDD_HX8347A_CONTROL_RESET_MSK |
    			M2VDD_HX8347A_CONTROL_RS_MSK);
    		while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 2);
 f000254:	18800037 	ldwio	r2,0(r3)
 f000258:	1080008c 	andi	r2,r2,2
 f00025c:	103ffd1e 	bne	r2,zero,f000254 <main+0x50>
		int pixels;
		IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, 0x22 |
			M2VDD_HX8347A_CONTROL_WRITE_MSK |
			M2VDD_HX8347A_CONTROL_RESET_MSK);
#ifdef M2V_FLASH_BASE
		for(pixels = 0; pixels < 50; pixels++)
 f000260:	21000044 	addi	r4,r4,1
 f000264:	217ffa1e 	bne	r4,r5,f000250 <main+0x4c>
    			M2VDD_HX8347A_CONTROL_RS_MSK);
    		while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 2);
		}
	}

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
 f000268:	04440034 	movhi	r17,4096
 f00026c:	8c418004 	addi	r17,r17,1536
 f000270:	88000035 	stwio	zero,0(r17)
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);
 f000274:	04040034 	movhi	r16,4096
 f000278:	84008004 	addi	r16,r16,512
 f00027c:	008038c4 	movi	r2,227
 f000280:	80800035 	stwio	r2,0(r16)

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
 f000284:	01000144 	movi	r4,5
 f000288:	d1600704 	addi	r5,gp,-32740
 f00028c:	0183c034 	movhi	r6,3840
 f000290:	31804004 	addi	r6,r6,256
	}

	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
 f000294:	d0200715 	stw	zero,-32740(gp)
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
 f000298:	f0015080 	call	f001508 <alt_irq_register>
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
 f00029c:	d0a00717 	ldw	r2,-32740(gp)
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
 f0002a0:	01000034 	movhi	r4,0
 f0002a4:	21001804 	addi	r4,r4,96
 f0002a8:	000b883a 	mov	r5,zero
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
 f0002ac:	10800094 	ori	r2,r2,2
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
 f0002b0:	0183c034 	movhi	r6,3840
 f0002b4:	31803b04 	addi	r6,r6,236
 f0002b8:	d1e00704 	addi	r7,gp,-32740
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_IRQ_SEQ_MSK | M2VDEC_STATUS_IRQ_PIC_MSK);
}

static alt_u32 frame_rate_handler(void* context)
{
	*((volatile int*)context) |= 2;
 f0002bc:	d0a00715 	stw	r2,-32740(gp)
	IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, 0);
	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x00E3);

	fr_flags = 0;
	alt_irq_register(M2VDEC_0_IRQ, (void*)&fr_flags, m2vdec_irq_handler);
	if(alt_alarm_start(&al_frate, frame_rate_handler((void*)&fr_flags), frame_rate_handler, (void*)&fr_flags) < 0)
 f0002c0:	f0014780 	call	f001478 <alt_alarm_start>
 f0002c4:	1000010e 	bge	r2,zero,f0002cc <main+0xc8>
 f0002c8:	003fff06 	br	f0002c8 <main+0xc4>
	{
		while(1);
	}

	if(altera_avalon_fifo_init(FIFO_0_IN_CSR_BASE, 0, 4, FIFO_0_IN_FIFO_DEPTH - 4) != ALTERA_AVALON_FIFO_OK)
 f0002cc:	01040034 	movhi	r4,4096
 f0002d0:	21014804 	addi	r4,r4,1312
 f0002d4:	000b883a 	mov	r5,zero
 f0002d8:	01800104 	movi	r6,4
 f0002dc:	01c03f04 	movi	r7,252
 f0002e0:	f0019100 	call	f001910 <altera_avalon_fifo_init>
 f0002e4:	10000126 	beq	r2,zero,f0002ec <main+0xe8>
 f0002e8:	003fff06 	br	f0002e8 <main+0xe4>
	{
		while(1);
	}

	IOWR_32DIRECT(HEXDISP_0_BASE, 0, 0x0000);
 f0002ec:	80000035 	stwio	zero,0(r16)
 f0002f0:	801b883a 	mov	r13,r16
 f0002f4:	8819883a 	mov	r12,r17
 f0002f8:	000b883a 	mov	r5,zero
 f0002fc:	0103c434 	movhi	r4,3856
 f000300:	02c40034 	movhi	r11,4096
 f000304:	5ac14904 	addi	r11,r11,1316
 f000308:	02840034 	movhi	r10,4096
 f00030c:	52814004 	addi	r10,r10,1280
 f000310:	024000c4 	movi	r9,3
 f000314:	02040034 	movhi	r8,4096
 f000318:	4201c004 	addi	r8,r8,1792
 f00031c:	01e00034 	movhi	r7,32768
 f000320:	01800804 	movi	r6,32
 f000324:	00000d06 	br	f00035c <main+0x158>
			p = buf;
		}//-*/
#endif
		while(IORD_ALTERA_AVALON_FIFO_STATUS(FIFO_0_IN_CSR_BASE) & ALTERA_AVALON_FIFO_STATUS_F_MSK)
		{
			if(fr_flags == 3)
 f000328:	d0a00717 	ldw	r2,-32740(gp)
 f00032c:	12400b1e 	bne	r2,r9,f00035c <main+0x158>
			{
				// Refresh display
				IOWR_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE, M2VDD_HX8347A_CONTROL_START_MSK);
 f000330:	41c00035 	stwio	r7,0(r8)
 f000334:	00c40034 	movhi	r3,4096
 f000338:	18c1c004 	addi	r3,r3,1792
				while(IORD_M2VDD_HX8347A_CONTROL(M2VDD_HX8347A_0_BASE) & 1);
 f00033c:	18800037 	ldwio	r2,0(r3)
 f000340:	1080004c 	andi	r2,r2,1
 f000344:	103ffd1e 	bne	r2,zero,f00033c <main+0x138>
					++stop;
				}
#endif

				fr_flags = 0;
				IOWR_32DIRECT(HEXDISP_0_BASE, 0, ++frames);
 f000348:	29400044 	addi	r5,r5,1
 f00034c:	28bfffcc 	andi	r2,r5,65535
				{
					++stop;
				}
#endif

				fr_flags = 0;
 f000350:	d0200715 	stw	zero,-32740(gp)
				IOWR_32DIRECT(HEXDISP_0_BASE, 0, ++frames);
 f000354:	68800035 	stwio	r2,0(r13)

				// Resume decoding
				IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_PAUSE_MSK);
 f000358:	61800035 	stwio	r6,0(r12)
				while(1);
			}
			p = buf;
		}//-*/
#endif
		while(IORD_ALTERA_AVALON_FIFO_STATUS(FIFO_0_IN_CSR_BASE) & ALTERA_AVALON_FIFO_STATUS_F_MSK)
 f00035c:	58800037 	ldwio	r2,0(r11)
 f000360:	1080004c 	andi	r2,r2,1
 f000364:	103ff01e 	bne	r2,zero,f000328 <main+0x124>

				// Resume decoding
				IOWR_M2VDEC_STATUS(M2VDEC_0_BASE, M2VDEC_STATUS_PAUSE_MSK);
			}
		}
		IOWR_ALTERA_AVALON_FIFO_DATA(FIFO_0_IN_BASE, *p++);
 f000368:	20800017 	ldw	r2,0(r4)
 f00036c:	21000104 	addi	r4,r4,4
 f000370:	50800035 	stwio	r2,0(r10)
 f000374:	003ff906 	br	f00035c <main+0x158>

0f000378 <disk_timerproc>:
alt_u32 disk_timerproc(void* context)
{
	WORD n;
	BYTE s;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
 f000378:	d0e00817 	ldw	r3,-32736(gp)
		s &= ~STA_NODISK;
	else		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
	Stat = s;
	return 1;
}
 f00037c:	00800044 	movi	r2,1
{
	WORD n;
	BYTE s;

	n = Timer1;						/* 1kHz decrement timer stopped at 0 */
	if (n) Timer1 = --n;
 f000380:	193fffc4 	addi	r4,r3,-1
 f000384:	18ffffcc 	andi	r3,r3,65535
 f000388:	213fffcc 	andi	r4,r4,65535
 f00038c:	18000126 	beq	r3,zero,f000394 <disk_timerproc+0x1c>
 f000390:	d1200815 	stw	r4,-32736(gp)
	n = Timer2;
 f000394:	d0e00917 	ldw	r3,-32732(gp)
	if (n) Timer2 = --n;
 f000398:	193fffc4 	addi	r4,r3,-1
 f00039c:	18ffffcc 	andi	r3,r3,65535
 f0003a0:	213fffcc 	andi	r4,r4,65535
 f0003a4:	18000126 	beq	r3,zero,f0003ac <disk_timerproc+0x34>
 f0003a8:	d1200915 	stw	r4,-32732(gp)

	s = Stat;
 f0003ac:	d0e00103 	ldbu	r3,-32764(gp)
	if (INS)	/* Card is in socket */
		s &= ~STA_NODISK;
 f0003b0:	013fff44 	movi	r4,-3
 f0003b4:	1906703a 	and	r3,r3,r4
	else		/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);
	Stat = s;
 f0003b8:	d0e00105 	stb	r3,-32764(gp)
	return 1;
}
 f0003bc:	f800283a 	ret

0f0003c0 <disk_inittimer>:

void disk_inittimer()
{
	static alt_alarm a;
	alt_alarm_start(&a, 1, disk_timerproc, NULL);
 f0003c0:	01000034 	movhi	r4,0
 f0003c4:	21001204 	addi	r4,r4,72
 f0003c8:	01400044 	movi	r5,1
 f0003cc:	0183c034 	movhi	r6,3840
 f0003d0:	3180de04 	addi	r6,r6,888
 f0003d4:	000f883a 	mov	r7,zero
 f0003d8:	f0014781 	jmpi	f001478 <alt_alarm_start>

0f0003dc <xchg_spi>:
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, dat);
 f0003dc:	21003fcc 	andi	r4,r4,255
 f0003e0:	00840034 	movhi	r2,4096
 f0003e4:	1080c104 	addi	r2,r2,772
 f0003e8:	11000035 	stwio	r4,0(r2)
 f0003ec:	00c40034 	movhi	r3,4096
 f0003f0:	18c0c204 	addi	r3,r3,776
	while (!(
 f0003f4:	18800037 	ldwio	r2,0(r3)
 f0003f8:	1080200c 	andi	r2,r2,128
 f0003fc:	103ffd26 	beq	r2,zero,f0003f4 <xchg_spi+0x18>
			IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
			ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
	return IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
 f000400:	00840034 	movhi	r2,4096
 f000404:	1080c004 	addi	r2,r2,768
 f000408:	10800037 	ldwio	r2,0(r2)
}
 f00040c:	10803fcc 	andi	r2,r2,255
 f000410:	f800283a 	ret

0f000414 <deselect>:

static
void deselect (void)
{
	// Negate SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 0);
 f000414:	00840034 	movhi	r2,4096
 f000418:	1080c504 	addi	r2,r2,788
 f00041c:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, 0);
 f000420:	10bffe04 	addi	r2,r2,-8
 f000424:	10000035 	stwio	zero,0(r2)
	xchg_spi(0xFF);
 f000428:	01003fc4 	movi	r4,255
 f00042c:	f0003dc1 	jmpi	f0003dc <xchg_spi>

0f000430 <select>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
 f000430:	defffe04 	addi	sp,sp,-8
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
 f000434:	00c00044 	movi	r3,1
 f000438:	00840034 	movhi	r2,4096
 f00043c:	1080c504 	addi	r2,r2,788
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
 f000440:	dfc00115 	stw	ra,4(sp)
 f000444:	dc000015 	stw	r16,0(sp)
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
 f000448:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 f00044c:	00c10004 	movi	r3,1024
 f000450:	10bffe04 	addi	r2,r2,-8
 f000454:	10c00035 	stwio	r3,0(r2)
	xchg_spi(0xFF);
 f000458:	01003fc4 	movi	r4,255
 f00045c:	f0003dc0 	call	f0003dc <xchg_spi>
)
{
	BYTE d;


	Timer2 = wt;
 f000460:	00807d04 	movi	r2,500
 f000464:	d0a00915 	stw	r2,-32732(gp)
	do {
		d = xchg_spi(0xff);
 f000468:	04003fc4 	movi	r16,255
 f00046c:	8009883a 	mov	r4,r16
 f000470:	f0003dc0 	call	f0003dc <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && Timer2);	/* Wait for card goes ready or timeout */
 f000474:	10803fcc 	andi	r2,r2,255
 f000478:	14000526 	beq	r2,r16,f000490 <select+0x60>
 f00047c:	d0a00917 	ldw	r2,-32732(gp)
 f000480:	103ff91e 	bne	r2,zero,f000468 <select+0x38>
	// Assert SS# and send dummy clock
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 1);
	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_0_BASE, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
	xchg_spi(0xFF);
	if (wait_ready(500)) return 1;	/* OK */
	deselect();
 f000484:	f0004140 	call	f000414 <deselect>
 f000488:	0005883a 	mov	r2,zero
 f00048c:	00000106 	br	f000494 <select+0x64>
	return 0;	/* Timeout */
 f000490:	00800044 	movi	r2,1
}
 f000494:	dfc00117 	ldw	ra,4(sp)
 f000498:	dc000017 	ldw	r16,0(sp)
 f00049c:	dec00204 	addi	sp,sp,8
 f0004a0:	f800283a 	ret

0f0004a4 <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 f0004a4:	20803fcc 	andi	r2,r4,255
 f0004a8:	1080201c 	xori	r2,r2,128
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 f0004ac:	defffc04 	addi	sp,sp,-16
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 f0004b0:	10bfe004 	addi	r2,r2,-128
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 f0004b4:	dc800215 	stw	r18,8(sp)
 f0004b8:	dc400115 	stw	r17,4(sp)
 f0004bc:	dc000015 	stw	r16,0(sp)
 f0004c0:	dfc00315 	stw	ra,12(sp)
 f0004c4:	2025883a 	mov	r18,r4
 f0004c8:	2021883a 	mov	r16,r4
 f0004cc:	2823883a 	mov	r17,r5
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 f0004d0:	10000a0e 	bge	r2,zero,f0004fc <send_cmd+0x58>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 f0004d4:	01000dc4 	movi	r4,55
 f0004d8:	000b883a 	mov	r5,zero
 f0004dc:	f0004a40 	call	f0004a4 <send_cmd>
		if (res > 1) return res;
 f0004e0:	10c03fcc 	andi	r3,r2,255
 f0004e4:	00800044 	movi	r2,1
 f0004e8:	10c00236 	bltu	r2,r3,f0004f4 <send_cmd+0x50>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 f0004ec:	94001fcc 	andi	r16,r18,127
 f0004f0:	00000206 	br	f0004fc <send_cmd+0x58>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
 f0004f4:	1805883a 	mov	r2,r3
 f0004f8:	00002d06 	br	f0005b0 <send_cmd+0x10c>
	}

	/* Select card */
	deselect();
 f0004fc:	f0004140 	call	f000414 <deselect>
	if (!select()) return 0xFF;
 f000500:	f0004300 	call	f000430 <select>
 f000504:	1000021e 	bne	r2,zero,f000510 <send_cmd+0x6c>
 f000508:	00803fc4 	movi	r2,255
 f00050c:	00002806 	br	f0005b0 <send_cmd+0x10c>

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 f000510:	81001014 	ori	r4,r16,64
 f000514:	21003fcc 	andi	r4,r4,255
 f000518:	f0003dc0 	call	f0003dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 f00051c:	8808d63a 	srli	r4,r17,24
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 f000520:	84003fcc 	andi	r16,r16,255
	deselect();
	if (!select()) return 0xFF;

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 f000524:	f0003dc0 	call	f0003dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 f000528:	8808d43a 	srli	r4,r17,16
 f00052c:	21003fcc 	andi	r4,r4,255
 f000530:	f0003dc0 	call	f0003dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 f000534:	8808d23a 	srli	r4,r17,8
 f000538:	21003fcc 	andi	r4,r4,255
 f00053c:	f0003dc0 	call	f0003dc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 f000540:	89003fcc 	andi	r4,r17,255
 f000544:	f0003dc0 	call	f0003dc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 f000548:	80001526 	beq	r16,zero,f0005a0 <send_cmd+0xfc>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 f00054c:	00800204 	movi	r2,8
 f000550:	80801526 	beq	r16,r2,f0005a8 <send_cmd+0x104>
	xchg_spi(n);
 f000554:	01000044 	movi	r4,1
 f000558:	f0003dc0 	call	f0003dc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 f00055c:	00800304 	movi	r2,12
 f000560:	8080021e 	bne	r16,r2,f00056c <send_cmd+0xc8>
 f000564:	01003fc4 	movi	r4,255
 f000568:	f0003dc0 	call	f0003dc <xchg_spi>
 f00056c:	04000284 	movi	r16,10
	n = 10;								/* Wait for response (10 bytes max) */
	do
		res = xchg_spi(0xFF);
 f000570:	01003fc4 	movi	r4,255
 f000574:	f0003dc0 	call	f0003dc <xchg_spi>
 f000578:	1007883a 	mov	r3,r2
	while ((res & 0x80) && --n);
 f00057c:	18803fcc 	andi	r2,r3,255
 f000580:	1080201c 	xori	r2,r2,128
 f000584:	843fffc4 	addi	r16,r16,-1
 f000588:	10bfe004 	addi	r2,r2,-128
 f00058c:	81003fcc 	andi	r4,r16,255
 f000590:	1000010e 	bge	r2,zero,f000598 <send_cmd+0xf4>
 f000594:	203ff61e 	bne	r4,zero,f000570 <send_cmd+0xcc>

	return res;							/* Return received response */
 f000598:	18803fcc 	andi	r2,r3,255
 f00059c:	00000406 	br	f0005b0 <send_cmd+0x10c>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
	xchg_spi(n);
 f0005a0:	01002544 	movi	r4,149
 f0005a4:	003ff006 	br	f000568 <send_cmd+0xc4>
 f0005a8:	010021c4 	movi	r4,135
 f0005ac:	003fee06 	br	f000568 <send_cmd+0xc4>
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;							/* Return received response */
}
 f0005b0:	dfc00317 	ldw	ra,12(sp)
 f0005b4:	dc800217 	ldw	r18,8(sp)
 f0005b8:	dc400117 	ldw	r17,4(sp)
 f0005bc:	dc000017 	ldw	r16,0(sp)
 f0005c0:	dec00404 	addi	sp,sp,16
 f0005c4:	f800283a 	ret

0f0005c8 <disk_readp>:
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 f0005c8:	d0a00103 	ldbu	r2,-32764(gp)
	BYTE* Buffer,        /* Pointer to the read buffer */
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
 f0005cc:	defffc04 	addi	sp,sp,-16
 f0005d0:	dc800215 	stw	r18,8(sp)
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 f0005d4:	1080004c 	andi	r2,r2,1
 f0005d8:	1005003a 	cmpeq	r2,r2,zero
	BYTE* Buffer,        /* Pointer to the read buffer */
	DWORD SectorNumber,  /* Sector number */
	WORD Offset,         /* Byte offset in the sector to start to read */
	WORD Count           /* Number of bytes to read */
)
{
 f0005dc:	dc400115 	stw	r17,4(sp)
 f0005e0:	dfc00315 	stw	ra,12(sp)
 f0005e4:	dc000015 	stw	r16,0(sp)
 f0005e8:	2025883a 	mov	r18,r4
 f0005ec:	3823883a 	mov	r17,r7
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 f0005f0:	1000021e 	bne	r2,zero,f0005fc <disk_readp+0x34>
 f0005f4:	00800084 	movi	r2,2
 f0005f8:	00003406 	br	f0006cc <disk_readp+0x104>

	if (!(CardType & CT_BLOCK))
 f0005fc:	d0a00a03 	ldbu	r2,-32728(gp)
 f000600:	31bfffcc 	andi	r6,r6,65535
 f000604:	1080020c 	andi	r2,r2,8
 f000608:	1000031e 	bne	r2,zero,f000618 <disk_readp+0x50>
	{
		SectorNumber *= 512;		/* LBA ot BA conversion (byte addressing cards) */
 f00060c:	2804927a 	slli	r2,r5,9
		SectorNumber += Offset;
 f000610:	118b883a 	add	r5,r2,r6
 f000614:	00000306 	br	f000624 <disk_readp+0x5c>
	}
	else if(Offset != 0)
 f000618:	30000226 	beq	r6,zero,f000624 <disk_readp+0x5c>
 f00061c:	008000c4 	movi	r2,3
 f000620:	00002a06 	br	f0006cc <disk_readp+0x104>
	{
		return RES_PARERR;	/* Cannot access with offset */
	}

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
 f000624:	01000444 	movi	r4,17
 f000628:	f0004a40 	call	f0004a4 <send_cmd>
 f00062c:	10803fcc 	andi	r2,r2,255
 f000630:	1000231e 	bne	r2,zero,f0006c0 <disk_readp+0xf8>
)
{
	BYTE token;


	Timer1 = 200;
 f000634:	00803204 	movi	r2,200
 f000638:	d0a00815 	stw	r2,-32736(gp)
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xff);
 f00063c:	04003fc4 	movi	r16,255
 f000640:	8009883a 	mov	r4,r16
 f000644:	f0003dc0 	call	f0003dc <xchg_spi>
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
 f000648:	10c03fcc 	andi	r3,r2,255
 f00064c:	1c00031e 	bne	r3,r16,f00065c <disk_readp+0x94>
 f000650:	d0a00817 	ldw	r2,-32736(gp)
 f000654:	10001a26 	beq	r2,zero,f0006c0 <disk_readp+0xf8>
 f000658:	003ff806 	br	f00063c <disk_readp+0x74>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 f00065c:	00803f84 	movi	r2,254
 f000660:	1880171e 	bne	r3,r2,f0006c0 <disk_readp+0xf8>
	else if(Offset != 0)
	{
		return RES_PARERR;	/* Cannot access with offset */
	}

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
 f000664:	89ffffcc 	andi	r7,r17,65535
 f000668:	8009883a 	mov	r4,r16
 f00066c:	01840034 	movhi	r6,4096
 f000670:	3180c104 	addi	r6,r6,772
 f000674:	01440034 	movhi	r5,4096
 f000678:	2940c004 	addi	r5,r5,768
 f00067c:	00000a06 	br	f0006a8 <disk_readp+0xe0>
	UINT btr		/* Number of bytes to receive (16, 64 or 512) */
)
{
	while(btr > 0)
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xff);
 f000680:	31000035 	stwio	r4,0(r6)
 f000684:	00c40034 	movhi	r3,4096
 f000688:	18c0c204 	addi	r3,r3,776
		while (!(
 f00068c:	18800037 	ldwio	r2,0(r3)
 f000690:	1080200c 	andi	r2,r2,128
 f000694:	103ffd26 	beq	r2,zero,f00068c <disk_readp+0xc4>
				IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
				ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
		*buff++ = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
 f000698:	28800037 	ldwio	r2,0(r5)
 f00069c:	90800005 	stb	r2,0(r18)
		--btr;
 f0006a0:	39ffffc4 	addi	r7,r7,-1
	{
		IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_0_BASE, 0xff);
		while (!(
				IORD_ALTERA_AVALON_SPI_STATUS(SPI_0_BASE) &
				ALTERA_AVALON_SPI_STATUS_RRDY_MSK)) ;
		*buff++ = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_0_BASE);
 f0006a4:	94800044 	addi	r18,r18,1
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (16, 64 or 512) */
)
{
	while(btr > 0)
 f0006a8:	383ff51e 	bne	r7,zero,f000680 <disk_readp+0xb8>
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 f0006ac:	01003fc4 	movi	r4,255
 f0006b0:	f0003dc0 	call	f0003dc <xchg_spi>
 f0006b4:	01003fc4 	movi	r4,255
 f0006b8:	f0003dc0 	call	f0003dc <xchg_spi>
 f0006bc:	0023883a 	mov	r17,zero

	if ((send_cmd(CMD17, SectorNumber) == 0)	&& rcvr_datablock(Buffer, Count))
	{
		Count = 0;
	}
	deselect();
 f0006c0:	f0004140 	call	f000414 <deselect>

	return Count ? RES_ERROR : RES_OK;	/* Return result */
 f0006c4:	88bfffcc 	andi	r2,r17,65535
 f0006c8:	1004c03a 	cmpne	r2,r2,zero
}
 f0006cc:	dfc00317 	ldw	ra,12(sp)
 f0006d0:	dc800217 	ldw	r18,8(sp)
 f0006d4:	dc400117 	ldw	r17,4(sp)
 f0006d8:	dc000017 	ldw	r16,0(sp)
 f0006dc:	dec00404 	addi	sp,sp,16
 f0006e0:	f800283a 	ret

0f0006e4 <disk_initialize>:

DSTATUS disk_initialize()
{
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
 f0006e4:	d0a00103 	ldbu	r2,-32764(gp)
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize()
{
 f0006e8:	defffc04 	addi	sp,sp,-16
 f0006ec:	dfc00315 	stw	ra,12(sp)
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
 f0006f0:	1080008c 	andi	r2,r2,2
/*-----------------------------------------------------------------------*/
/* Initialize disk drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize()
{
 f0006f4:	dc400215 	stw	r17,8(sp)
 f0006f8:	dc000115 	stw	r16,4(sp)
	BYTE n, cmd, ty, ocr[4];

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */
 f0006fc:	1000601e 	bne	r2,zero,f000880 <disk_initialize+0x19c>
/*-----------------------------------------------------------------------*/

static
void power_on (void)
{
	IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(SPI_0_BASE, 0);
 f000700:	00840034 	movhi	r2,4096
 f000704:	1080c504 	addi	r2,r2,788
 f000708:	10000035 	stwio	zero,0(r2)
 f00070c:	04000284 	movi	r16,10

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the socket? */

	power_on();							/* Initialize SPI */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 f000710:	01003fc4 	movi	r4,255
 f000714:	843fffc4 	addi	r16,r16,-1
 f000718:	f0003dc0 	call	f0003dc <xchg_spi>
 f00071c:	80803fcc 	andi	r2,r16,255
 f000720:	103ffb1e 	bne	r2,zero,f000710 <disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 f000724:	0009883a 	mov	r4,zero
 f000728:	000b883a 	mov	r5,zero
 f00072c:	f0004a40 	call	f0004a4 <send_cmd>
 f000730:	14003fcc 	andi	r16,r2,255
 f000734:	00800044 	movi	r2,1
 f000738:	80805c1e 	bne	r16,r2,f0008ac <disk_initialize+0x1c8>
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 f00073c:	0080fa04 	movi	r2,1000
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 f000740:	01000204 	movi	r4,8
 f000744:	01406a84 	movi	r5,426
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
		Timer1 = 1000;						/* Initialization timeout = 1 sec */
 f000748:	d0a00815 	stw	r2,-32736(gp)
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 f00074c:	f0004a40 	call	f0004a4 <send_cmd>
 f000750:	10803fcc 	andi	r2,r2,255
 f000754:	1400271e 	bne	r2,r16,f0007f4 <disk_initialize+0x110>
 f000758:	d821883a 	mov	r16,sp
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 f00075c:	01003fc4 	movi	r4,255
 f000760:	f0003dc0 	call	f0003dc <xchg_spi>
 f000764:	80800005 	stb	r2,0(r16)
 f000768:	84000044 	addi	r16,r16,1
 f00076c:	d8800104 	addi	r2,sp,4
 f000770:	80bffa1e 	bne	r16,r2,f00075c <disk_initialize+0x78>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 f000774:	d8c00083 	ldbu	r3,2(sp)
 f000778:	00800044 	movi	r2,1
 f00077c:	18804b1e 	bne	r3,r2,f0008ac <disk_initialize+0x1c8>
 f000780:	d8c000c3 	ldbu	r3,3(sp)
 f000784:	00802a84 	movi	r2,170
 f000788:	1880481e 	bne	r3,r2,f0008ac <disk_initialize+0x1c8>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 f00078c:	d0a00817 	ldw	r2,-32736(gp)
 f000790:	01002a44 	movi	r4,169
 f000794:	01500034 	movhi	r5,16384
 f000798:	10000326 	beq	r2,zero,f0007a8 <disk_initialize+0xc4>
 f00079c:	f0004a40 	call	f0004a4 <send_cmd>
 f0007a0:	10803fcc 	andi	r2,r2,255
 f0007a4:	103ff91e 	bne	r2,zero,f00078c <disk_initialize+0xa8>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 f0007a8:	d0a00817 	ldw	r2,-32736(gp)
 f0007ac:	10003f26 	beq	r2,zero,f0008ac <disk_initialize+0x1c8>
 f0007b0:	01000e84 	movi	r4,58
 f0007b4:	000b883a 	mov	r5,zero
 f0007b8:	f0004a40 	call	f0004a4 <send_cmd>
 f0007bc:	10803fcc 	andi	r2,r2,255
 f0007c0:	10003a1e 	bne	r2,zero,f0008ac <disk_initialize+0x1c8>
 f0007c4:	d821883a 	mov	r16,sp
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 f0007c8:	01003fc4 	movi	r4,255
 f0007cc:	f0003dc0 	call	f0003dc <xchg_spi>
 f0007d0:	80800005 	stb	r2,0(r16)
 f0007d4:	84000044 	addi	r16,r16,1
 f0007d8:	d8800104 	addi	r2,sp,4
 f0007dc:	80bffa1e 	bne	r16,r2,f0007c8 <disk_initialize+0xe4>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 f0007e0:	d8800003 	ldbu	r2,0(sp)
 f0007e4:	1080100c 	andi	r2,r2,64
 f0007e8:	10002c26 	beq	r2,zero,f00089c <disk_initialize+0x1b8>
 f0007ec:	00800304 	movi	r2,12
 f0007f0:	00002b06 	br	f0008a0 <disk_initialize+0x1bc>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 f0007f4:	01002a44 	movi	r4,169
 f0007f8:	000b883a 	mov	r5,zero
 f0007fc:	f0004a40 	call	f0004a4 <send_cmd>
 f000800:	10803fcc 	andi	r2,r2,255
 f000804:	80800336 	bltu	r16,r2,f000814 <disk_initialize+0x130>
 f000808:	047fea44 	movi	r17,-87
 f00080c:	04000084 	movi	r16,2
 f000810:	00000106 	br	f000818 <disk_initialize+0x134>
 f000814:	8023883a 	mov	r17,r16
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
			}
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 f000818:	d0a00817 	ldw	r2,-32736(gp)
 f00081c:	89003fcc 	andi	r4,r17,255
 f000820:	000b883a 	mov	r5,zero
 f000824:	10000326 	beq	r2,zero,f000834 <disk_initialize+0x150>
 f000828:	f0004a40 	call	f0004a4 <send_cmd>
 f00082c:	10803fcc 	andi	r2,r2,255
 f000830:	103ff91e 	bne	r2,zero,f000818 <disk_initialize+0x134>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 f000834:	d0a00817 	ldw	r2,-32736(gp)
 f000838:	10001c26 	beq	r2,zero,f0008ac <disk_initialize+0x1c8>
 f00083c:	01000404 	movi	r4,16
 f000840:	01408004 	movi	r5,512
 f000844:	f0004a40 	call	f0004a4 <send_cmd>
 f000848:	10803fcc 	andi	r2,r2,255
 f00084c:	1000171e 	bne	r2,zero,f0008ac <disk_initialize+0x1c8>
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 f000850:	d4200a05 	stb	r16,-32728(gp)
	deselect();
 f000854:	f0004140 	call	f000414 <deselect>

	if (ty) {			/* OK */
 f000858:	80803fcc 	andi	r2,r16,255
 f00085c:	10000426 	beq	r2,zero,f000870 <disk_initialize+0x18c>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 f000860:	d0a00103 	ldbu	r2,-32764(gp)
 f000864:	00ffff84 	movi	r3,-2
 f000868:	10c4703a 	and	r2,r2,r3
 f00086c:	00000306 	br	f00087c <disk_initialize+0x198>


static
void power_off (void)
{
	select();				/* Wait for card ready */
 f000870:	f0004300 	call	f000430 <select>
	deselect();
 f000874:	f0004140 	call	f000414 <deselect>
	if (ty) {			/* OK */
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		power_off();
		Stat = STA_NOINIT;
 f000878:	00800044 	movi	r2,1
 f00087c:	d0a00105 	stb	r2,-32764(gp)
	}

	return Stat;
 f000880:	d0a00103 	ldbu	r2,-32764(gp)
 f000884:	10803fcc 	andi	r2,r2,255
}
 f000888:	dfc00317 	ldw	ra,12(sp)
 f00088c:	dc400217 	ldw	r17,8(sp)
 f000890:	dc000117 	ldw	r16,4(sp)
 f000894:	dec00404 	addi	sp,sp,16
 f000898:	f800283a 	ret
	} else {			/* Failed */
		power_off();
		Stat = STA_NOINIT;
	}

	return Stat;
 f00089c:	00800104 	movi	r2,4
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 f0008a0:	d0a00a05 	stb	r2,-32728(gp)
	deselect();
 f0008a4:	f0004140 	call	f000414 <deselect>
 f0008a8:	003fed06 	br	f000860 <disk_initialize+0x17c>
			while (Timer1 && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 f0008ac:	d0200a05 	stb	zero,-32728(gp)
	deselect();
 f0008b0:	f0004140 	call	f000414 <deselect>
 f0008b4:	003fee06 	br	f000870 <disk_initialize+0x18c>

0f0008b8 <clust2sect>:

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
 f0008b8:	defffe04 	addi	sp,sp,-8
 f0008bc:	dc000015 	stw	r16,0(sp)
	FATFS *fs = FatFs;
 f0008c0:	d4200b17 	ldw	r16,-32724(gp)


	clst -= 2;
 f0008c4:	20ffff84 	addi	r3,r4,-2

static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
 f0008c8:	dfc00115 	stw	ra,4(sp)
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 f0008cc:	80800217 	ldw	r2,8(r16)
	return (DWORD)clst * fs->csize + fs->database;
 f0008d0:	1809883a 	mov	r4,r3
{
	FATFS *fs = FatFs;


	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 f0008d4:	000b883a 	mov	r5,zero
 f0008d8:	10bfff84 	addi	r2,r2,-2
 f0008dc:	1880042e 	bgeu	r3,r2,f0008f0 <clust2sect+0x38>
	return (DWORD)clst * fs->csize + fs->database;
 f0008e0:	81400083 	ldbu	r5,2(r16)
 f0008e4:	f0014400 	call	f001440 <__mulsi3>
 f0008e8:	80c00517 	ldw	r3,20(r16)
 f0008ec:	10cb883a 	add	r5,r2,r3
}
 f0008f0:	2805883a 	mov	r2,r5
 f0008f4:	dfc00117 	ldw	ra,4(sp)
 f0008f8:	dc000017 	ldw	r16,0(sp)
 f0008fc:	dec00204 	addi	sp,sp,8
 f000900:	f800283a 	ret

0f000904 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
 f000904:	defffe04 	addi	sp,sp,-8
 f000908:	dc000015 	stw	r16,0(sp)
 f00090c:	2021883a 	mov	r16,r4
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
	clst = dj->sclust;
 f000910:	21000217 	ldw	r4,8(r4)
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
 f000914:	00800044 	movi	r2,1

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
 f000918:	dfc00115 	stw	ra,4(sp)
	CLUST clst;
	FATFS *fs = FatFs;


	dj->index = 0;
 f00091c:	8000000d 	sth	zero,0(r16)
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	FATFS *fs = FatFs;
 f000920:	d1600b17 	ldw	r5,-32724(gp)


	dj->index = 0;
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
 f000924:	20800f26 	beq	r4,r2,f000964 <dir_rewind+0x60>
 f000928:	28800217 	ldw	r2,8(r5)
 f00092c:	20800d2e 	bgeu	r4,r2,f000964 <dir_rewind+0x60>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 f000930:	2000101e 	bne	r4,zero,f000974 <dir_rewind+0x70>
 f000934:	28c00003 	ldbu	r3,0(r5)
 f000938:	008000c4 	movi	r2,3
 f00093c:	18800b1e 	bne	r3,r2,f00096c <dir_rewind+0x68>
		clst = (CLUST)fs->dirbase;
 f000940:	29000417 	ldw	r4,16(r5)
	dj->clust = clst;						/* Current cluster */
 f000944:	81000315 	stw	r4,12(r16)
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
 f000948:	20000226 	beq	r4,zero,f000954 <dir_rewind+0x50>
 f00094c:	f0008b80 	call	f0008b8 <clust2sect>
 f000950:	00000106 	br	f000958 <dir_rewind+0x54>
 f000954:	28800417 	ldw	r2,16(r5)
 f000958:	0007883a 	mov	r3,zero
 f00095c:	80800415 	stw	r2,16(r16)
 f000960:	00000606 	br	f00097c <dir_rewind+0x78>

	return FR_OK;	/* Seek succeeded */
 f000964:	00c00044 	movi	r3,1
 f000968:	00000406 	br	f00097c <dir_rewind+0x78>
	clst = dj->sclust;
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
 f00096c:	80000315 	stw	zero,12(r16)
 f000970:	003ff806 	br	f000954 <dir_rewind+0x50>
 f000974:	81000315 	stw	r4,12(r16)
 f000978:	003ff406 	br	f00094c <dir_rewind+0x48>
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */

	return FR_OK;	/* Seek succeeded */
}
 f00097c:	1805883a 	mov	r2,r3
 f000980:	dfc00117 	ldw	ra,4(sp)
 f000984:	dc000017 	ldw	r16,0(sp)
 f000988:	dec00204 	addi	sp,sp,8
 f00098c:	f800283a 	ret

0f000990 <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 f000990:	defffc04 	addi	sp,sp,-16
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
 f000994:	01807f84 	movi	r6,510
 f000998:	01c00084 	movi	r7,2
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 f00099c:	dc400115 	stw	r17,4(sp)
 f0009a0:	dc000015 	stw	r16,0(sp)
 f0009a4:	dfc00315 	stw	ra,12(sp)
 f0009a8:	dc800215 	stw	r18,8(sp)
 f0009ac:	2021883a 	mov	r16,r4
 f0009b0:	2823883a 	mov	r17,r5
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
 f0009b4:	f0005c80 	call	f0005c8 <disk_readp>
 f0009b8:	10000226 	beq	r2,zero,f0009c4 <check_fs+0x34>
 f0009bc:	008000c4 	movi	r2,3
 f0009c0:	00002d06 	br	f000a78 <check_fs+0xe8>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
 f0009c4:	80800043 	ldbu	r2,1(r16)
 f0009c8:	80c00003 	ldbu	r3,0(r16)
 f0009cc:	84800044 	addi	r18,r16,1
 f0009d0:	1004923a 	slli	r2,r2,8
 f0009d4:	10c4b03a 	or	r2,r2,r3
 f0009d8:	10bfffcc 	andi	r2,r2,65535
 f0009dc:	10a0001c 	xori	r2,r2,32768
 f0009e0:	10a00004 	addi	r2,r2,-32768
 f0009e4:	00ea9544 	movi	r3,-21931
 f0009e8:	10c00226 	beq	r2,r3,f0009f4 <check_fs+0x64>
 f0009ec:	00800084 	movi	r2,2
 f0009f0:	00002106 	br	f000a78 <check_fs+0xe8>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
 f0009f4:	8009883a 	mov	r4,r16
 f0009f8:	880b883a 	mov	r5,r17
 f0009fc:	01800d84 	movi	r6,54
 f000a00:	01c00084 	movi	r7,2
 f000a04:	f0005c80 	call	f0005c8 <disk_readp>
 f000a08:	10000b1e 	bne	r2,zero,f000a38 <check_fs+0xa8>
 f000a0c:	80800043 	ldbu	r2,1(r16)
 f000a10:	80c00003 	ldbu	r3,0(r16)
 f000a14:	1004923a 	slli	r2,r2,8
 f000a18:	10c4b03a 	or	r2,r2,r3
 f000a1c:	10bfffcc 	andi	r2,r2,65535
 f000a20:	10a0001c 	xori	r2,r2,32768
 f000a24:	10a00004 	addi	r2,r2,-32768
 f000a28:	00d05184 	movi	r3,16710
 f000a2c:	10c0021e 	bne	r2,r3,f000a38 <check_fs+0xa8>
 f000a30:	0005883a 	mov	r2,zero
 f000a34:	00001006 	br	f000a78 <check_fs+0xe8>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
 f000a38:	880b883a 	mov	r5,r17
 f000a3c:	8009883a 	mov	r4,r16
 f000a40:	01801484 	movi	r6,82
 f000a44:	01c00084 	movi	r7,2
 f000a48:	f0005c80 	call	f0005c8 <disk_readp>
 f000a4c:	10000226 	beq	r2,zero,f000a58 <check_fs+0xc8>
 f000a50:	00800044 	movi	r2,1
 f000a54:	00000806 	br	f000a78 <check_fs+0xe8>
 f000a58:	90800003 	ldbu	r2,0(r18)
 f000a5c:	80c00003 	ldbu	r3,0(r16)
 f000a60:	1004923a 	slli	r2,r2,8
 f000a64:	10c4b03a 	or	r2,r2,r3
 f000a68:	10bfffcc 	andi	r2,r2,65535
 f000a6c:	10a0001c 	xori	r2,r2,32768
 f000a70:	10a00004 	addi	r2,r2,-32768
 f000a74:	10905198 	cmpnei	r2,r2,16710
		return 0;
	return 1;
}
 f000a78:	dfc00317 	ldw	ra,12(sp)
 f000a7c:	dc800217 	ldw	r18,8(sp)
 f000a80:	dc400117 	ldw	r17,4(sp)
 f000a84:	dc000017 	ldw	r16,0(sp)
 f000a88:	dec00404 	addi	sp,sp,16
 f000a8c:	f800283a 	ret

0f000a90 <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
 f000a90:	defffe04 	addi	sp,sp,-8
#endif
	BYTE buf[4];
	FATFS *fs = FatFs;


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
 f000a94:	00800044 	movi	r2,1

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
 f000a98:	dfc00115 	stw	ra,4(sp)
#if _FS_FAT12
	WORD wc, bc, ofs;
#endif
	BYTE buf[4];
	FATFS *fs = FatFs;
 f000a9c:	d0e00b17 	ldw	r3,-32724(gp)


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
 f000aa0:	11002d2e 	bgeu	r2,r4,f000b58 <get_fat+0xc8>
 f000aa4:	18800217 	ldw	r2,8(r3)
 f000aa8:	20802b2e 	bgeu	r4,r2,f000b58 <get_fat+0xc8>
		return 1;

	switch (fs->fs_type) {
 f000aac:	19c00003 	ldbu	r7,0(r3)
 f000ab0:	00800084 	movi	r2,2
 f000ab4:	38800326 	beq	r7,r2,f000ac4 <get_fat+0x34>
 f000ab8:	008000c4 	movi	r2,3
 f000abc:	3880261e 	bne	r7,r2,f000b58 <get_fat+0xc8>
 f000ac0:	00000d06 	br	f000af8 <get_fat+0x68>
		}
		wc = LD_WORD(buf);
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
 f000ac4:	200ad23a 	srli	r5,r4,8
 f000ac8:	18800317 	ldw	r2,12(r3)
 f000acc:	21803fcc 	andi	r6,r4,255
 f000ad0:	318d883a 	add	r6,r6,r6
 f000ad4:	288b883a 	add	r5,r5,r2
 f000ad8:	d809883a 	mov	r4,sp
 f000adc:	f0005c80 	call	f0005c8 <disk_readp>
 f000ae0:	10001d1e 	bne	r2,zero,f000b58 <get_fat+0xc8>
		return LD_WORD(buf);
 f000ae4:	d8800043 	ldbu	r2,1(sp)
 f000ae8:	d8c00003 	ldbu	r3,0(sp)
 f000aec:	1004923a 	slli	r2,r2,8
 f000af0:	10c4b03a 	or	r2,r2,r3
 f000af4:	00001906 	br	f000b5c <get_fat+0xcc>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
 f000af8:	200ad1fa 	srli	r5,r4,7
 f000afc:	18800317 	ldw	r2,12(r3)
 f000b00:	21801fcc 	andi	r6,r4,127
 f000b04:	318d883a 	add	r6,r6,r6
 f000b08:	288b883a 	add	r5,r5,r2
 f000b0c:	318d883a 	add	r6,r6,r6
 f000b10:	d809883a 	mov	r4,sp
 f000b14:	01c00104 	movi	r7,4
 f000b18:	f0005c80 	call	f0005c8 <disk_readp>
 f000b1c:	10000e1e 	bne	r2,zero,f000b58 <get_fat+0xc8>
		return LD_DWORD(buf) & 0x0FFFFFFF;
 f000b20:	d88000c3 	ldbu	r2,3(sp)
 f000b24:	d8c00083 	ldbu	r3,2(sp)
 f000b28:	d9000043 	ldbu	r4,1(sp)
 f000b2c:	1004963a 	slli	r2,r2,24
 f000b30:	1806943a 	slli	r3,r3,16
 f000b34:	d9400003 	ldbu	r5,0(sp)
 f000b38:	2008923a 	slli	r4,r4,8
 f000b3c:	10c4b03a 	or	r2,r2,r3
 f000b40:	1144b03a 	or	r2,r2,r5
 f000b44:	2088b03a 	or	r4,r4,r2
 f000b48:	00840034 	movhi	r2,4096
 f000b4c:	10bfffc4 	addi	r2,r2,-1
 f000b50:	2084703a 	and	r2,r4,r2
 f000b54:	00000106 	br	f000b5c <get_fat+0xcc>
 f000b58:	00800044 	movi	r2,1
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
 f000b5c:	dfc00117 	ldw	ra,4(sp)
 f000b60:	dec00204 	addi	sp,sp,8
 f000b64:	f800283a 	ret

0f000b68 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
 f000b68:	defff804 	addi	sp,sp,-32
 f000b6c:	dc000015 	stw	r16,0(sp)
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
 f000b70:	d4200b17 	ldw	r16,-32724(gp)
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
 f000b74:	dd800615 	stw	r22,24(sp)
 f000b78:	dd400515 	stw	r21,20(sp)
 f000b7c:	dcc00315 	stw	r19,12(sp)
 f000b80:	dfc00715 	stw	ra,28(sp)
 f000b84:	dd000415 	stw	r20,16(sp)
 f000b88:	dc800215 	stw	r18,8(sp)
 f000b8c:	dc400115 	stw	r17,4(sp)
 f000b90:	302b883a 	mov	r21,r6
 f000b94:	202d883a 	mov	r22,r4
 f000b98:	2827883a 	mov	r19,r5
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;


	*br = 0;
 f000b9c:	3000000d 	sth	zero,0(r6)
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
 f000ba0:	8000021e 	bne	r16,zero,f000bac <pf_read+0x44>
 f000ba4:	00800184 	movi	r2,6
 f000ba8:	00004706 	br	f000cc8 <pf_read+0x160>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
 f000bac:	80800043 	ldbu	r2,1(r16)
 f000bb0:	1080004c 	andi	r2,r2,1
 f000bb4:	1000021e 	bne	r2,zero,f000bc0 <pf_read+0x58>
 f000bb8:	00800144 	movi	r2,5
 f000bbc:	00004206 	br	f000cc8 <pf_read+0x160>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
 f000bc0:	80800717 	ldw	r2,28(r16)
 f000bc4:	80c00617 	ldw	r3,24(r16)
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
 f000bc8:	293fffcc 	andi	r4,r5,65535
	*br = 0;
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
 f000bcc:	10c5c83a 	sub	r2,r2,r3
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
 f000bd0:	1100012e 	bgeu	r2,r4,f000bd8 <pf_read+0x70>
 f000bd4:	1027883a 	mov	r19,r2
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
 f000bd8:	b029883a 	mov	r20,r22
 f000bdc:	00003506 	br	f000cb4 <pf_read+0x14c>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
 f000be0:	81000617 	ldw	r4,24(r16)
 f000be4:	20807fcc 	andi	r2,r4,511
 f000be8:	1000161e 	bne	r2,zero,f000c44 <pf_read+0xdc>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
 f000bec:	80800083 	ldbu	r2,2(r16)
 f000bf0:	2006d27a 	srli	r3,r4,9
 f000bf4:	10bfffc4 	addi	r2,r2,-1
 f000bf8:	18a2703a 	and	r17,r3,r2
			if (!cs) {								/* On the cluster boundary? */
 f000bfc:	88803fcc 	andi	r2,r17,255
 f000c00:	1000091e 	bne	r2,zero,f000c28 <pf_read+0xc0>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
 f000c04:	2000021e 	bne	r4,zero,f000c10 <pf_read+0xa8>
 f000c08:	80c00817 	ldw	r3,32(r16)
 f000c0c:	00000306 	br	f000c1c <pf_read+0xb4>
 f000c10:	81000917 	ldw	r4,36(r16)
 f000c14:	f000a900 	call	f000a90 <get_fat>
 f000c18:	1007883a 	mov	r3,r2
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
 f000c1c:	00800044 	movi	r2,1
 f000c20:	10c0272e 	bgeu	r2,r3,f000cc0 <pf_read+0x158>
				fs->curr_clust = clst;				/* Update current cluster */
 f000c24:	80c00915 	stw	r3,36(r16)
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
 f000c28:	81000917 	ldw	r4,36(r16)
 f000c2c:	f0008b80 	call	f0008b8 <clust2sect>
 f000c30:	1007883a 	mov	r3,r2
			if (!sect) goto fr_abort;
 f000c34:	10002226 	beq	r2,zero,f000cc0 <pf_read+0x158>
			fs->dsect = sect + cs;
 f000c38:	88803fcc 	andi	r2,r17,255
 f000c3c:	1885883a 	add	r2,r3,r2
 f000c40:	80800a15 	stw	r2,40(r16)
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
 f000c44:	81000617 	ldw	r4,24(r16)
 f000c48:	00808004 	movi	r2,512
 f000c4c:	997fffcc 	andi	r5,r19,65535
 f000c50:	20c07fcc 	andi	r3,r4,511
 f000c54:	10c7c83a 	sub	r3,r2,r3
 f000c58:	18bfffcc 	andi	r2,r3,65535
 f000c5c:	200d883a 	mov	r6,r4
 f000c60:	9825883a 	mov	r18,r19
 f000c64:	1140012e 	bgeu	r2,r5,f000c6c <pf_read+0x104>
 f000c68:	1825883a 	mov	r18,r3
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
 f000c6c:	b0000226 	beq	r22,zero,f000c78 <pf_read+0x110>
 f000c70:	a009883a 	mov	r4,r20
 f000c74:	00000106 	br	f000c7c <pf_read+0x114>
 f000c78:	0009883a 	mov	r4,zero
 f000c7c:	81400a17 	ldw	r5,40(r16)
 f000c80:	947fffcc 	andi	r17,r18,65535
 f000c84:	31807fcc 	andi	r6,r6,511
 f000c88:	880f883a 	mov	r7,r17
 f000c8c:	f0005c80 	call	f0005c8 <disk_readp>
		if (dr) goto fr_abort;
 f000c90:	10000b1e 	bne	r2,zero,f000cc0 <pf_read+0x158>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 f000c94:	80800617 	ldw	r2,24(r16)
		btr -= rcnt; *br += rcnt;
 f000c98:	a8c0000b 	ldhu	r3,0(r21)
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 f000c9c:	a469883a 	add	r20,r20,r17
 f000ca0:	1445883a 	add	r2,r2,r17
		btr -= rcnt; *br += rcnt;
 f000ca4:	1c87883a 	add	r3,r3,r18
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
		if (dr) goto fr_abort;
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
 f000ca8:	80800615 	stw	r2,24(r16)
		btr -= rcnt; *br += rcnt;
 f000cac:	a8c0000d 	sth	r3,0(r21)
 f000cb0:	9ca7c83a 	sub	r19,r19,r18
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
 f000cb4:	98bfffcc 	andi	r2,r19,65535
 f000cb8:	103fc91e 	bne	r2,zero,f000be0 <pf_read+0x78>
 f000cbc:	00000206 	br	f000cc8 <pf_read+0x160>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
 f000cc0:	80000045 	stb	zero,1(r16)
 f000cc4:	00800044 	movi	r2,1
	return FR_DISK_ERR;
}
 f000cc8:	dfc00717 	ldw	ra,28(sp)
 f000ccc:	dd800617 	ldw	r22,24(sp)
 f000cd0:	dd400517 	ldw	r21,20(sp)
 f000cd4:	dd000417 	ldw	r20,16(sp)
 f000cd8:	dcc00317 	ldw	r19,12(sp)
 f000cdc:	dc800217 	ldw	r18,8(sp)
 f000ce0:	dc400117 	ldw	r17,4(sp)
 f000ce4:	dc000017 	ldw	r16,0(sp)
 f000ce8:	dec00804 	addi	sp,sp,32
 f000cec:	f800283a 	ret

0f000cf0 <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
 f000cf0:	deffe904 	addi	sp,sp,-92
 f000cf4:	dd001415 	stw	r20,80(sp)
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
 f000cf8:	d5200b17 	ldw	r20,-32724(gp)
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
 f000cfc:	dfc01615 	stw	ra,88(sp)
 f000d00:	dd401515 	stw	r21,84(sp)
 f000d04:	dcc01315 	stw	r19,76(sp)
 f000d08:	dc801215 	stw	r18,72(sp)
 f000d0c:	dc401115 	stw	r17,68(sp)
 f000d10:	dc001015 	stw	r16,64(sp)
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs)						/* Check file system */
 f000d14:	a000021e 	bne	r20,zero,f000d20 <pf_open+0x30>
 f000d18:	00c00184 	movi	r3,6
 f000d1c:	0000c006 	br	f001020 <pf_open+0x330>
		return FR_NOT_ENABLED;

	fs->flag = 0;
 f000d20:	a0000045 	stb	zero,1(r20)
	dj.fn = sp;
 f000d24:	2023883a 	mov	r17,r4
 f000d28:	01000804 	movi	r4,32
 f000d2c:	dec00415 	stw	sp,16(sp)
 f000d30:	00000106 	br	f000d38 <pf_open+0x48>
)
{
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
 f000d34:	8c400044 	addi	r17,r17,1
 f000d38:	88c00007 	ldb	r3,0(r17)
 f000d3c:	193ffd26 	beq	r3,r4,f000d34 <pf_open+0x44>
	if (*path == '/') path++;			/* Strip heading separator */
 f000d40:	00800bc4 	movi	r2,47
 f000d44:	1880011e 	bne	r3,r2,f000d4c <pf_open+0x5c>
 f000d48:	8c400044 	addi	r17,r17,1
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
 f000d4c:	88800003 	ldbu	r2,0(r17)
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */
 f000d50:	d8000515 	stw	zero,20(sp)

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
 f000d54:	20800536 	bltu	r4,r2,f000d6c <pf_open+0x7c>
		res = dir_rewind(dj);
 f000d58:	d9000304 	addi	r4,sp,12
 f000d5c:	f0009040 	call	f000904 <dir_rewind>
 f000d60:	1007883a 	mov	r3,r2
		return FR_NOT_ENABLED;

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
 f000d64:	10008a26 	beq	r2,zero,f000f90 <pf_open+0x2a0>
 f000d68:	0000ad06 	br	f001020 <pf_open+0x330>
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
 f000d6c:	d9c00417 	ldw	r7,16(sp)
 f000d70:	01000804 	movi	r4,32


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
 f000d74:	3805883a 	mov	r2,r7
 f000d78:	38c002c4 	addi	r3,r7,11
	while (cnt--) *d++ = (char)val;
 f000d7c:	11000005 	stb	r4,0(r2)
 f000d80:	10800044 	addi	r2,r2,1
 f000d84:	10fffd1e 	bne	r2,r3,f000d7c <pf_open+0x8c>
 f000d88:	02800204 	movi	r10,8
 f000d8c:	002b883a 	mov	r21,zero
 f000d90:	0013883a 	mov	r9,zero
 f000d94:	04000804 	movi	r16,32
 f000d98:	03c00bc4 	movi	r15,47
 f000d9c:	03800204 	movi	r14,8
 f000da0:	03400644 	movi	r13,25
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
 f000da4:	a8803fcc 	andi	r2,r21,255
 f000da8:	8885883a 	add	r2,r17,r2
 f000dac:	10c00003 	ldbu	r3,0(r2)
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
 f000db0:	52c03fcc 	andi	r11,r10,255
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
 f000db4:	03000b84 	movi	r12,46
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 f000db8:	19003fcc 	andi	r4,r3,255
 f000dbc:	2100201c 	xori	r4,r4,128
 f000dc0:	18803fcc 	andi	r2,r3,255
 f000dc4:	213fe004 	addi	r4,r4,-128
		if (c == '.' || i >= ni) {
 f000dc8:	49403fcc 	andi	r5,r9,255
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
 f000dcc:	ad400044 	addi	r21,r21,1
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
 f000dd0:	8080102e 	bgeu	r16,r2,f000e14 <pf_open+0x124>
 f000dd4:	23c00f26 	beq	r4,r15,f000e14 <pf_open+0x124>
		if (c == '.' || i >= ni) {
 f000dd8:	23000526 	beq	r4,r12,f000df0 <pf_open+0x100>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
 f000ddc:	18bfe7c4 	addi	r2,r3,-97
			sfn[i++] = c;
 f000de0:	394d883a 	add	r6,r7,r5
 f000de4:	4a400044 	addi	r9,r9,1
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
 f000de8:	10803fcc 	andi	r2,r2,255
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
 f000dec:	2ac00536 	bltu	r5,r11,f000e04 <pf_open+0x114>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 f000df0:	028002c4 	movi	r10,11
 f000df4:	02400204 	movi	r9,8
	p = *path;
	for (;;) {
		c = p[si++];
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') break;
 f000df8:	5b80061e 	bne	r11,r14,f000e14 <pf_open+0x124>
 f000dfc:	233fe926 	beq	r4,r12,f000da4 <pf_open+0xb4>
 f000e00:	00000406 	br	f000e14 <pf_open+0x124>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
 f000e04:	68800136 	bltu	r13,r2,f000e0c <pf_open+0x11c>
 f000e08:	18fff804 	addi	r3,r3,-32
			sfn[i++] = c;
 f000e0c:	30c00005 	stb	r3,0(r6)
 f000e10:	003fe406 	br	f000da4 <pf_open+0xb4>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
 f000e14:	18c03fcc 	andi	r3,r3,255
 f000e18:	00800804 	movi	r2,32
 f000e1c:	10c5403a 	cmpgeu	r2,r2,r3
 f000e20:	388002c5 	stb	r2,11(r7)
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
 f000e24:	d9000304 	addi	r4,sp,12
 f000e28:	f0009040 	call	f000904 <dir_rewind>
 f000e2c:	1007883a 	mov	r3,r2
	if (res != FR_OK) return res;
 f000e30:	10003f1e 	bne	r2,zero,f000f30 <pf_open+0x240>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
 f000e34:	d980030b 	ldhu	r6,12(sp)
 f000e38:	d9400717 	ldw	r5,28(sp)
 f000e3c:	dc000804 	addi	r16,sp,32
 f000e40:	318003cc 	andi	r6,r6,15
 f000e44:	300c917a 	slli	r6,r6,5
 f000e48:	8009883a 	mov	r4,r16
 f000e4c:	01c00804 	movi	r7,32
 f000e50:	f0005c80 	call	f0005c8 <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
 f000e54:	1006c03a 	cmpne	r3,r2,zero
 f000e58:	1000351e 	bne	r2,zero,f000f30 <pf_open+0x240>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 f000e5c:	d8800803 	ldbu	r2,32(sp)
 f000e60:	10003526 	beq	r2,zero,f000f38 <pf_open+0x248>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 f000e64:	d9c00ac3 	ldbu	r7,43(sp)
 f000e68:	3880020c 	andi	r2,r7,8
 f000e6c:	10000f1e 	bne	r2,zero,f000eac <pf_open+0x1bc>
 f000e70:	d9800417 	ldw	r6,16(sp)
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
 f000e74:	000b883a 	mov	r5,zero
 f000e78:	020002c4 	movi	r8,11
 f000e7c:	00000106 	br	f000e84 <pf_open+0x194>
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 f000e80:	2a000726 	beq	r5,r8,f000ea0 <pf_open+0x1b0>
 f000e84:	8145883a 	add	r2,r16,r5
 f000e88:	3147883a 	add	r3,r6,r5
 f000e8c:	11000007 	ldb	r4,0(r2)
 f000e90:	18800007 	ldb	r2,0(r3)
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
 f000e94:	29400044 	addi	r5,r5,1
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 f000e98:	20bff926 	beq	r4,r2,f000e80 <pf_open+0x190>
 f000e9c:	00000306 	br	f000eac <pf_open+0x1bc>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
 f000ea0:	308002c3 	ldbu	r2,11(r6)
 f000ea4:	10002a26 	beq	r2,zero,f000f50 <pf_open+0x260>
 f000ea8:	00003a06 	br	f000f94 <pf_open+0x2a4>
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;


	i = dj->index + 1;
 f000eac:	d880030b 	ldhu	r2,12(sp)
	DIR *dj			/* Pointer to directory object */
)
{
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
 f000eb0:	d4200b17 	ldw	r16,-32724(gp)


	i = dj->index + 1;
 f000eb4:	14c00044 	addi	r19,r2,1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 f000eb8:	98ffffcc 	andi	r3,r19,65535
 f000ebc:	18001b26 	beq	r3,zero,f000f2c <pf_open+0x23c>
 f000ec0:	d9400717 	ldw	r5,28(sp)
 f000ec4:	28001926 	beq	r5,zero,f000f2c <pf_open+0x23c>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
 f000ec8:	188003cc 	andi	r2,r3,15
 f000ecc:	1000151e 	bne	r2,zero,f000f24 <pf_open+0x234>
		dj->sect++;			/* Next sector */

		if (dj->clust == 0) {	/* Static table */
 f000ed0:	d9000617 	ldw	r4,24(sp)
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
		dj->sect++;			/* Next sector */
 f000ed4:	28800044 	addi	r2,r5,1
 f000ed8:	d8800715 	stw	r2,28(sp)
 f000edc:	04800044 	movi	r18,1

		if (dj->clust == 0) {	/* Static table */
 f000ee0:	2000031e 	bne	r4,zero,f000ef0 <pf_open+0x200>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
 f000ee4:	8080010b 	ldhu	r2,4(r16)
 f000ee8:	18800e36 	bltu	r3,r2,f000f24 <pf_open+0x234>
 f000eec:	00000f06 	br	f000f2c <pf_open+0x23c>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
 f000ef0:	80800083 	ldbu	r2,2(r16)
 f000ef4:	1806d13a 	srli	r3,r3,4
 f000ef8:	10bfffc4 	addi	r2,r2,-1
 f000efc:	1886703a 	and	r3,r3,r2
 f000f00:	1800081e 	bne	r3,zero,f000f24 <pf_open+0x234>
				clst = get_fat(dj->clust);		/* Get next cluster */
 f000f04:	f000a900 	call	f000a90 <get_fat>
 f000f08:	1009883a 	mov	r4,r2
				if (clst <= 1) return FR_DISK_ERR;
 f000f0c:	90800e2e 	bgeu	r18,r2,f000f48 <pf_open+0x258>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
 f000f10:	80800217 	ldw	r2,8(r16)
 f000f14:	2080052e 	bgeu	r4,r2,f000f2c <pf_open+0x23c>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
 f000f18:	d9000615 	stw	r4,24(sp)
				dj->sect = clust2sect(clst);
 f000f1c:	f0008b80 	call	f0008b8 <clust2sect>
 f000f20:	d8800715 	stw	r2,28(sp)
			}
		}
	}

	dj->index = i;
 f000f24:	dcc0030d 	sth	r19,12(sp)
 f000f28:	003fc206 	br	f000e34 <pf_open+0x144>
 f000f2c:	00c000c4 	movi	r3,3
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
 f000f30:	008000c4 	movi	r2,3
 f000f34:	18803a1e 	bne	r3,r2,f001020 <pf_open+0x330>
 f000f38:	d8800417 	ldw	r2,16(sp)
 f000f3c:	108002c3 	ldbu	r2,11(r2)
 f000f40:	10003626 	beq	r2,zero,f00101c <pf_open+0x32c>
 f000f44:	00003306 	br	f001014 <pf_open+0x324>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
 f000f48:	9007883a 	mov	r3,r18
 f000f4c:	003ff806 	br	f000f30 <pf_open+0x240>
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 f000f50:	3880040c 	andi	r2,r7,16
 f000f54:	10003126 	beq	r2,zero,f00101c <pf_open+0x32c>
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
 f000f58:	d8800d43 	ldbu	r2,53(sp)
 f000f5c:	d9400d03 	ldbu	r5,52(sp)
 f000f60:	d8c00ec3 	ldbu	r3,59(sp)
 f000f64:	1004923a 	slli	r2,r2,8
 f000f68:	d9000e83 	ldbu	r4,58(sp)
 f000f6c:	1806923a 	slli	r3,r3,8
 f000f70:	1144b03a 	or	r2,r2,r5
 f000f74:	1004943a 	slli	r2,r2,16
 f000f78:	1906b03a 	or	r3,r3,r4
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 f000f7c:	a9003fcc 	andi	r4,r21,255
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
 f000f80:	10c4b03a 	or	r2,r2,r3
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 f000f84:	8923883a 	add	r17,r17,r4
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
 f000f88:	d8800515 	stw	r2,20(sp)
 f000f8c:	003f7706 	br	f000d6c <pf_open+0x7c>
	if (*path == '/') path++;			/* Strip heading separator */
	dj->sclust = 0;						/* Set start directory (always root dir) */

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
		res = dir_rewind(dj);
		dir[0] = 0;
 f000f90:	d8000805 	stb	zero,32(sp)

	fs->flag = 0;
	dj.fn = sp;
	res = follow_path(&dj, dir, path);	/* Follow the file path */
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 f000f94:	d8800803 	ldbu	r2,32(sp)
 f000f98:	10001e26 	beq	r2,zero,f001014 <pf_open+0x324>
 f000f9c:	d8800ac3 	ldbu	r2,43(sp)
 f000fa0:	1080040c 	andi	r2,r2,16
 f000fa4:	10001b1e 	bne	r2,zero,f001014 <pf_open+0x324>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
 f000fa8:	d8800d43 	ldbu	r2,53(sp)
 f000fac:	d9400d03 	ldbu	r5,52(sp)
 f000fb0:	d8c00ec3 	ldbu	r3,59(sp)
 f000fb4:	1004923a 	slli	r2,r2,8
 f000fb8:	d9000e83 	ldbu	r4,58(sp)
 f000fbc:	1806923a 	slli	r3,r3,8
 f000fc0:	1144b03a 	or	r2,r2,r5
 f000fc4:	1004943a 	slli	r2,r2,16
 f000fc8:	1906b03a 	or	r3,r3,r4
 f000fcc:	10c4b03a 	or	r2,r2,r3
 f000fd0:	a0800815 	stw	r2,32(r20)
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 f000fd4:	d8800fc3 	ldbu	r2,63(sp)
 f000fd8:	d8c00f83 	ldbu	r3,62(sp)
 f000fdc:	d9000f43 	ldbu	r4,61(sp)
 f000fe0:	1004963a 	slli	r2,r2,24
 f000fe4:	1806943a 	slli	r3,r3,16
 f000fe8:	d9400f03 	ldbu	r5,60(sp)
 f000fec:	2008923a 	slli	r4,r4,8
 f000ff0:	10c4b03a 	or	r2,r2,r3
 f000ff4:	1144b03a 	or	r2,r2,r5
 f000ff8:	2088b03a 	or	r4,r4,r2
	fs->fptr = 0;						/* File pointer */
	fs->flag = FA_OPENED;
 f000ffc:	0007883a 	mov	r3,zero
 f001000:	00800044 	movi	r2,1
 f001004:	a0800045 	stb	r2,1(r20)
	if (res != FR_OK) return res;		/* Follow failed */
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 f001008:	a1000715 	stw	r4,28(r20)
	fs->fptr = 0;						/* File pointer */
 f00100c:	a0000615 	stw	zero,24(r20)
 f001010:	00000306 	br	f001020 <pf_open+0x330>
	fs->flag = FA_OPENED;

	return FR_OK;
 f001014:	00c000c4 	movi	r3,3
 f001018:	00000106 	br	f001020 <pf_open+0x330>
 f00101c:	00c00104 	movi	r3,4
}
 f001020:	1805883a 	mov	r2,r3
 f001024:	dfc01617 	ldw	ra,88(sp)
 f001028:	dd401517 	ldw	r21,84(sp)
 f00102c:	dd001417 	ldw	r20,80(sp)
 f001030:	dcc01317 	ldw	r19,76(sp)
 f001034:	dc801217 	ldw	r18,72(sp)
 f001038:	dc401117 	ldw	r17,68(sp)
 f00103c:	dc001017 	ldw	r16,64(sp)
 f001040:	dec01704 	addi	sp,sp,92
 f001044:	f800283a 	ret

0f001048 <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
 f001048:	defff304 	addi	sp,sp,-52
 f00104c:	dc000915 	stw	r16,36(sp)
 f001050:	dfc00c15 	stw	ra,48(sp)
 f001054:	dc800b15 	stw	r18,44(sp)
 f001058:	dc400a15 	stw	r17,40(sp)
 f00105c:	2021883a 	mov	r16,r4
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
 f001060:	d0200b15 	stw	zero,-32724(gp)
	if (!fs) return FR_OK;				/* Unregister fs object */
 f001064:	2000021e 	bne	r4,zero,f001070 <pf_mount+0x28>
 f001068:	0009883a 	mov	r4,zero
 f00106c:	00009a06 	br	f0012d8 <pf_mount+0x290>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
 f001070:	f0006e40 	call	f0006e4 <disk_initialize>
 f001074:	1080004c 	andi	r2,r2,1
 f001078:	1005003a 	cmpeq	r2,r2,zero
 f00107c:	1000021e 	bne	r2,zero,f001088 <pf_mount+0x40>
 f001080:	01000084 	movi	r4,2
 f001084:	00009406 	br	f0012d8 <pf_mount+0x290>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
 f001088:	d809883a 	mov	r4,sp
 f00108c:	000b883a 	mov	r5,zero
 f001090:	f0009900 	call	f000990 <check_fs>
 f001094:	1009883a 	mov	r4,r2
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
 f001098:	10c03fcc 	andi	r3,r2,255
 f00109c:	00800044 	movi	r2,1
 f0010a0:	18800226 	beq	r3,r2,f0010ac <pf_mount+0x64>
 f0010a4:	0025883a 	mov	r18,zero
 f0010a8:	00001606 	br	f001104 <pf_mount+0xbc>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
 f0010ac:	d809883a 	mov	r4,sp
 f0010b0:	000b883a 	mov	r5,zero
 f0010b4:	01806f84 	movi	r6,446
 f0010b8:	01c00404 	movi	r7,16
 f0010bc:	f0005c80 	call	f0005c8 <disk_readp>
 f0010c0:	1000731e 	bne	r2,zero,f001290 <pf_mount+0x248>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
 f0010c4:	d8800103 	ldbu	r2,4(sp)
 f0010c8:	10007326 	beq	r2,zero,f001298 <pf_mount+0x250>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
 f0010cc:	d88002c3 	ldbu	r2,11(sp)
 f0010d0:	d8c00283 	ldbu	r3,10(sp)
 f0010d4:	d9000243 	ldbu	r4,9(sp)
 f0010d8:	1004963a 	slli	r2,r2,24
 f0010dc:	1806943a 	slli	r3,r3,16
 f0010e0:	d9400203 	ldbu	r5,8(sp)
 f0010e4:	2008923a 	slli	r4,r4,8
 f0010e8:	10c4b03a 	or	r2,r2,r3
 f0010ec:	1144b03a 	or	r2,r2,r5
 f0010f0:	20a4b03a 	or	r18,r4,r2
				fmt = check_fs(buf, bsect);	/* Check the partition */
 f0010f4:	900b883a 	mov	r5,r18
 f0010f8:	d809883a 	mov	r4,sp
 f0010fc:	f0009900 	call	f000990 <check_fs>
 f001100:	1009883a 	mov	r4,r2
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 f001104:	20c03fcc 	andi	r3,r4,255
 f001108:	008000c4 	movi	r2,3
 f00110c:	18806026 	beq	r3,r2,f001290 <pf_mount+0x248>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
 f001110:	1800611e 	bne	r3,zero,f001298 <pf_mount+0x250>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
 f001114:	d809883a 	mov	r4,sp
 f001118:	900b883a 	mov	r5,r18
 f00111c:	01800344 	movi	r6,13
 f001120:	01c00904 	movi	r7,36
 f001124:	f0005c80 	call	f0005c8 <disk_readp>
 f001128:	1000591e 	bne	r2,zero,f001290 <pf_mount+0x248>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
 f00112c:	d8800283 	ldbu	r2,10(sp)
 f001130:	d8c00243 	ldbu	r3,9(sp)
 f001134:	1004923a 	slli	r2,r2,8
 f001138:	10c8b03a 	or	r4,r2,r3
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 f00113c:	20bfffcc 	andi	r2,r4,65535
 f001140:	10a0001c 	xori	r2,r2,32768
 f001144:	10a00004 	addi	r2,r2,-32768
 f001148:	10000226 	beq	r2,zero,f001154 <pf_mount+0x10c>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
 f00114c:	213fffcc 	andi	r4,r4,65535
 f001150:	00000a06 	br	f00117c <pf_mount+0x134>
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
 f001154:	d8800683 	ldbu	r2,26(sp)
 f001158:	d8c00643 	ldbu	r3,25(sp)
 f00115c:	d9000603 	ldbu	r4,24(sp)
 f001160:	1004963a 	slli	r2,r2,24
 f001164:	1806943a 	slli	r3,r3,16
 f001168:	d94005c3 	ldbu	r5,23(sp)
 f00116c:	2008923a 	slli	r4,r4,8
 f001170:	10c4b03a 	or	r2,r2,r3
 f001174:	1144b03a 	or	r2,r2,r5
 f001178:	2088b03a 	or	r4,r4,r2

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
 f00117c:	d94000c3 	ldbu	r5,3(sp)
 f001180:	f0014400 	call	f001440 <__mulsi3>
 f001184:	1023883a 	mov	r17,r2
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 f001188:	d90001c3 	ldbu	r4,7(sp)

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 f00118c:	d8800083 	ldbu	r2,2(sp)
 f001190:	d9800043 	ldbu	r6,1(sp)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 f001194:	d9c00183 	ldbu	r7,6(sp)
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 f001198:	d8c00143 	ldbu	r3,5(sp)
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 f00119c:	2008923a 	slli	r4,r4,8

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 f0011a0:	1004923a 	slli	r2,r2,8
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 f0011a4:	d9400103 	ldbu	r5,4(sp)
 f0011a8:	1806923a 	slli	r3,r3,8

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 f0011ac:	1184b03a 	or	r2,r2,r6
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 f0011b0:	21ccb03a 	or	r6,r4,r7
	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 f0011b4:	da000003 	ldbu	r8,0(sp)
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 f0011b8:	313fffcc 	andi	r4,r6,65535
 f0011bc:	2120001c 	xori	r4,r4,32768
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 f0011c0:	1946b03a 	or	r3,r3,r5

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 f0011c4:	9085883a 	add	r2,r18,r2
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 f0011c8:	21200004 	addi	r4,r4,-32768

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
 f0011cc:	80800315 	stw	r2,12(r16)
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
 f0011d0:	82000085 	stb	r8,2(r16)
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
 f0011d4:	80c0010d 	sth	r3,4(r16)
 f0011d8:	180f883a 	mov	r7,r3
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 f0011dc:	20000226 	beq	r4,zero,f0011e8 <pf_mount+0x1a0>

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
 f0011e0:	31bfffcc 	andi	r6,r6,65535
 f0011e4:	00000a06 	br	f001210 <pf_mount+0x1c8>
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
 f0011e8:	d8800583 	ldbu	r2,22(sp)
 f0011ec:	d8c00543 	ldbu	r3,21(sp)
 f0011f0:	d9000503 	ldbu	r4,20(sp)
 f0011f4:	1004963a 	slli	r2,r2,24
 f0011f8:	1806943a 	slli	r3,r3,16
 f0011fc:	d94004c3 	ldbu	r5,19(sp)
 f001200:	2008923a 	slli	r4,r4,8
 f001204:	10c4b03a 	or	r2,r2,r3
 f001208:	1144b03a 	or	r2,r2,r5
 f00120c:	208cb03a 	or	r6,r4,r2
	mclst = (tsect						/* Last cluster# + 1 */
 f001210:	d9000083 	ldbu	r4,2(sp)
 f001214:	d8c00043 	ldbu	r3,1(sp)
 f001218:	38bfffcc 	andi	r2,r7,65535
 f00121c:	2008923a 	slli	r4,r4,8
 f001220:	1004d13a 	srli	r2,r2,4
 f001224:	81400083 	ldbu	r5,2(r16)
 f001228:	20c8b03a 	or	r4,r4,r3
 f00122c:	3109c83a 	sub	r4,r6,r4
 f001230:	2449c83a 	sub	r4,r4,r17
 f001234:	2089c83a 	sub	r4,r4,r2
 f001238:	f0014300 	call	f001430 <__udivsi3>
 f00123c:	10c00084 	addi	r3,r2,2
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 f001240:	0083fd84 	movi	r2,4086
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
	mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
 f001244:	80c00215 	stw	r3,8(r16)

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
 f001248:	10c0132e 	bgeu	r2,r3,f001298 <pf_mount+0x250>
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
 f00124c:	00bffd94 	movui	r2,65526
 f001250:	10c01336 	bltu	r2,r3,f0012a0 <pf_mount+0x258>

	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 f001254:	80800317 	ldw	r2,12(r16)
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
 f001258:	00c00084 	movi	r3,2
 f00125c:	80c00005 	stb	r3,0(r16)
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 f001260:	1445883a 	add	r2,r2,r17
 f001264:	80800415 	stw	r2,16(r16)
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 f001268:	8080010b 	ldhu	r2,4(r16)
 f00126c:	80c00317 	ldw	r3,12(r16)

	fs->flag = 0;
 f001270:	80000045 	stb	zero,1(r16)
	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 f001274:	1004d13a 	srli	r2,r2,4

	fs->flag = 0;
	FatFs = fs;
 f001278:	0009883a 	mov	r4,zero
 f00127c:	d4200b15 	stw	r16,-32724(gp)
	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
 f001280:	10c5883a 	add	r2,r2,r3
 f001284:	8885883a 	add	r2,r17,r2
 f001288:	80800515 	stw	r2,20(r16)
 f00128c:	00001206 	br	f0012d8 <pf_mount+0x290>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
 f001290:	01000044 	movi	r4,1
 f001294:	00001006 	br	f0012d8 <pf_mount+0x290>
 f001298:	010001c4 	movi	r4,7
 f00129c:	00000e06 	br	f0012d8 <pf_mount+0x290>
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 f0012a0:	d8800883 	ldbu	r2,34(sp)
 f0012a4:	d8c00843 	ldbu	r3,33(sp)
 f0012a8:	d9000803 	ldbu	r4,32(sp)
 f0012ac:	1004963a 	slli	r2,r2,24
 f0012b0:	1806943a 	slli	r3,r3,16
 f0012b4:	d94007c3 	ldbu	r5,31(sp)
 f0012b8:	2008923a 	slli	r4,r4,8
 f0012bc:	10c4b03a 	or	r2,r2,r3
 f0012c0:	1144b03a 	or	r2,r2,r5
 f0012c4:	2088b03a 	or	r4,r4,r2
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
 f0012c8:	008000c4 	movi	r2,3
 f0012cc:	80800005 	stb	r2,0(r16)
	if (_FS_FAT32 && fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
 f0012d0:	81000415 	stw	r4,16(r16)
 f0012d4:	003fe406 	br	f001268 <pf_mount+0x220>

	fs->flag = 0;
	FatFs = fs;

	return FR_OK;
}
 f0012d8:	2005883a 	mov	r2,r4
 f0012dc:	dfc00c17 	ldw	ra,48(sp)
 f0012e0:	dc800b17 	ldw	r18,44(sp)
 f0012e4:	dc400a17 	ldw	r17,40(sp)
 f0012e8:	dc000917 	ldw	r16,36(sp)
 f0012ec:	dec00d04 	addi	sp,sp,52
 f0012f0:	f800283a 	ret

0f0012f4 <udivmodsi4>:
 f0012f4:	29001b2e 	bgeu	r5,r4,f001364 <udivmodsi4+0x70>
 f0012f8:	28001a16 	blt	r5,zero,f001364 <udivmodsi4+0x70>
 f0012fc:	00800044 	movi	r2,1
 f001300:	0007883a 	mov	r3,zero
 f001304:	01c007c4 	movi	r7,31
 f001308:	00000306 	br	f001318 <udivmodsi4+0x24>
 f00130c:	19c01326 	beq	r3,r7,f00135c <udivmodsi4+0x68>
 f001310:	18c00044 	addi	r3,r3,1
 f001314:	28000416 	blt	r5,zero,f001328 <udivmodsi4+0x34>
 f001318:	294b883a 	add	r5,r5,r5
 f00131c:	1085883a 	add	r2,r2,r2
 f001320:	293ffa36 	bltu	r5,r4,f00130c <udivmodsi4+0x18>
 f001324:	10000d26 	beq	r2,zero,f00135c <udivmodsi4+0x68>
 f001328:	0007883a 	mov	r3,zero
 f00132c:	21400236 	bltu	r4,r5,f001338 <udivmodsi4+0x44>
 f001330:	2149c83a 	sub	r4,r4,r5
 f001334:	1886b03a 	or	r3,r3,r2
 f001338:	1004d07a 	srli	r2,r2,1
 f00133c:	280ad07a 	srli	r5,r5,1
 f001340:	103ffa1e 	bne	r2,zero,f00132c <udivmodsi4+0x38>
 f001344:	30000226 	beq	r6,zero,f001350 <udivmodsi4+0x5c>
 f001348:	2005883a 	mov	r2,r4
 f00134c:	f800283a 	ret
 f001350:	1809883a 	mov	r4,r3
 f001354:	2005883a 	mov	r2,r4
 f001358:	f800283a 	ret
 f00135c:	0007883a 	mov	r3,zero
 f001360:	003ff806 	br	f001344 <udivmodsi4+0x50>
 f001364:	00800044 	movi	r2,1
 f001368:	0007883a 	mov	r3,zero
 f00136c:	003fef06 	br	f00132c <udivmodsi4+0x38>

0f001370 <__divsi3>:
 f001370:	defffe04 	addi	sp,sp,-8
 f001374:	dc000015 	stw	r16,0(sp)
 f001378:	dfc00115 	stw	ra,4(sp)
 f00137c:	0021883a 	mov	r16,zero
 f001380:	20000c16 	blt	r4,zero,f0013b4 <__divsi3+0x44>
 f001384:	000d883a 	mov	r6,zero
 f001388:	28000e16 	blt	r5,zero,f0013c4 <__divsi3+0x54>
 f00138c:	f0012f40 	call	f0012f4 <udivmodsi4>
 f001390:	1007883a 	mov	r3,r2
 f001394:	8005003a 	cmpeq	r2,r16,zero
 f001398:	1000011e 	bne	r2,zero,f0013a0 <__divsi3+0x30>
 f00139c:	00c7c83a 	sub	r3,zero,r3
 f0013a0:	1805883a 	mov	r2,r3
 f0013a4:	dfc00117 	ldw	ra,4(sp)
 f0013a8:	dc000017 	ldw	r16,0(sp)
 f0013ac:	dec00204 	addi	sp,sp,8
 f0013b0:	f800283a 	ret
 f0013b4:	0109c83a 	sub	r4,zero,r4
 f0013b8:	04000044 	movi	r16,1
 f0013bc:	000d883a 	mov	r6,zero
 f0013c0:	283ff20e 	bge	r5,zero,f00138c <__divsi3+0x1c>
 f0013c4:	014bc83a 	sub	r5,zero,r5
 f0013c8:	8021003a 	cmpeq	r16,r16,zero
 f0013cc:	003fef06 	br	f00138c <__divsi3+0x1c>

0f0013d0 <__modsi3>:
 f0013d0:	deffff04 	addi	sp,sp,-4
 f0013d4:	dfc00015 	stw	ra,0(sp)
 f0013d8:	01800044 	movi	r6,1
 f0013dc:	2807883a 	mov	r3,r5
 f0013e0:	20000416 	blt	r4,zero,f0013f4 <__modsi3+0x24>
 f0013e4:	28000c16 	blt	r5,zero,f001418 <__modsi3+0x48>
 f0013e8:	dfc00017 	ldw	ra,0(sp)
 f0013ec:	dec00104 	addi	sp,sp,4
 f0013f0:	f0012f41 	jmpi	f0012f4 <udivmodsi4>
 f0013f4:	0109c83a 	sub	r4,zero,r4
 f0013f8:	28000b16 	blt	r5,zero,f001428 <__modsi3+0x58>
 f0013fc:	180b883a 	mov	r5,r3
 f001400:	01800044 	movi	r6,1
 f001404:	f0012f40 	call	f0012f4 <udivmodsi4>
 f001408:	0085c83a 	sub	r2,zero,r2
 f00140c:	dfc00017 	ldw	ra,0(sp)
 f001410:	dec00104 	addi	sp,sp,4
 f001414:	f800283a 	ret
 f001418:	014bc83a 	sub	r5,zero,r5
 f00141c:	dfc00017 	ldw	ra,0(sp)
 f001420:	dec00104 	addi	sp,sp,4
 f001424:	f0012f41 	jmpi	f0012f4 <udivmodsi4>
 f001428:	0147c83a 	sub	r3,zero,r5
 f00142c:	003ff306 	br	f0013fc <__modsi3+0x2c>

0f001430 <__udivsi3>:
 f001430:	000d883a 	mov	r6,zero
 f001434:	f0012f41 	jmpi	f0012f4 <udivmodsi4>

0f001438 <__umodsi3>:
 f001438:	01800044 	movi	r6,1
 f00143c:	f0012f41 	jmpi	f0012f4 <udivmodsi4>

0f001440 <__mulsi3>:
 f001440:	20000a26 	beq	r4,zero,f00146c <__mulsi3+0x2c>
 f001444:	0007883a 	mov	r3,zero
 f001448:	2080004c 	andi	r2,r4,1
 f00144c:	1005003a 	cmpeq	r2,r2,zero
 f001450:	2008d07a 	srli	r4,r4,1
 f001454:	1000011e 	bne	r2,zero,f00145c <__mulsi3+0x1c>
 f001458:	1947883a 	add	r3,r3,r5
 f00145c:	294b883a 	add	r5,r5,r5
 f001460:	203ff91e 	bne	r4,zero,f001448 <__mulsi3+0x8>
 f001464:	1805883a 	mov	r2,r3
 f001468:	f800283a 	ret
 f00146c:	0007883a 	mov	r3,zero
 f001470:	1805883a 	mov	r2,r3
 f001474:	f800283a 	ret

0f001478 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 f001478:	00800034 	movhi	r2,0
 f00147c:	10801004 	addi	r2,r2,64
 f001480:	10800017 	ldw	r2,0(r2)
 f001484:	00ffde84 	movi	r3,-134
 f001488:	10001d26 	beq	r2,zero,f001500 <alt_alarm_start+0x88>
  {
    if (alarm)
 f00148c:	00fffa84 	movi	r3,-22
 f001490:	20001b26 	beq	r4,zero,f001500 <alt_alarm_start+0x88>
    {
      alarm->callback = callback;
 f001494:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 f001498:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f00149c:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f0014a0:	00bfff84 	movi	r2,-2
 f0014a4:	3084703a 	and	r2,r6,r2
 f0014a8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 f0014ac:	00800034 	movhi	r2,0
 f0014b0:	10801104 	addi	r2,r2,68
 f0014b4:	10c00017 	ldw	r3,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 f0014b8:	18800044 	addi	r2,r3,1
 f0014bc:	2885883a 	add	r2,r5,r2
 f0014c0:	20800215 	stw	r2,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 f0014c4:	10c0032e 	bgeu	r2,r3,f0014d4 <alt_alarm_start+0x5c>
      {
        alarm->rollover = 1;
 f0014c8:	00800044 	movi	r2,1
 f0014cc:	20800405 	stb	r2,16(r4)
 f0014d0:	00000106 	br	f0014d8 <alt_alarm_start+0x60>
      }
      else
      {
        alarm->rollover = 0;
 f0014d4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 f0014d8:	00800034 	movhi	r2,0
 f0014dc:	10800304 	addi	r2,r2,12
  entry->next     = list->next;
 f0014e0:	10c00017 	ldw	r3,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 f0014e4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 f0014e8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 f0014ec:	10c00017 	ldw	r3,0(r2)
  list->next           = entry;
 f0014f0:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 f0014f4:	19000115 	stw	r4,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 f0014f8:	3001703a 	wrctl	status,r6
 f0014fc:	0007883a 	mov	r3,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
 f001500:	1805883a 	mov	r2,r3
 f001504:	f800283a 	ret

0f001508 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 f001508:	008007c4 	movi	r2,31
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 f00150c:	200f883a 	mov	r7,r4
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
 f001510:	00fffa84 	movi	r3,-22
 f001514:	11002236 	bltu	r2,r4,f0015a0 <alt_irq_register+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f001518:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f00151c:	027fff84 	movi	r9,-2
 f001520:	5244703a 	and	r2,r10,r9
 f001524:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 f001528:	200490fa 	slli	r2,r4,3
 f00152c:	00c00034 	movhi	r3,0
 f001530:	18c01e04 	addi	r3,r3,120
 f001534:	02000034 	movhi	r8,0
 f001538:	42000c04 	addi	r8,r8,48
 f00153c:	10c5883a 	add	r2,r2,r3
    alt_irq[id].context = context;
 f001540:	11400115 	stw	r5,4(r2)
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 f001544:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 f001548:	30000826 	beq	r6,zero,f00156c <alt_irq_register+0x64>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f00154c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f001550:	2244703a 	and	r2,r4,r9
 f001554:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 f001558:	00c00044 	movi	r3,1
 f00155c:	19c6983a 	sll	r3,r3,r7
 f001560:	40800017 	ldw	r2,0(r8)
 f001564:	10c4b03a 	or	r2,r2,r3
 f001568:	00000706 	br	f001588 <alt_irq_register+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f00156c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f001570:	2244703a 	and	r2,r4,r9
 f001574:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 f001578:	00ffff84 	movi	r3,-2
 f00157c:	19c6183a 	rol	r3,r3,r7
 f001580:	40800017 	ldw	r2,0(r8)
 f001584:	10c4703a 	and	r2,r2,r3
 f001588:	40800015 	stw	r2,0(r8)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 f00158c:	40800017 	ldw	r2,0(r8)
 f001590:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 f001594:	2001703a 	wrctl	status,r4
 f001598:	5001703a 	wrctl	status,r10
 f00159c:	0007883a 	mov	r3,zero

    alt_irq_enable_all(status);
  }
  return rc; 
}
 f0015a0:	1805883a 	mov	r2,r3
 f0015a4:	f800283a 	ret

0f0015a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 f0015a8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 f0015ac:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 f0015b0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 f0015b4:	f0016ec0 	call	f0016ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 f0015b8:	f0016b40 	call	f0016b4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 f0015bc:	d1200d17 	ldw	r4,-32716(gp)
 f0015c0:	d1600e17 	ldw	r5,-32712(gp)
 f0015c4:	d1a00f17 	ldw	r6,-32708(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 f0015c8:	dfc00017 	ldw	ra,0(sp)
 f0015cc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 f0015d0:	f0002041 	jmpi	f000204 <main>

0f0015d4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f0015d4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f0015d8:	00bfff84 	movi	r2,-2
 f0015dc:	2884703a 	and	r2,r5,r2
 f0015e0:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 f0015e4:	20c00017 	ldw	r3,0(r4)
 f0015e8:	20800117 	ldw	r2,4(r4)
 f0015ec:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 f0015f0:	20800117 	ldw	r2,4(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 f0015f4:	21000115 	stw	r4,4(r4)
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  entry->previous->next = entry->next;
 f0015f8:	10c00015 	stw	r3,0(r2)
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  entry->next     = entry;
 f0015fc:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 f001600:	2801703a 	wrctl	status,r5
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 f001604:	f800283a 	ret

0f001608 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 f001608:	defffd04 	addi	sp,sp,-12

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 f00160c:	d0a01117 	ldw	r2,-32700(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 f001610:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 f001614:	d4200317 	ldw	r16,-32756(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 f001618:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 f00161c:	dfc00215 	stw	ra,8(sp)
 f001620:	dc400115 	stw	r17,4(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 f001624:	d0a01115 	stw	r2,-32700(gp)
 f001628:	00001b06 	br	f001698 <alt_tick+0x90>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 f00162c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 f001630:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 f001634:	10000326 	beq	r2,zero,f001644 <alt_tick+0x3c>
 f001638:	d0a01117 	ldw	r2,-32700(gp)
 f00163c:	1000011e 	bne	r2,zero,f001644 <alt_tick+0x3c>
    {
      alarm->rollover = 0;
 f001640:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 f001644:	d0e01117 	ldw	r3,-32700(gp)
 f001648:	80800217 	ldw	r2,8(r16)
 f00164c:	18801136 	bltu	r3,r2,f001694 <alt_tick+0x8c>
 f001650:	80800403 	ldbu	r2,16(r16)
 f001654:	10000f1e 	bne	r2,zero,f001694 <alt_tick+0x8c>
    {
      next_callback = alarm->callback (alarm->context);
 f001658:	81000517 	ldw	r4,20(r16)
 f00165c:	80800317 	ldw	r2,12(r16)
 f001660:	103ee83a 	callr	r2
 f001664:	1009883a 	mov	r4,r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 f001668:	1000031e 	bne	r2,zero,f001678 <alt_tick+0x70>
      {
        alt_alarm_stop (alarm);
 f00166c:	8009883a 	mov	r4,r16
 f001670:	f0015d40 	call	f0015d4 <alt_alarm_stop>
 f001674:	00000706 	br	f001694 <alt_tick+0x8c>
      }
      else
      {
        alarm->time += next_callback;
 f001678:	80800217 	ldw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 f00167c:	d0e01117 	ldw	r3,-32700(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 f001680:	1105883a 	add	r2,r2,r4
 f001684:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 f001688:	10c0022e 	bgeu	r2,r3,f001694 <alt_tick+0x8c>
        {
          alarm->rollover = 1;
 f00168c:	00800044 	movi	r2,1
 f001690:	80800405 	stb	r2,16(r16)
 f001694:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 f001698:	d0a00304 	addi	r2,gp,-32756
 f00169c:	80bfe31e 	bne	r16,r2,f00162c <alt_tick+0x24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 f0016a0:	dfc00217 	ldw	ra,8(sp)
 f0016a4:	dc400117 	ldw	r17,4(sp)
 f0016a8:	dc000017 	ldw	r16,0(sp)
 f0016ac:	dec00304 	addi	sp,sp,12
 f0016b0:	f800283a 	ret

0f0016b4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 f0016b4:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 f0016b8:	000b883a 	mov	r5,zero
 f0016bc:	01800084 	movi	r6,2
 f0016c0:	01c0fa04 	movi	r7,1000
 f0016c4:	01040034 	movhi	r4,4096
 f0016c8:	21004004 	addi	r4,r4,256
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 f0016cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 f0016d0:	f0019a40 	call	f0019a4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_CFI_FLASH_INIT ( ROM_0, rom_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    M2VDD_HX8347A_INIT ( M2VDD_HX8347A_0, m2vdd_hx8347a_0);
 f0016d4:	d1200504 	addi	r4,gp,-32748
 f0016d8:	f001a380 	call	f001a38 <m2vdd_hx8347a_init>
    M2VDEC_INIT ( M2VDEC_0, m2vdec_0);
 f0016dc:	d1200604 	addi	r4,gp,-32744
}
 f0016e0:	dfc00017 	ldw	ra,0(sp)
 f0016e4:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_CFI_FLASH_INIT ( ROM_0, rom_0);
    ALTERA_AVALON_FIFO_INIT ( FIFO_0, fifo_0);
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    M2VDD_HX8347A_INIT ( M2VDD_HX8347A_0, m2vdd_hx8347a_0);
    M2VDEC_INIT ( M2VDEC_0, m2vdec_0);
 f0016e8:	f001ae81 	jmpi	f001ae8 <m2vdec_init>

0f0016ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 f0016ec:	deffff04 	addi	sp,sp,-4
 f0016f0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 f0016f4:	f001aec0 	call	f001aec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 f0016f8:	00800044 	movi	r2,1
 f0016fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 f001700:	dfc00017 	ldw	ra,0(sp)
 f001704:	dec00104 	addi	sp,sp,4
 f001708:	f800283a 	ret

0f00170c <altera_avalon_fifo_read_backpressure>:
}

int altera_avalon_fifo_read_backpressure (alt_u32 read_address){
    // Read data from FIFO directly. If FIFO is empty and backpressure is supported, this call is backpressure.
    return IORD_ALTERA_AVALON_FIFO_DATA(read_address);  
}
 f00170c:	20800037 	ldwio	r2,0(r4)
 f001710:	f800283a 	ret

0f001714 <altera_avalon_fifo_read_other_info>:
}

int altera_avalon_fifo_read_other_info(alt_u32 read_address)
{
    return IORD_ALTERA_AVALON_FIFO_OTHER_INFO(read_address);
}
 f001714:	20800137 	ldwio	r2,4(r4)
 f001718:	f800283a 	ret

0f00171c <altera_avalon_fifo_read_level>:
}

int altera_avalon_fifo_read_level(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}
 f00171c:	20800037 	ldwio	r2,0(r4)
 f001720:	f800283a 	ret

0f001724 <altera_avalon_fifo_read_event>:
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}

int altera_avalon_fifo_read_event(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask);
 f001724:	20800237 	ldwio	r2,8(r4)
}
 f001728:	1144703a 	and	r2,r2,r5
 f00172c:	f800283a 	ret

0f001730 <altera_avalon_fifo_read_almostempty>:
}

int altera_avalon_fifo_read_almostempty(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address);
}
 f001730:	20800537 	ldwio	r2,20(r4)
 f001734:	f800283a 	ret

0f001738 <altera_avalon_fifo_read_almostfull>:
}

int altera_avalon_fifo_read_almostfull(alt_u32 address)
{
    return IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address);
}
 f001738:	20800437 	ldwio	r2,16(r4)
 f00173c:	f800283a 	ret

0f001740 <altera_avalon_fifo_read_ienable>:
}

int altera_avalon_fifo_read_ienable(alt_u32 address, alt_u32 mask)
{
	
    return (IORD_ALTERA_AVALON_FIFO_IENABLE(address) & mask);
 f001740:	20800337 	ldwio	r2,12(r4)
}
 f001744:	1144703a 	and	r2,r2,r5
 f001748:	f800283a 	ret

0f00174c <altera_avalon_fifo_read_status>:
    return ALTERA_AVALON_FIFO_OK;
}

int altera_avalon_fifo_read_status(alt_u32 address, alt_u32 mask)
{
    return (IORD_ALTERA_AVALON_FIFO_STATUS(address) & mask);
 f00174c:	20800137 	ldwio	r2,4(r4)
}
 f001750:	1144703a 	and	r2,r2,r5
 f001754:	f800283a 	ret

0f001758 <altera_avalon_fifo_read_fifo>:
    }
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 f001758:	defffe04 	addi	sp,sp,-8
 f00175c:	dc000015 	stw	r16,0(sp)
 f001760:	2021883a 	mov	r16,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f001764:	2809883a 	mov	r4,r5
 f001768:	01400084 	movi	r5,2
    }
    return return_val;
}

int altera_avalon_fifo_read_fifo(alt_u32 read_address, alt_u32 ctrl_address)
{
 f00176c:	dfc00115 	stw	ra,4(sp)
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f001770:	f00174c0 	call	f00174c <altera_avalon_fifo_read_status>
 f001774:	0007883a 	mov	r3,zero
 f001778:	1000011e 	bne	r2,zero,f001780 <altera_avalon_fifo_read_fifo+0x28>
    {
        return IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 f00177c:	80c00037 	ldwio	r3,0(r16)
    }
    return 0;
}
 f001780:	1805883a 	mov	r2,r3
 f001784:	dfc00117 	ldw	ra,4(sp)
 f001788:	dc000017 	ldw	r16,0(sp)
 f00178c:	dec00204 	addi	sp,sp,8
 f001790:	f800283a 	ret

0f001794 <altera_avalon_read_fifo>:
        return ALTERA_AVALON_FIFO_FULL;
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 f001794:	defffc04 	addi	sp,sp,-16
 f001798:	dc800215 	stw	r18,8(sp)
 f00179c:	dc000015 	stw	r16,0(sp)
 f0017a0:	2025883a 	mov	r18,r4
 f0017a4:	2821883a 	mov	r16,r5
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f0017a8:	2809883a 	mov	r4,r5
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
 f0017ac:	30000015 	stw	zero,0(r6)
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f0017b0:	01400084 	movi	r5,2
        return ALTERA_AVALON_FIFO_FULL;
    }
}

int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
 f0017b4:	dc400115 	stw	r17,4(sp)
 f0017b8:	dfc00315 	stw	ra,12(sp)
 f0017bc:	3023883a 	mov	r17,r6
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f0017c0:	f00174c0 	call	f00174c <altera_avalon_fifo_read_status>
 f0017c4:	0007883a 	mov	r3,zero
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 f0017c8:	8009883a 	mov	r4,r16
int altera_avalon_read_fifo(alt_u32 read_address, alt_u32 ctrl_address, int *data)
{
    int return_val = 0;
    *data = 0;
    
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_E_MSK))
 f0017cc:	1000041e 	bne	r2,zero,f0017e0 <altera_avalon_read_fifo+0x4c>
    {
        return_val = altera_avalon_fifo_read_level(ctrl_address);
 f0017d0:	f00171c0 	call	f00171c <altera_avalon_fifo_read_level>
 f0017d4:	1007883a 	mov	r3,r2
        *data = IORD_ALTERA_AVALON_FIFO_DATA(read_address);
 f0017d8:	90800037 	ldwio	r2,0(r18)
 f0017dc:	88800015 	stw	r2,0(r17)
    
    }
    return return_val;
}
 f0017e0:	1805883a 	mov	r2,r3
 f0017e4:	dfc00317 	ldw	ra,12(sp)
 f0017e8:	dc800217 	ldw	r18,8(sp)
 f0017ec:	dc400117 	ldw	r17,4(sp)
 f0017f0:	dc000017 	ldw	r16,0(sp)
 f0017f4:	dec00404 	addi	sp,sp,16
 f0017f8:	f800283a 	ret

0f0017fc <altera_avalon_fifo_write_other_info>:
}

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 f0017fc:	defffd04 	addi	sp,sp,-12
 f001800:	dc400115 	stw	r17,4(sp)
 f001804:	2023883a 	mov	r17,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 f001808:	2809883a 	mov	r4,r5
 f00180c:	01400044 	movi	r5,1
}

int altera_avalon_fifo_write_other_info(alt_u32 write_address,
					alt_u32 ctrl_address,
					alt_u32 data)
{
 f001810:	dc000015 	stw	r16,0(sp)
 f001814:	dfc00215 	stw	ra,8(sp)
 f001818:	3021883a 	mov	r16,r6
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 f00181c:	f00174c0 	call	f00174c <altera_avalon_fifo_read_status>
 f001820:	00ffff04 	movi	r3,-4
 f001824:	1000021e 	bne	r2,zero,f001830 <altera_avalon_fifo_write_other_info+0x34>
    {
	IOWR_ALTERA_AVALON_FIFO_OTHER_INFO(write_address, data);
 f001828:	8c000135 	stwio	r16,4(r17)
 f00182c:	0007883a 	mov	r3,zero
    }
    else
    {
	return ALTERA_AVALON_FIFO_FULL;
    }
}
 f001830:	1805883a 	mov	r2,r3
 f001834:	dfc00217 	ldw	ra,8(sp)
 f001838:	dc400117 	ldw	r17,4(sp)
 f00183c:	dc000017 	ldw	r16,0(sp)
 f001840:	dec00304 	addi	sp,sp,12
 f001844:	f800283a 	ret

0f001848 <altera_avalon_fifo_write_fifo>:
}

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 f001848:	defffd04 	addi	sp,sp,-12
 f00184c:	dc400115 	stw	r17,4(sp)
 f001850:	2023883a 	mov	r17,r4
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 f001854:	2809883a 	mov	r4,r5
 f001858:	01400044 	movi	r5,1
}

int altera_avalon_fifo_write_fifo(alt_u32 write_address,
                                  alt_u32 ctrl_address,
                                  alt_u32 data)
{
 f00185c:	dc000015 	stw	r16,0(sp)
 f001860:	dfc00215 	stw	ra,8(sp)
 f001864:	3021883a 	mov	r16,r6
    if(!altera_avalon_fifo_read_status(ctrl_address, ALTERA_AVALON_FIFO_STATUS_F_MSK))
 f001868:	f00174c0 	call	f00174c <altera_avalon_fifo_read_status>
 f00186c:	00ffff04 	movi	r3,-4
 f001870:	1000021e 	bne	r2,zero,f00187c <altera_avalon_fifo_write_fifo+0x34>
    {
        IOWR_ALTERA_AVALON_FIFO_DATA(write_address, data);
 f001874:	8c000035 	stwio	r16,0(r17)
 f001878:	0007883a 	mov	r3,zero
    }
    else
    {
        return ALTERA_AVALON_FIFO_FULL;
    }
}
 f00187c:	1805883a 	mov	r2,r3
 f001880:	dfc00217 	ldw	ra,8(sp)
 f001884:	dc400117 	ldw	r17,4(sp)
 f001888:	dc000017 	ldw	r16,0(sp)
 f00188c:	dec00304 	addi	sp,sp,12
 f001890:	f800283a 	ret

0f001894 <altera_avalon_fifo_write_almostempty>:
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}

int altera_avalon_fifo_write_almostempty(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address, data);
 f001894:	20800504 	addi	r2,r4,20
 f001898:	21400535 	stwio	r5,20(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTEMPTY(address) == data)
 f00189c:	10800037 	ldwio	r2,0(r2)
 f0018a0:	0007883a 	mov	r3,zero
 f0018a4:	11400126 	beq	r2,r5,f0018ac <altera_avalon_fifo_write_almostempty+0x18>
 f0018a8:	00ffff44 	movi	r3,-3
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}
 f0018ac:	1805883a 	mov	r2,r3
 f0018b0:	f800283a 	ret

0f0018b4 <altera_avalon_fifo_write_almostfull>:
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
}

int altera_avalon_fifo_write_almostfull(alt_u32 address, alt_u32 data)
{
    IOWR_ALTERA_AVALON_FIFO_ALMOSTFULL(address, data);
 f0018b4:	20800404 	addi	r2,r4,16
 f0018b8:	21400435 	stwio	r5,16(r4)
    if(IORD_ALTERA_AVALON_FIFO_ALMOSTFULL(address) == data)
 f0018bc:	10800037 	ldwio	r2,0(r2)
 f0018c0:	0007883a 	mov	r3,zero
 f0018c4:	11400126 	beq	r2,r5,f0018cc <altera_avalon_fifo_write_almostfull+0x18>
 f0018c8:	00ffff44 	movi	r3,-3
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
}
 f0018cc:	1805883a 	mov	r2,r3
 f0018d0:	f800283a 	ret

0f0018d4 <altera_avalon_fifo_write_ienable>:
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}

int altera_avalon_fifo_write_ienable(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_IENABLE(address, mask);
 f0018d4:	20800304 	addi	r2,r4,12
 f0018d8:	21400335 	stwio	r5,12(r4)
    if(IORD_ALTERA_AVALON_FIFO_IENABLE(address) == mask)
 f0018dc:	10800037 	ldwio	r2,0(r2)
 f0018e0:	0007883a 	mov	r3,zero
 f0018e4:	11400126 	beq	r2,r5,f0018ec <altera_avalon_fifo_write_ienable+0x18>
 f0018e8:	00ffff84 	movi	r3,-2
        return ALTERA_AVALON_FIFO_OK;
    else
        return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
}
 f0018ec:	1805883a 	mov	r2,r3
 f0018f0:	f800283a 	ret

0f0018f4 <altera_avalon_fifo_clear_event>:
    return IORD_ALTERA_AVALON_FIFO_LEVEL(address);
}

int altera_avalon_fifo_clear_event(alt_u32 address, alt_u32 mask)
{
    IOWR_ALTERA_AVALON_FIFO_EVENT(address, mask);
 f0018f4:	20800204 	addi	r2,r4,8
 f0018f8:	21400235 	stwio	r5,8(r4)
    if((IORD_ALTERA_AVALON_FIFO_EVENT(address) & mask) == 0)
 f0018fc:	10800037 	ldwio	r2,0(r2)
 f001900:	1144703a 	and	r2,r2,r5
 f001904:	1004c03a 	cmpne	r2,r2,zero
        return ALTERA_AVALON_FIFO_OK;
    else
    return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
}
 f001908:	0085c83a 	sub	r2,zero,r2
 f00190c:	f800283a 	ret

0f001910 <altera_avalon_fifo_init>:



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 f001910:	defffb04 	addi	sp,sp,-20
 f001914:	dc000015 	stw	r16,0(sp)
 f001918:	2821883a 	mov	r16,r5
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 f00191c:	01400fc4 	movi	r5,63



int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
 f001920:	dcc00315 	stw	r19,12(sp)
 f001924:	dc800215 	stw	r18,8(sp)
 f001928:	dc400115 	stw	r17,4(sp)
 f00192c:	dfc00415 	stw	ra,16(sp)
 f001930:	2023883a 	mov	r17,r4
 f001934:	3027883a 	mov	r19,r6
 f001938:	3825883a 	mov	r18,r7
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 f00193c:	f0018f40 	call	f0018f4 <altera_avalon_fifo_clear_event>
 f001940:	00ffffc4 	movi	r3,-1
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 f001944:	800b883a 	mov	r5,r16
 f001948:	8809883a 	mov	r4,r17


int altera_avalon_fifo_init(alt_u32 address, alt_u32 ienable,
                            alt_u32 emptymark, alt_u32 fullmark)
{
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
 f00194c:	10000d1e 	bne	r2,zero,f001984 <altera_avalon_fifo_init+0x74>
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 f001950:	f0018d40 	call	f0018d4 <altera_avalon_fifo_write_ienable>
 f001954:	00ffff84 	movi	r3,-2
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 f001958:	900b883a 	mov	r5,r18
 f00195c:	8809883a 	mov	r4,r17
    if(altera_avalon_fifo_clear_event(address, ALTERA_AVALON_FIFO_EVENT_ALL) != ALTERA_AVALON_FIFO_OK)
    {
        return ALTERA_AVALON_FIFO_EVENT_CLEAR_ERROR;
    }

    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
 f001960:	1000081e 	bne	r2,zero,f001984 <altera_avalon_fifo_init+0x74>
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 f001964:	f0018b40 	call	f0018b4 <altera_avalon_fifo_write_almostfull>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 f001968:	8809883a 	mov	r4,r17
 f00196c:	980b883a 	mov	r5,r19
    if( altera_avalon_fifo_write_ienable(address, ienable) != ALTERA_AVALON_FIFO_OK)
    {
         return ALTERA_AVALON_FIFO_IENABLE_WRITE_ERROR;
    }

    if( altera_avalon_fifo_write_almostfull(address, fullmark) != ALTERA_AVALON_FIFO_OK)
 f001970:	1000031e 	bne	r2,zero,f001980 <altera_avalon_fifo_init+0x70>
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }
  
    if( altera_avalon_fifo_write_almostempty(address, emptymark) != ALTERA_AVALON_FIFO_OK)
 f001974:	f0018940 	call	f001894 <altera_avalon_fifo_write_almostempty>
 f001978:	0007883a 	mov	r3,zero
 f00197c:	10000126 	beq	r2,zero,f001984 <altera_avalon_fifo_init+0x74>
 f001980:	00ffff44 	movi	r3,-3
    {
        return ALTERA_AVALON_FIFO_THRESHOLD_WRITE_ERROR;
    }

    return ALTERA_AVALON_FIFO_OK;
}
 f001984:	1805883a 	mov	r2,r3
 f001988:	dfc00417 	ldw	ra,16(sp)
 f00198c:	dcc00317 	ldw	r19,12(sp)
 f001990:	dc800217 	ldw	r18,8(sp)
 f001994:	dc400117 	ldw	r17,4(sp)
 f001998:	dc000017 	ldw	r16,0(sp)
 f00199c:	dec00504 	addi	sp,sp,20
 f0019a0:	f800283a 	ret

0f0019a4 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 f0019a4:	00c00034 	movhi	r3,0
 f0019a8:	18c01004 	addi	r3,r3,64
 f0019ac:	18800017 	ldw	r2,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 f0019b0:	200b883a 	mov	r5,r4
 f0019b4:	1000011e 	bne	r2,zero,f0019bc <alt_avalon_timer_sc_init+0x18>
  {
    _alt_tick_rate = nticks;
 f0019b8:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 f0019bc:	008001c4 	movi	r2,7
 f0019c0:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 f0019c4:	3009883a 	mov	r4,r6
 f0019c8:	0183c034 	movhi	r6,3840
 f0019cc:	31867504 	addi	r6,r6,6612
 f0019d0:	f0015081 	jmpi	f001508 <alt_irq_register>

0f0019d4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 f0019d4:	defffe04 	addi	sp,sp,-8
 f0019d8:	dfc00115 	stw	ra,4(sp)
 f0019dc:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 f0019e0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 f0019e4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 f0019e8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 f0019ec:	00bfff84 	movi	r2,-2
 f0019f0:	8084703a 	and	r2,r16,r2
 f0019f4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 f0019f8:	f0016080 	call	f001608 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 f0019fc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 f001a00:	dfc00117 	ldw	ra,4(sp)
 f001a04:	dc000017 	ldw	r16,0(sp)
 f001a08:	dec00204 	addi	sp,sp,8
 f001a0c:	f800283a 	ret

0f001a10 <m2vdd_hx8347a_write_reg>:
	}
}

void m2vdd_hx8347a_write_reg(alt_u32 base, alt_u8 index, alt_u16 value)
{
	while(IORD_M2VDD_HX8347A_CONTROL(base) & 2);
 f001a10:	20800037 	ldwio	r2,0(r4)
 f001a14:	1080008c 	andi	r2,r2,2
 f001a18:	103ffd1e 	bne	r2,zero,f001a10 <m2vdd_hx8347a_write_reg>
	IOWR_M2VDD_HX8347A_CONTROL(base, index |
 f001a1c:	28803fcc 	andi	r2,r5,255
 f001a20:	109000b4 	orhi	r2,r2,16386
 f001a24:	20800035 	stwio	r2,0(r4)
		M2VDD_HX8347A_CONTROL_WRITE_MSK |
		M2VDD_HX8347A_CONTROL_RESET_MSK);
	IOWR_M2VDD_HX8347A_CONTROL(base, value |
 f001a28:	30bfffcc 	andi	r2,r6,65535
 f001a2c:	109000f4 	orhi	r2,r2,16387
 f001a30:	20800035 	stwio	r2,0(r4)
		M2VDD_HX8347A_CONTROL_WRITE_MSK |
		M2VDD_HX8347A_CONTROL_RESET_MSK |
		M2VDD_HX8347A_CONTROL_RS_MSK);
}
 f001a34:	f800283a 	ret

0f001a38 <m2vdd_hx8347a_init>:
//--------------------------------------------------------------------------------
// Initialize LCD
//
void m2vdd_hx8347a_init(m2vdd_hx8347a_state* sp)
{
	void* base = sp->base;
 f001a38:	21000017 	ldw	r4,0(r4)

	// Soft reset
	IOWR_M2VDD_HX8347A_CONTROL(base, M2VDD_HX8347A_CONTROL_SRESET_MSK);
 f001a3c:	00820034 	movhi	r2,2048
 f001a40:	20800035 	stwio	r2,0(r4)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 f001a44:	00800034 	movhi	r2,0
 f001a48:	10801104 	addi	r2,r2,68
 f001a4c:	10c00017 	ldw	r3,0(r2)
 f001a50:	100b883a 	mov	r5,r2
#include "m2vdd_hx8347a_regs.h"
#include "sys/alt_alarm.h"

static void delay(int ms)
{
	int end = alt_nticks() + ms + 1;
 f001a54:	18c00084 	addi	r3,r3,2
 f001a58:	28800017 	ldw	r2,0(r5)
	while(alt_nticks() < end);
 f001a5c:	10fffe36 	bltu	r2,r3,f001a58 <m2vdd_hx8347a_init+0x20>
	void* base = sp->base;

	// Soft reset
	IOWR_M2VDD_HX8347A_CONTROL(base, M2VDD_HX8347A_CONTROL_SRESET_MSK);
	delay(1);
	IOWR_M2VDD_HX8347A_CONTROL(base, 0);
 f001a60:	20000035 	stwio	zero,0(r4)
 f001a64:	28800017 	ldw	r2,0(r5)
 f001a68:	01400034 	movhi	r5,0
 f001a6c:	29401104 	addi	r5,r5,68
#include "m2vdd_hx8347a_regs.h"
#include "sys/alt_alarm.h"

static void delay(int ms)
{
	int end = alt_nticks() + ms + 1;
 f001a70:	10c00084 	addi	r3,r2,2
 f001a74:	28800017 	ldw	r2,0(r5)
	while(alt_nticks() < end);
 f001a78:	10fffe36 	bltu	r2,r3,f001a74 <m2vdd_hx8347a_init+0x3c>
	delay(1);
	IOWR_M2VDD_HX8347A_CONTROL(base, 0);
	delay(1);

	// Assert LCD's reset
	IOWR_M2VDD_HX8347A_CONTROL(base, M2VDD_HX8347A_CONTROL_WRITE_MSK);
 f001a7c:	00900034 	movhi	r2,16384
 f001a80:	20800035 	stwio	r2,0(r4)
 f001a84:	0143c034 	movhi	r5,3840
 f001a88:	2946bd04 	addi	r5,r5,6900
 f001a8c:	02003fc4 	movi	r8,255
 f001a90:	01c00034 	movhi	r7,0
 f001a94:	39c01104 	addi	r7,r7,68
	};

	const unsigned char* p = codes;
	for(;; p += 2)
	{
		if(p[0] == 0xff)
 f001a98:	28800003 	ldbu	r2,0(r5)
 f001a9c:	12000a1e 	bne	r2,r8,f001ac8 <m2vdd_hx8347a_init+0x90>
		{
			if(p[1] == 0) break;
 f001aa0:	28c00043 	ldbu	r3,1(r5)
 f001aa4:	18000f26 	beq	r3,zero,f001ae4 <m2vdd_hx8347a_init+0xac>
 f001aa8:	38800017 	ldw	r2,0(r7)
 f001aac:	01800034 	movhi	r6,0
 f001ab0:	31801104 	addi	r6,r6,68
#include "m2vdd_hx8347a_regs.h"
#include "sys/alt_alarm.h"

static void delay(int ms)
{
	int end = alt_nticks() + ms + 1;
 f001ab4:	10800044 	addi	r2,r2,1
 f001ab8:	1887883a 	add	r3,r3,r2
 f001abc:	30800017 	ldw	r2,0(r6)
	while(alt_nticks() < end);
 f001ac0:	10c0062e 	bgeu	r2,r3,f001adc <m2vdd_hx8347a_init+0xa4>
 f001ac4:	003ffd06 	br	f001abc <m2vdd_hx8347a_init+0x84>
			if(p[1] == 0) break;
			delay(p[1]);
		}
		else
		{
			IOWR_M2VDD_HX8347A_CONTROL(base, p[0] |
 f001ac8:	109000b4 	orhi	r2,r2,16386
 f001acc:	20800035 	stwio	r2,0(r4)
				M2VDD_HX8347A_CONTROL_WRITE_MSK |
				M2VDD_HX8347A_CONTROL_RESET_MSK);
			IOWR_M2VDD_HX8347A_CONTROL(base, p[1] |
 f001ad0:	28800043 	ldbu	r2,1(r5)
 f001ad4:	109000f4 	orhi	r2,r2,16387
 f001ad8:	20800035 	stwio	r2,0(r4)

	0xff,   0, // END
	};

	const unsigned char* p = codes;
	for(;; p += 2)
 f001adc:	29400084 	addi	r5,r5,2
 f001ae0:	003fed06 	br	f001a98 <m2vdd_hx8347a_init+0x60>
 f001ae4:	f800283a 	ret

0f001ae8 <m2vdec_init>:
//--------------------------------------------------------------------------------
// Initialize MPEG2 Video Decoder
//
void m2vdec_init(m2vdec_state* sp)
{
}
 f001ae8:	f800283a 	ret

0f001aec <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 f001aec:	000170fa 	wrctl	ienable,zero
}
 f001af0:	f800283a 	ret
